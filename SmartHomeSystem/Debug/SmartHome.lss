
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000065a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000336  00800060  000065a6  0000663a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  00800396  00800396  00006970  2**0
                  ALLOC
  3 .stab         00005b80  00000000  00000000  00006970  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001de3  00000000  00000000  0000c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000e2d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000e453  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000e626  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00010635  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  000117a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  000127a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  00012948  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  00012c09  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000134b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <__vector_1>
       8:	0c 94 35 0e 	jmp	0x1c6a	; 0x1c6a <__vector_2>
       c:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 2e 1e 	jmp	0x3c5c	; 0x3c5c <__vector_6>
      1c:	0c 94 b0 1d 	jmp	0x3b60	; 0x3b60 <__vector_7>
      20:	0c 94 ef 1d 	jmp	0x3bde	; 0x3bde <__vector_8>
      24:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <__vector_9>
      28:	0c 94 dc 1b 	jmp	0x37b8	; 0x37b8 <__vector_10>
      2c:	0c 94 1b 1c 	jmp	0x3836	; 0x3836 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	f5 e6       	ldi	r31, 0x65	; 101
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3c       	cpi	r26, 0xCA	; 202
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <main>
      8a:	0c 94 d1 32 	jmp	0x65a2	; 0x65a2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9a 32 	jmp	0x6534	; 0x6534 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e6       	ldi	r26, 0x61	; 97
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a6 32 	jmp	0x654c	; 0x654c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c2 32 	jmp	0x6584	; 0x6584 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a6 32 	jmp	0x654c	; 0x654c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c2 32 	jmp	0x6584	; 0x6584 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9a 32 	jmp	0x6534	; 0x6534 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	81 e6       	ldi	r24, 0x61	; 97
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b6 32 	jmp	0x656c	; 0x656c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a6 32 	jmp	0x654c	; 0x654c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c2 32 	jmp	0x6584	; 0x6584 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a6 32 	jmp	0x654c	; 0x654c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c2 32 	jmp	0x6584	; 0x6584 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a6 32 	jmp	0x654c	; 0x654c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c2 32 	jmp	0x6584	; 0x6584 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 aa 32 	jmp	0x6554	; 0x6554 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c6 32 	jmp	0x658c	; 0x658c <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 a2 32 	jmp	0x6544	; 0x6544 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__floatunsisf+0xe0>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__floatunsisf+0xbc>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__floatunsisf+0x7c>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__floatunsisf+0x74>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__floatunsisf+0x9e>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__floatunsisf+0xe0>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__floatunsisf+0xe0>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__floatunsisf+0xcc>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__floatunsisf+0xc4>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 be 32 	jmp	0x657c	; 0x657c <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e7 59       	subi	r30, 0x97	; 151
     972:	fd 4f       	sbci	r31, 0xFD	; 253
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <ADC_voidInitialization>:
#endif


void (*(ADC_PfCallBack))(void) = NULL;  //Global Variable Pointer To Function Follow ADC

void ADC_voidInitialization(void){
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	/********************* VOLTAGE_REF Initialization **********************/
	#if 	VOLTAGE_REF == EXT_REF
		CLR_BIT(ADMUX ,ADMUX_REFS0);
		CLR_BIT(ADMUX ,ADMUX_REFS1);
	#elif 	VOLTAGE_REF == VCC_REF
		SET_BIT(ADMUX ,ADMUX_REFS0);
     cde:	a7 e2       	ldi	r26, 0x27	; 39
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e7 e2       	ldi	r30, 0x27	; 39
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 64       	ori	r24, 0x40	; 64
     cea:	8c 93       	st	X, r24
		CLR_BIT(ADMUX ,ADMUX_REFS1);
     cec:	a7 e2       	ldi	r26, 0x27	; 39
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e7 e2       	ldi	r30, 0x27	; 39
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8f 77       	andi	r24, 0x7F	; 127
     cf8:	8c 93       	st	X, r24
		#error 	"WRONG CHOICE OF VOLTAGE REFERENCE!"
	#endif
	
	/***************************** ALIGNMENT *****************************/
	#if 	ALIGNMENT == RIGHT
		CLR_BIT(ADMUX ,ADMUX_ADLAR);
     cfa:	a7 e2       	ldi	r26, 0x27	; 39
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e7 e2       	ldi	r30, 0x27	; 39
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8f 7d       	andi	r24, 0xDF	; 223
     d06:	8c 93       	st	X, r24
	#elif 	ADC_Prescaler == DIV_Factor64
		CLR_BIT(ADCSRA ,ADCSRA_ADPS0);
		SET_BIT(ADCSRA ,ADCSRA_ADPS1);
		SET_BIT(ADCSRA ,ADCSRA_ADPS2);
	#elif 	ADC_Prescaler == DIV_Factor128
		SET_BIT(ADCSRA ,ADCSRA_ADPS0);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	81 60       	ori	r24, 0x01	; 1
     d14:	8c 93       	st	X, r24
		SET_BIT(ADCSRA ,ADCSRA_ADPS1);
     d16:	a6 e2       	ldi	r26, 0x26	; 38
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e6 e2       	ldi	r30, 0x26	; 38
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	82 60       	ori	r24, 0x02	; 2
     d22:	8c 93       	st	X, r24
		SET_BIT(ADCSRA ,ADCSRA_ADPS2);
     d24:	a6 e2       	ldi	r26, 0x26	; 38
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e6 e2       	ldi	r30, 0x26	; 38
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	84 60       	ori	r24, 0x04	; 4
     d30:	8c 93       	st	X, r24
	#else
		#error 	"WRONG CHOICE OF PRESCALLER!"
	#endif
	
	/***************************** ADC ENABLE *****************************/
	SET_BIT(ADCSRA ,ADCSRA_ADEN);
     d32:	a6 e2       	ldi	r26, 0x26	; 38
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e6 e2       	ldi	r30, 0x26	; 38
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	80 68       	ori	r24, 0x80	; 128
     d3e:	8c 93       	st	X, r24
	/****************************** ADC MODE ******************************/
	#if 	MODE == POLLING
		SET_BIT(ADCSRA ,ADCSRA_ADIF);		// CLEAR THE FLAG
		CLR_BIT(ADCSRA ,ADCSRA_ADIE);		// DISABLE INTERRUPT
	#elif 	MODE == INTERRUPT
		SET_BIT(ADCSRA ,ADCSRA_ADIF);		// CLEAR THE FLAG
     d40:	a6 e2       	ldi	r26, 0x26	; 38
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e6 e2       	ldi	r30, 0x26	; 38
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	80 61       	ori	r24, 0x10	; 16
     d4c:	8c 93       	st	X, r24
		SET_BIT(ADCSRA ,ADCSRA_ADIE);		// ENABLE INTERRUPT
     d4e:	a6 e2       	ldi	r26, 0x26	; 38
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e6 e2       	ldi	r30, 0x26	; 38
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	88 60       	ori	r24, 0x08	; 8
     d5a:	8c 93       	st	X, r24
	#else
		#error 	"WRONG CHOICE OF ADC MODE!"
	#endif
}
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <ADC_u16ReadChannelSyn>:

u16  ADC_u16ReadChannelSyn(u8 Copy_u8Channel){
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	00 d0       	rcall	.+0      	; 0xd68 <ADC_u16ReadChannelSyn+0x6>
     d68:	00 d0       	rcall	.+0      	; 0xd6a <ADC_u16ReadChannelSyn+0x8>
     d6a:	0f 92       	push	r0
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	8b 83       	std	Y+3, r24	; 0x03
	
	u16 Local_u16Value = 0;
     d72:	1a 82       	std	Y+2, r1	; 0x02
     d74:	19 82       	std	Y+1, r1	; 0x01
	
	/************************** Channel Selection **************************/
	if(Copy_u8Channel < 8){
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	88 30       	cpi	r24, 0x08	; 8
     d7a:	08 f0       	brcs	.+2      	; 0xd7e <ADC_u16ReadChannelSyn+0x1c>
     d7c:	59 c1       	rjmp	.+690    	; 0x1030 <ADC_u16ReadChannelSyn+0x2ce>
		switch(Copy_u8Channel){
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	3d 83       	std	Y+5, r19	; 0x05
     d86:	2c 83       	std	Y+4, r18	; 0x04
     d88:	8c 81       	ldd	r24, Y+4	; 0x04
     d8a:	9d 81       	ldd	r25, Y+5	; 0x05
     d8c:	83 30       	cpi	r24, 0x03	; 3
     d8e:	91 05       	cpc	r25, r1
     d90:	09 f4       	brne	.+2      	; 0xd94 <ADC_u16ReadChannelSyn+0x32>
     d92:	9b c0       	rjmp	.+310    	; 0xeca <ADC_u16ReadChannelSyn+0x168>
     d94:	2c 81       	ldd	r18, Y+4	; 0x04
     d96:	3d 81       	ldd	r19, Y+5	; 0x05
     d98:	24 30       	cpi	r18, 0x04	; 4
     d9a:	31 05       	cpc	r19, r1
     d9c:	8c f4       	brge	.+34     	; 0xdc0 <ADC_u16ReadChannelSyn+0x5e>
     d9e:	8c 81       	ldd	r24, Y+4	; 0x04
     da0:	9d 81       	ldd	r25, Y+5	; 0x05
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	91 05       	cpc	r25, r1
     da6:	09 f4       	brne	.+2      	; 0xdaa <ADC_u16ReadChannelSyn+0x48>
     da8:	48 c0       	rjmp	.+144    	; 0xe3a <ADC_u16ReadChannelSyn+0xd8>
     daa:	2c 81       	ldd	r18, Y+4	; 0x04
     dac:	3d 81       	ldd	r19, Y+5	; 0x05
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	31 05       	cpc	r19, r1
     db2:	0c f0       	brlt	.+2      	; 0xdb6 <ADC_u16ReadChannelSyn+0x54>
     db4:	66 c0       	rjmp	.+204    	; 0xe82 <ADC_u16ReadChannelSyn+0x120>
     db6:	8c 81       	ldd	r24, Y+4	; 0x04
     db8:	9d 81       	ldd	r25, Y+5	; 0x05
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	d1 f0       	breq	.+52     	; 0xdf2 <ADC_u16ReadChannelSyn+0x90>
     dbe:	38 c1       	rjmp	.+624    	; 0x1030 <ADC_u16ReadChannelSyn+0x2ce>
     dc0:	2c 81       	ldd	r18, Y+4	; 0x04
     dc2:	3d 81       	ldd	r19, Y+5	; 0x05
     dc4:	25 30       	cpi	r18, 0x05	; 5
     dc6:	31 05       	cpc	r19, r1
     dc8:	09 f4       	brne	.+2      	; 0xdcc <ADC_u16ReadChannelSyn+0x6a>
     dca:	c7 c0       	rjmp	.+398    	; 0xf5a <ADC_u16ReadChannelSyn+0x1f8>
     dcc:	8c 81       	ldd	r24, Y+4	; 0x04
     dce:	9d 81       	ldd	r25, Y+5	; 0x05
     dd0:	85 30       	cpi	r24, 0x05	; 5
     dd2:	91 05       	cpc	r25, r1
     dd4:	0c f4       	brge	.+2      	; 0xdd8 <ADC_u16ReadChannelSyn+0x76>
     dd6:	9d c0       	rjmp	.+314    	; 0xf12 <ADC_u16ReadChannelSyn+0x1b0>
     dd8:	2c 81       	ldd	r18, Y+4	; 0x04
     dda:	3d 81       	ldd	r19, Y+5	; 0x05
     ddc:	26 30       	cpi	r18, 0x06	; 6
     dde:	31 05       	cpc	r19, r1
     de0:	09 f4       	brne	.+2      	; 0xde4 <ADC_u16ReadChannelSyn+0x82>
     de2:	df c0       	rjmp	.+446    	; 0xfa2 <ADC_u16ReadChannelSyn+0x240>
     de4:	8c 81       	ldd	r24, Y+4	; 0x04
     de6:	9d 81       	ldd	r25, Y+5	; 0x05
     de8:	87 30       	cpi	r24, 0x07	; 7
     dea:	91 05       	cpc	r25, r1
     dec:	09 f4       	brne	.+2      	; 0xdf0 <ADC_u16ReadChannelSyn+0x8e>
     dee:	fd c0       	rjmp	.+506    	; 0xfea <ADC_u16ReadChannelSyn+0x288>
     df0:	1f c1       	rjmp	.+574    	; 0x1030 <ADC_u16ReadChannelSyn+0x2ce>
			case CHANNEL0 :
					CLR_BIT(ADMUX ,ADMUX_MUX0);
     df2:	a7 e2       	ldi	r26, 0x27	; 39
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e7 e2       	ldi	r30, 0x27	; 39
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	8e 7f       	andi	r24, 0xFE	; 254
     dfe:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX1);
     e00:	a7 e2       	ldi	r26, 0x27	; 39
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e7 e2       	ldi	r30, 0x27	; 39
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	8d 7f       	andi	r24, 0xFD	; 253
     e0c:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX2);
     e0e:	a7 e2       	ldi	r26, 0x27	; 39
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e7 e2       	ldi	r30, 0x27	; 39
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	8b 7f       	andi	r24, 0xFB	; 251
     e1a:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX3);
     e1c:	a7 e2       	ldi	r26, 0x27	; 39
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e7 e2       	ldi	r30, 0x27	; 39
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	87 7f       	andi	r24, 0xF7	; 247
     e28:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX4);
     e2a:	a7 e2       	ldi	r26, 0x27	; 39
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e7 e2       	ldi	r30, 0x27	; 39
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8f 7e       	andi	r24, 0xEF	; 239
     e36:	8c 93       	st	X, r24
     e38:	fb c0       	rjmp	.+502    	; 0x1030 <ADC_u16ReadChannelSyn+0x2ce>
					break;
			case CHANNEL1 :
					SET_BIT(ADMUX ,ADMUX_MUX0);
     e3a:	a7 e2       	ldi	r26, 0x27	; 39
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e7 e2       	ldi	r30, 0x27	; 39
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	81 60       	ori	r24, 0x01	; 1
     e46:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX1);
     e48:	a7 e2       	ldi	r26, 0x27	; 39
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e7 e2       	ldi	r30, 0x27	; 39
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	8d 7f       	andi	r24, 0xFD	; 253
     e54:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX2);
     e56:	a7 e2       	ldi	r26, 0x27	; 39
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e7 e2       	ldi	r30, 0x27	; 39
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	8b 7f       	andi	r24, 0xFB	; 251
     e62:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX3);
     e64:	a7 e2       	ldi	r26, 0x27	; 39
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e7 e2       	ldi	r30, 0x27	; 39
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	87 7f       	andi	r24, 0xF7	; 247
     e70:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX4);
     e72:	a7 e2       	ldi	r26, 0x27	; 39
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e7 e2       	ldi	r30, 0x27	; 39
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	8f 7e       	andi	r24, 0xEF	; 239
     e7e:	8c 93       	st	X, r24
     e80:	d7 c0       	rjmp	.+430    	; 0x1030 <ADC_u16ReadChannelSyn+0x2ce>
					break;
			case CHANNEL2 :
					CLR_BIT(ADMUX ,ADMUX_MUX0);
     e82:	a7 e2       	ldi	r26, 0x27	; 39
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e7 e2       	ldi	r30, 0x27	; 39
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8e 7f       	andi	r24, 0xFE	; 254
     e8e:	8c 93       	st	X, r24
					SET_BIT(ADMUX ,ADMUX_MUX1);
     e90:	a7 e2       	ldi	r26, 0x27	; 39
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e7 e2       	ldi	r30, 0x27	; 39
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	82 60       	ori	r24, 0x02	; 2
     e9c:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX2);
     e9e:	a7 e2       	ldi	r26, 0x27	; 39
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e7 e2       	ldi	r30, 0x27	; 39
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	8b 7f       	andi	r24, 0xFB	; 251
     eaa:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX3);
     eac:	a7 e2       	ldi	r26, 0x27	; 39
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e7 e2       	ldi	r30, 0x27	; 39
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	87 7f       	andi	r24, 0xF7	; 247
     eb8:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX4);
     eba:	a7 e2       	ldi	r26, 0x27	; 39
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e7 e2       	ldi	r30, 0x27	; 39
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	8f 7e       	andi	r24, 0xEF	; 239
     ec6:	8c 93       	st	X, r24
     ec8:	b3 c0       	rjmp	.+358    	; 0x1030 <ADC_u16ReadChannelSyn+0x2ce>
					break;
			case CHANNEL3 :
					SET_BIT(ADMUX ,ADMUX_MUX0);
     eca:	a7 e2       	ldi	r26, 0x27	; 39
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e7 e2       	ldi	r30, 0x27	; 39
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	81 60       	ori	r24, 0x01	; 1
     ed6:	8c 93       	st	X, r24
					SET_BIT(ADMUX ,ADMUX_MUX1);
     ed8:	a7 e2       	ldi	r26, 0x27	; 39
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e7 e2       	ldi	r30, 0x27	; 39
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	82 60       	ori	r24, 0x02	; 2
     ee4:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX2);
     ee6:	a7 e2       	ldi	r26, 0x27	; 39
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e7 e2       	ldi	r30, 0x27	; 39
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	8b 7f       	andi	r24, 0xFB	; 251
     ef2:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX3);
     ef4:	a7 e2       	ldi	r26, 0x27	; 39
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e7 e2       	ldi	r30, 0x27	; 39
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	87 7f       	andi	r24, 0xF7	; 247
     f00:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX4);
     f02:	a7 e2       	ldi	r26, 0x27	; 39
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e7 e2       	ldi	r30, 0x27	; 39
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	8f 7e       	andi	r24, 0xEF	; 239
     f0e:	8c 93       	st	X, r24
     f10:	8f c0       	rjmp	.+286    	; 0x1030 <ADC_u16ReadChannelSyn+0x2ce>
					break;
			case CHANNEL4 :
					CLR_BIT(ADMUX ,ADMUX_MUX0);
     f12:	a7 e2       	ldi	r26, 0x27	; 39
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e7 e2       	ldi	r30, 0x27	; 39
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	8e 7f       	andi	r24, 0xFE	; 254
     f1e:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX1);
     f20:	a7 e2       	ldi	r26, 0x27	; 39
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e7 e2       	ldi	r30, 0x27	; 39
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	8d 7f       	andi	r24, 0xFD	; 253
     f2c:	8c 93       	st	X, r24
					SET_BIT(ADMUX ,ADMUX_MUX2);
     f2e:	a7 e2       	ldi	r26, 0x27	; 39
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e7 e2       	ldi	r30, 0x27	; 39
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	84 60       	ori	r24, 0x04	; 4
     f3a:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX3);
     f3c:	a7 e2       	ldi	r26, 0x27	; 39
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e7 e2       	ldi	r30, 0x27	; 39
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	87 7f       	andi	r24, 0xF7	; 247
     f48:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX4);
     f4a:	a7 e2       	ldi	r26, 0x27	; 39
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e7 e2       	ldi	r30, 0x27	; 39
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	8f 7e       	andi	r24, 0xEF	; 239
     f56:	8c 93       	st	X, r24
     f58:	6b c0       	rjmp	.+214    	; 0x1030 <ADC_u16ReadChannelSyn+0x2ce>
					break;
			case CHANNEL5 :
					SET_BIT(ADMUX ,ADMUX_MUX0);
     f5a:	a7 e2       	ldi	r26, 0x27	; 39
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e7 e2       	ldi	r30, 0x27	; 39
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	81 60       	ori	r24, 0x01	; 1
     f66:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX1);
     f68:	a7 e2       	ldi	r26, 0x27	; 39
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e7 e2       	ldi	r30, 0x27	; 39
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	8d 7f       	andi	r24, 0xFD	; 253
     f74:	8c 93       	st	X, r24
					SET_BIT(ADMUX ,ADMUX_MUX2);
     f76:	a7 e2       	ldi	r26, 0x27	; 39
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e7 e2       	ldi	r30, 0x27	; 39
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	84 60       	ori	r24, 0x04	; 4
     f82:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX3);
     f84:	a7 e2       	ldi	r26, 0x27	; 39
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e7 e2       	ldi	r30, 0x27	; 39
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	87 7f       	andi	r24, 0xF7	; 247
     f90:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX4);
     f92:	a7 e2       	ldi	r26, 0x27	; 39
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e7 e2       	ldi	r30, 0x27	; 39
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	8f 7e       	andi	r24, 0xEF	; 239
     f9e:	8c 93       	st	X, r24
     fa0:	47 c0       	rjmp	.+142    	; 0x1030 <ADC_u16ReadChannelSyn+0x2ce>
					break;
			case CHANNEL6 :
					CLR_BIT(ADMUX ,ADMUX_MUX0);
     fa2:	a7 e2       	ldi	r26, 0x27	; 39
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e7 e2       	ldi	r30, 0x27	; 39
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	8e 7f       	andi	r24, 0xFE	; 254
     fae:	8c 93       	st	X, r24
					SET_BIT(ADMUX ,ADMUX_MUX1);
     fb0:	a7 e2       	ldi	r26, 0x27	; 39
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e7 e2       	ldi	r30, 0x27	; 39
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	82 60       	ori	r24, 0x02	; 2
     fbc:	8c 93       	st	X, r24
					SET_BIT(ADMUX ,ADMUX_MUX2);
     fbe:	a7 e2       	ldi	r26, 0x27	; 39
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e7 e2       	ldi	r30, 0x27	; 39
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	84 60       	ori	r24, 0x04	; 4
     fca:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX3);
     fcc:	a7 e2       	ldi	r26, 0x27	; 39
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e7 e2       	ldi	r30, 0x27	; 39
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	87 7f       	andi	r24, 0xF7	; 247
     fd8:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX4);
     fda:	a7 e2       	ldi	r26, 0x27	; 39
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e7 e2       	ldi	r30, 0x27	; 39
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	8f 7e       	andi	r24, 0xEF	; 239
     fe6:	8c 93       	st	X, r24
     fe8:	23 c0       	rjmp	.+70     	; 0x1030 <ADC_u16ReadChannelSyn+0x2ce>
					break;
			case CHANNEL7 :
					SET_BIT(ADMUX ,ADMUX_MUX0);
     fea:	a7 e2       	ldi	r26, 0x27	; 39
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e7 e2       	ldi	r30, 0x27	; 39
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	81 60       	ori	r24, 0x01	; 1
     ff6:	8c 93       	st	X, r24
					SET_BIT(ADMUX ,ADMUX_MUX1);
     ff8:	a7 e2       	ldi	r26, 0x27	; 39
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e7 e2       	ldi	r30, 0x27	; 39
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	82 60       	ori	r24, 0x02	; 2
    1004:	8c 93       	st	X, r24
					SET_BIT(ADMUX ,ADMUX_MUX2);
    1006:	a7 e2       	ldi	r26, 0x27	; 39
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e7 e2       	ldi	r30, 0x27	; 39
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	84 60       	ori	r24, 0x04	; 4
    1012:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX3);
    1014:	a7 e2       	ldi	r26, 0x27	; 39
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e7 e2       	ldi	r30, 0x27	; 39
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	87 7f       	andi	r24, 0xF7	; 247
    1020:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX4);
    1022:	a7 e2       	ldi	r26, 0x27	; 39
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e7 e2       	ldi	r30, 0x27	; 39
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	8f 7e       	andi	r24, 0xEF	; 239
    102e:	8c 93       	st	X, r24
					break;
		}
	}
	
	/******************* Start Conversion (Sngle Conversion) *********************/
	SET_BIT(ADCSRA ,ADCSRA_ADSC); 
    1030:	a6 e2       	ldi	r26, 0x26	; 38
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e6 e2       	ldi	r30, 0x26	; 38
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	80 64       	ori	r24, 0x40	; 64
    103c:	8c 93       	st	X, r24
	
	/********************************** Poolling *********************************/	
	while((GET_BIT(ADCSRA ,ADCSRA_ADIF)) == 0);
    103e:	e6 e2       	ldi	r30, 0x26	; 38
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	82 95       	swap	r24
    1046:	8f 70       	andi	r24, 0x0F	; 15
    1048:	88 2f       	mov	r24, r24
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	81 70       	andi	r24, 0x01	; 1
    104e:	90 70       	andi	r25, 0x00	; 0
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	a9 f3       	breq	.-22     	; 0x103e <ADC_u16ReadChannelSyn+0x2dc>
	
	/******************************* Clear the Flag ******************************/
	SET_BIT(ADCSRA ,ADCSRA_ADIF);
    1054:	a6 e2       	ldi	r26, 0x26	; 38
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e6 e2       	ldi	r30, 0x26	; 38
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	80 61       	ori	r24, 0x10	; 16
    1060:	8c 93       	st	X, r24
	
	/************************* Read The Converted Value **************************/
	Local_u16Value = ADC;
    1062:	e4 e2       	ldi	r30, 0x24	; 36
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	91 81       	ldd	r25, Z+1	; 0x01
    106a:	9a 83       	std	Y+2, r25	; 0x02
    106c:	89 83       	std	Y+1, r24	; 0x01
	
	return Local_u16Value;
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <ADC_voidReadChannelASyn>:

void  ADC_voidReadChannelASyn(u8 Copy_u8Channel){
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	00 d0       	rcall	.+0      	; 0x1088 <ADC_voidReadChannelASyn+0x6>
    1088:	0f 92       	push	r0
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Channel < 8){
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	88 30       	cpi	r24, 0x08	; 8
    1094:	08 f0       	brcs	.+2      	; 0x1098 <ADC_voidReadChannelASyn+0x16>
    1096:	59 c1       	rjmp	.+690    	; 0x134a <ADC_voidReadChannelASyn+0x2c8>
		switch(Copy_u8Channel){
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	3b 83       	std	Y+3, r19	; 0x03
    10a0:	2a 83       	std	Y+2, r18	; 0x02
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	9b 81       	ldd	r25, Y+3	; 0x03
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	91 05       	cpc	r25, r1
    10aa:	09 f4       	brne	.+2      	; 0x10ae <ADC_voidReadChannelASyn+0x2c>
    10ac:	9b c0       	rjmp	.+310    	; 0x11e4 <ADC_voidReadChannelASyn+0x162>
    10ae:	2a 81       	ldd	r18, Y+2	; 0x02
    10b0:	3b 81       	ldd	r19, Y+3	; 0x03
    10b2:	24 30       	cpi	r18, 0x04	; 4
    10b4:	31 05       	cpc	r19, r1
    10b6:	8c f4       	brge	.+34     	; 0x10da <ADC_voidReadChannelASyn+0x58>
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	9b 81       	ldd	r25, Y+3	; 0x03
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	91 05       	cpc	r25, r1
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <ADC_voidReadChannelASyn+0x42>
    10c2:	48 c0       	rjmp	.+144    	; 0x1154 <ADC_voidReadChannelASyn+0xd2>
    10c4:	2a 81       	ldd	r18, Y+2	; 0x02
    10c6:	3b 81       	ldd	r19, Y+3	; 0x03
    10c8:	22 30       	cpi	r18, 0x02	; 2
    10ca:	31 05       	cpc	r19, r1
    10cc:	0c f0       	brlt	.+2      	; 0x10d0 <ADC_voidReadChannelASyn+0x4e>
    10ce:	66 c0       	rjmp	.+204    	; 0x119c <ADC_voidReadChannelASyn+0x11a>
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	9b 81       	ldd	r25, Y+3	; 0x03
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	d1 f0       	breq	.+52     	; 0x110c <ADC_voidReadChannelASyn+0x8a>
    10d8:	38 c1       	rjmp	.+624    	; 0x134a <ADC_voidReadChannelASyn+0x2c8>
    10da:	2a 81       	ldd	r18, Y+2	; 0x02
    10dc:	3b 81       	ldd	r19, Y+3	; 0x03
    10de:	25 30       	cpi	r18, 0x05	; 5
    10e0:	31 05       	cpc	r19, r1
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <ADC_voidReadChannelASyn+0x64>
    10e4:	c7 c0       	rjmp	.+398    	; 0x1274 <ADC_voidReadChannelASyn+0x1f2>
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ea:	85 30       	cpi	r24, 0x05	; 5
    10ec:	91 05       	cpc	r25, r1
    10ee:	0c f4       	brge	.+2      	; 0x10f2 <ADC_voidReadChannelASyn+0x70>
    10f0:	9d c0       	rjmp	.+314    	; 0x122c <ADC_voidReadChannelASyn+0x1aa>
    10f2:	2a 81       	ldd	r18, Y+2	; 0x02
    10f4:	3b 81       	ldd	r19, Y+3	; 0x03
    10f6:	26 30       	cpi	r18, 0x06	; 6
    10f8:	31 05       	cpc	r19, r1
    10fa:	09 f4       	brne	.+2      	; 0x10fe <ADC_voidReadChannelASyn+0x7c>
    10fc:	df c0       	rjmp	.+446    	; 0x12bc <ADC_voidReadChannelASyn+0x23a>
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	9b 81       	ldd	r25, Y+3	; 0x03
    1102:	87 30       	cpi	r24, 0x07	; 7
    1104:	91 05       	cpc	r25, r1
    1106:	09 f4       	brne	.+2      	; 0x110a <ADC_voidReadChannelASyn+0x88>
    1108:	fd c0       	rjmp	.+506    	; 0x1304 <ADC_voidReadChannelASyn+0x282>
    110a:	1f c1       	rjmp	.+574    	; 0x134a <ADC_voidReadChannelASyn+0x2c8>
			case CHANNEL0 :
					CLR_BIT(ADMUX ,ADMUX_MUX0);
    110c:	a7 e2       	ldi	r26, 0x27	; 39
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e7 e2       	ldi	r30, 0x27	; 39
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	8e 7f       	andi	r24, 0xFE	; 254
    1118:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX1);
    111a:	a7 e2       	ldi	r26, 0x27	; 39
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e7 e2       	ldi	r30, 0x27	; 39
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8d 7f       	andi	r24, 0xFD	; 253
    1126:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX2);
    1128:	a7 e2       	ldi	r26, 0x27	; 39
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e7 e2       	ldi	r30, 0x27	; 39
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	8b 7f       	andi	r24, 0xFB	; 251
    1134:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX3);
    1136:	a7 e2       	ldi	r26, 0x27	; 39
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e7 e2       	ldi	r30, 0x27	; 39
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	87 7f       	andi	r24, 0xF7	; 247
    1142:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX4);
    1144:	a7 e2       	ldi	r26, 0x27	; 39
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e7 e2       	ldi	r30, 0x27	; 39
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	8f 7e       	andi	r24, 0xEF	; 239
    1150:	8c 93       	st	X, r24
    1152:	fb c0       	rjmp	.+502    	; 0x134a <ADC_voidReadChannelASyn+0x2c8>
					break;
			case CHANNEL1 :
					SET_BIT(ADMUX ,ADMUX_MUX0);
    1154:	a7 e2       	ldi	r26, 0x27	; 39
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e7 e2       	ldi	r30, 0x27	; 39
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	81 60       	ori	r24, 0x01	; 1
    1160:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX1);
    1162:	a7 e2       	ldi	r26, 0x27	; 39
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e7 e2       	ldi	r30, 0x27	; 39
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	8d 7f       	andi	r24, 0xFD	; 253
    116e:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX2);
    1170:	a7 e2       	ldi	r26, 0x27	; 39
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e7 e2       	ldi	r30, 0x27	; 39
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	8b 7f       	andi	r24, 0xFB	; 251
    117c:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX3);
    117e:	a7 e2       	ldi	r26, 0x27	; 39
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e7 e2       	ldi	r30, 0x27	; 39
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	87 7f       	andi	r24, 0xF7	; 247
    118a:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX4);
    118c:	a7 e2       	ldi	r26, 0x27	; 39
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e7 e2       	ldi	r30, 0x27	; 39
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	8f 7e       	andi	r24, 0xEF	; 239
    1198:	8c 93       	st	X, r24
    119a:	d7 c0       	rjmp	.+430    	; 0x134a <ADC_voidReadChannelASyn+0x2c8>
					break;
			case CHANNEL2 :
					CLR_BIT(ADMUX ,ADMUX_MUX0);
    119c:	a7 e2       	ldi	r26, 0x27	; 39
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e7 e2       	ldi	r30, 0x27	; 39
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	8e 7f       	andi	r24, 0xFE	; 254
    11a8:	8c 93       	st	X, r24
					SET_BIT(ADMUX ,ADMUX_MUX1);
    11aa:	a7 e2       	ldi	r26, 0x27	; 39
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e7 e2       	ldi	r30, 0x27	; 39
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	82 60       	ori	r24, 0x02	; 2
    11b6:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX2);
    11b8:	a7 e2       	ldi	r26, 0x27	; 39
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e7 e2       	ldi	r30, 0x27	; 39
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	8b 7f       	andi	r24, 0xFB	; 251
    11c4:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX3);
    11c6:	a7 e2       	ldi	r26, 0x27	; 39
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e7 e2       	ldi	r30, 0x27	; 39
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	87 7f       	andi	r24, 0xF7	; 247
    11d2:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX4);
    11d4:	a7 e2       	ldi	r26, 0x27	; 39
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e7 e2       	ldi	r30, 0x27	; 39
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8f 7e       	andi	r24, 0xEF	; 239
    11e0:	8c 93       	st	X, r24
    11e2:	b3 c0       	rjmp	.+358    	; 0x134a <ADC_voidReadChannelASyn+0x2c8>
					break;
			case CHANNEL3 :
					SET_BIT(ADMUX ,ADMUX_MUX0);
    11e4:	a7 e2       	ldi	r26, 0x27	; 39
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e7 e2       	ldi	r30, 0x27	; 39
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	81 60       	ori	r24, 0x01	; 1
    11f0:	8c 93       	st	X, r24
					SET_BIT(ADMUX ,ADMUX_MUX1);
    11f2:	a7 e2       	ldi	r26, 0x27	; 39
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e7 e2       	ldi	r30, 0x27	; 39
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	82 60       	ori	r24, 0x02	; 2
    11fe:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX2);
    1200:	a7 e2       	ldi	r26, 0x27	; 39
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e7 e2       	ldi	r30, 0x27	; 39
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	8b 7f       	andi	r24, 0xFB	; 251
    120c:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX3);
    120e:	a7 e2       	ldi	r26, 0x27	; 39
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e7 e2       	ldi	r30, 0x27	; 39
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	87 7f       	andi	r24, 0xF7	; 247
    121a:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX4);
    121c:	a7 e2       	ldi	r26, 0x27	; 39
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e7 e2       	ldi	r30, 0x27	; 39
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	8f 7e       	andi	r24, 0xEF	; 239
    1228:	8c 93       	st	X, r24
    122a:	8f c0       	rjmp	.+286    	; 0x134a <ADC_voidReadChannelASyn+0x2c8>
					break;
			case CHANNEL4 :
					CLR_BIT(ADMUX ,ADMUX_MUX0);
    122c:	a7 e2       	ldi	r26, 0x27	; 39
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e7 e2       	ldi	r30, 0x27	; 39
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8e 7f       	andi	r24, 0xFE	; 254
    1238:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX1);
    123a:	a7 e2       	ldi	r26, 0x27	; 39
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e7 e2       	ldi	r30, 0x27	; 39
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	8d 7f       	andi	r24, 0xFD	; 253
    1246:	8c 93       	st	X, r24
					SET_BIT(ADMUX ,ADMUX_MUX2);
    1248:	a7 e2       	ldi	r26, 0x27	; 39
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e7 e2       	ldi	r30, 0x27	; 39
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	84 60       	ori	r24, 0x04	; 4
    1254:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX3);
    1256:	a7 e2       	ldi	r26, 0x27	; 39
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e7 e2       	ldi	r30, 0x27	; 39
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	87 7f       	andi	r24, 0xF7	; 247
    1262:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX4);
    1264:	a7 e2       	ldi	r26, 0x27	; 39
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e7 e2       	ldi	r30, 0x27	; 39
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	8f 7e       	andi	r24, 0xEF	; 239
    1270:	8c 93       	st	X, r24
    1272:	6b c0       	rjmp	.+214    	; 0x134a <ADC_voidReadChannelASyn+0x2c8>
					break;
			case CHANNEL5 :
					SET_BIT(ADMUX ,ADMUX_MUX0);
    1274:	a7 e2       	ldi	r26, 0x27	; 39
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e7 e2       	ldi	r30, 0x27	; 39
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	81 60       	ori	r24, 0x01	; 1
    1280:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX1);
    1282:	a7 e2       	ldi	r26, 0x27	; 39
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e7 e2       	ldi	r30, 0x27	; 39
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	8d 7f       	andi	r24, 0xFD	; 253
    128e:	8c 93       	st	X, r24
					SET_BIT(ADMUX ,ADMUX_MUX2);
    1290:	a7 e2       	ldi	r26, 0x27	; 39
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e7 e2       	ldi	r30, 0x27	; 39
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	84 60       	ori	r24, 0x04	; 4
    129c:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX3);
    129e:	a7 e2       	ldi	r26, 0x27	; 39
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e7 e2       	ldi	r30, 0x27	; 39
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	87 7f       	andi	r24, 0xF7	; 247
    12aa:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX4);
    12ac:	a7 e2       	ldi	r26, 0x27	; 39
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e7 e2       	ldi	r30, 0x27	; 39
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	8f 7e       	andi	r24, 0xEF	; 239
    12b8:	8c 93       	st	X, r24
    12ba:	47 c0       	rjmp	.+142    	; 0x134a <ADC_voidReadChannelASyn+0x2c8>
					break;
			case CHANNEL6 :
					CLR_BIT(ADMUX ,ADMUX_MUX0);
    12bc:	a7 e2       	ldi	r26, 0x27	; 39
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e7 e2       	ldi	r30, 0x27	; 39
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	8e 7f       	andi	r24, 0xFE	; 254
    12c8:	8c 93       	st	X, r24
					SET_BIT(ADMUX ,ADMUX_MUX1);
    12ca:	a7 e2       	ldi	r26, 0x27	; 39
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e7 e2       	ldi	r30, 0x27	; 39
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	82 60       	ori	r24, 0x02	; 2
    12d6:	8c 93       	st	X, r24
					SET_BIT(ADMUX ,ADMUX_MUX2);
    12d8:	a7 e2       	ldi	r26, 0x27	; 39
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e7 e2       	ldi	r30, 0x27	; 39
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	84 60       	ori	r24, 0x04	; 4
    12e4:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX3);
    12e6:	a7 e2       	ldi	r26, 0x27	; 39
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e7 e2       	ldi	r30, 0x27	; 39
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	87 7f       	andi	r24, 0xF7	; 247
    12f2:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX4);
    12f4:	a7 e2       	ldi	r26, 0x27	; 39
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e7 e2       	ldi	r30, 0x27	; 39
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	8f 7e       	andi	r24, 0xEF	; 239
    1300:	8c 93       	st	X, r24
    1302:	23 c0       	rjmp	.+70     	; 0x134a <ADC_voidReadChannelASyn+0x2c8>
					break;
			case CHANNEL7 :
					SET_BIT(ADMUX ,ADMUX_MUX0);
    1304:	a7 e2       	ldi	r26, 0x27	; 39
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e7 e2       	ldi	r30, 0x27	; 39
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	81 60       	ori	r24, 0x01	; 1
    1310:	8c 93       	st	X, r24
					SET_BIT(ADMUX ,ADMUX_MUX1);
    1312:	a7 e2       	ldi	r26, 0x27	; 39
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e7 e2       	ldi	r30, 0x27	; 39
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	82 60       	ori	r24, 0x02	; 2
    131e:	8c 93       	st	X, r24
					SET_BIT(ADMUX ,ADMUX_MUX2);
    1320:	a7 e2       	ldi	r26, 0x27	; 39
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e7 e2       	ldi	r30, 0x27	; 39
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	84 60       	ori	r24, 0x04	; 4
    132c:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX3);
    132e:	a7 e2       	ldi	r26, 0x27	; 39
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e7 e2       	ldi	r30, 0x27	; 39
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	87 7f       	andi	r24, 0xF7	; 247
    133a:	8c 93       	st	X, r24
					CLR_BIT(ADMUX ,ADMUX_MUX4);
    133c:	a7 e2       	ldi	r26, 0x27	; 39
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	e7 e2       	ldi	r30, 0x27	; 39
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	8f 7e       	andi	r24, 0xEF	; 239
    1348:	8c 93       	st	X, r24
					break;
		}
	}
	
	/******************* Start Conversion (Sngle Conversion) *********************/
	SET_BIT(ADCSRA ,ADCSRA_ADSC); 
    134a:	a6 e2       	ldi	r26, 0x26	; 38
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e6 e2       	ldi	r30, 0x26	; 38
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	80 64       	ori	r24, 0x40	; 64
    1356:	8c 93       	st	X, r24
}
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <ADC_u16ReadASynValue>:

u16  ADC_u16ReadASynValue(void){
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	00 d0       	rcall	.+0      	; 0x136a <ADC_u16ReadASynValue+0x6>
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16Value = 0;
    136e:	1a 82       	std	Y+2, r1	; 0x02
    1370:	19 82       	std	Y+1, r1	; 0x01
	
	/************************* Read The Converted Value **************************/
	Local_u16Value = ADC;
    1372:	e4 e2       	ldi	r30, 0x24	; 36
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	91 81       	ldd	r25, Z+1	; 0x01
    137a:	9a 83       	std	Y+2, r25	; 0x02
    137c:	89 83       	std	Y+1, r24	; 0x01
	
	return Local_u16Value;
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <ADC_voidSetCallBack>:

void ADC_voidSetCallBack(void (*pf)(void)) { /* pf = ADC_Func */
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	00 d0       	rcall	.+0      	; 0x1392 <ADC_voidSetCallBack+0x6>
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	9a 83       	std	Y+2, r25	; 0x02
    1398:	89 83       	std	Y+1, r24	; 0x01
	ADC_PfCallBack = pf;
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	9a 81       	ldd	r25, Y+2	; 0x02
    139e:	90 93 97 03 	sts	0x0397, r25
    13a2:	80 93 96 03 	sts	0x0396, r24
}
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <__vector_16>:
/* takeCare : This Prototype To convince the compiler that it is being called by the processor and make him use it and doesn't ignore it */
void __vector_16 (void) __attribute__((signal ,used));

/*This Function Called Only By Processor (hardware)*/
/* ISR Function For External Interrupt 0*/
void __vector_16(void){
    13b0:	1f 92       	push	r1
    13b2:	0f 92       	push	r0
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	0f 92       	push	r0
    13b8:	11 24       	eor	r1, r1
    13ba:	2f 93       	push	r18
    13bc:	3f 93       	push	r19
    13be:	4f 93       	push	r20
    13c0:	5f 93       	push	r21
    13c2:	6f 93       	push	r22
    13c4:	7f 93       	push	r23
    13c6:	8f 93       	push	r24
    13c8:	9f 93       	push	r25
    13ca:	af 93       	push	r26
    13cc:	bf 93       	push	r27
    13ce:	ef 93       	push	r30
    13d0:	ff 93       	push	r31
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
	ADC_PfCallBack();		/* => ADC_Func(); */
    13da:	e0 91 96 03 	lds	r30, 0x0396
    13de:	f0 91 97 03 	lds	r31, 0x0397
    13e2:	09 95       	icall
}
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	ff 91       	pop	r31
    13ea:	ef 91       	pop	r30
    13ec:	bf 91       	pop	r27
    13ee:	af 91       	pop	r26
    13f0:	9f 91       	pop	r25
    13f2:	8f 91       	pop	r24
    13f4:	7f 91       	pop	r23
    13f6:	6f 91       	pop	r22
    13f8:	5f 91       	pop	r21
    13fa:	4f 91       	pop	r20
    13fc:	3f 91       	pop	r19
    13fe:	2f 91       	pop	r18
    1400:	0f 90       	pop	r0
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	0f 90       	pop	r0
    1406:	1f 90       	pop	r1
    1408:	18 95       	reti

0000140a <DIO_voidSetPinDirection>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "Dio_private.h"
#include "Dio_interface.h"

void DIO_voidSetPinDirection(u8 Copy_u8Port ,u8 Copy_u8Pin ,u8 Copy_u8Direction){
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	27 97       	sbiw	r28, 0x07	; 7
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	6a 83       	std	Y+2, r22	; 0x02
    1422:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8Port < 4) && (Copy_u8Pin < 8)){
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	84 30       	cpi	r24, 0x04	; 4
    1428:	08 f0       	brcs	.+2      	; 0x142c <DIO_voidSetPinDirection+0x22>
    142a:	ee c0       	rjmp	.+476    	; 0x1608 <DIO_voidSetPinDirection+0x1fe>
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	88 30       	cpi	r24, 0x08	; 8
    1430:	08 f0       	brcs	.+2      	; 0x1434 <DIO_voidSetPinDirection+0x2a>
    1432:	ea c0       	rjmp	.+468    	; 0x1608 <DIO_voidSetPinDirection+0x1fe>
		if(Copy_u8Direction == OUTPUT){
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	09 f0       	breq	.+2      	; 0x143c <DIO_voidSetPinDirection+0x32>
    143a:	6f c0       	rjmp	.+222    	; 0x151a <DIO_voidSetPinDirection+0x110>
			switch(Copy_u8Port){
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	3f 83       	std	Y+7, r19	; 0x07
    1444:	2e 83       	std	Y+6, r18	; 0x06
    1446:	8e 81       	ldd	r24, Y+6	; 0x06
    1448:	9f 81       	ldd	r25, Y+7	; 0x07
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	91 05       	cpc	r25, r1
    144e:	49 f1       	breq	.+82     	; 0x14a2 <DIO_voidSetPinDirection+0x98>
    1450:	2e 81       	ldd	r18, Y+6	; 0x06
    1452:	3f 81       	ldd	r19, Y+7	; 0x07
    1454:	22 30       	cpi	r18, 0x02	; 2
    1456:	31 05       	cpc	r19, r1
    1458:	2c f4       	brge	.+10     	; 0x1464 <DIO_voidSetPinDirection+0x5a>
    145a:	8e 81       	ldd	r24, Y+6	; 0x06
    145c:	9f 81       	ldd	r25, Y+7	; 0x07
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	61 f0       	breq	.+24     	; 0x147a <DIO_voidSetPinDirection+0x70>
    1462:	d2 c0       	rjmp	.+420    	; 0x1608 <DIO_voidSetPinDirection+0x1fe>
    1464:	2e 81       	ldd	r18, Y+6	; 0x06
    1466:	3f 81       	ldd	r19, Y+7	; 0x07
    1468:	22 30       	cpi	r18, 0x02	; 2
    146a:	31 05       	cpc	r19, r1
    146c:	71 f1       	breq	.+92     	; 0x14ca <DIO_voidSetPinDirection+0xc0>
    146e:	8e 81       	ldd	r24, Y+6	; 0x06
    1470:	9f 81       	ldd	r25, Y+7	; 0x07
    1472:	83 30       	cpi	r24, 0x03	; 3
    1474:	91 05       	cpc	r25, r1
    1476:	e9 f1       	breq	.+122    	; 0x14f2 <DIO_voidSetPinDirection+0xe8>
    1478:	c7 c0       	rjmp	.+398    	; 0x1608 <DIO_voidSetPinDirection+0x1fe>
				case PORTA : SET_BIT(DDRA_REG,Copy_u8Pin);		break;
    147a:	aa e3       	ldi	r26, 0x3A	; 58
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	ea e3       	ldi	r30, 0x3A	; 58
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <DIO_voidSetPinDirection+0x8e>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <DIO_voidSetPinDirection+0x8a>
    149c:	84 2b       	or	r24, r20
    149e:	8c 93       	st	X, r24
    14a0:	b3 c0       	rjmp	.+358    	; 0x1608 <DIO_voidSetPinDirection+0x1fe>
				case PORTB : SET_BIT(DDRB_REG,Copy_u8Pin);		break;
    14a2:	a7 e3       	ldi	r26, 0x37	; 55
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e7 e3       	ldi	r30, 0x37	; 55
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <DIO_voidSetPinDirection+0xb6>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <DIO_voidSetPinDirection+0xb2>
    14c4:	84 2b       	or	r24, r20
    14c6:	8c 93       	st	X, r24
    14c8:	9f c0       	rjmp	.+318    	; 0x1608 <DIO_voidSetPinDirection+0x1fe>
				case PORTC : SET_BIT(DDRC_REG,Copy_u8Pin);		break;
    14ca:	a4 e3       	ldi	r26, 0x34	; 52
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e4 e3       	ldi	r30, 0x34	; 52
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	48 2f       	mov	r20, r24
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 2e       	mov	r0, r18
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <DIO_voidSetPinDirection+0xde>
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	0a 94       	dec	r0
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <DIO_voidSetPinDirection+0xda>
    14ec:	84 2b       	or	r24, r20
    14ee:	8c 93       	st	X, r24
    14f0:	8b c0       	rjmp	.+278    	; 0x1608 <DIO_voidSetPinDirection+0x1fe>
				case PORTD : SET_BIT(DDRD_REG,Copy_u8Pin);		break;
    14f2:	a1 e3       	ldi	r26, 0x31	; 49
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e1 e3       	ldi	r30, 0x31	; 49
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_voidSetPinDirection+0x106>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_voidSetPinDirection+0x102>
    1514:	84 2b       	or	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	77 c0       	rjmp	.+238    	; 0x1608 <DIO_voidSetPinDirection+0x1fe>
			}
			
		}
		else if(Copy_u8Direction == INPUT){
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	88 23       	and	r24, r24
    151e:	09 f0       	breq	.+2      	; 0x1522 <DIO_voidSetPinDirection+0x118>
    1520:	73 c0       	rjmp	.+230    	; 0x1608 <DIO_voidSetPinDirection+0x1fe>
			switch(Copy_u8Port){
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	3d 83       	std	Y+5, r19	; 0x05
    152a:	2c 83       	std	Y+4, r18	; 0x04
    152c:	8c 81       	ldd	r24, Y+4	; 0x04
    152e:	9d 81       	ldd	r25, Y+5	; 0x05
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	91 05       	cpc	r25, r1
    1534:	59 f1       	breq	.+86     	; 0x158c <DIO_voidSetPinDirection+0x182>
    1536:	2c 81       	ldd	r18, Y+4	; 0x04
    1538:	3d 81       	ldd	r19, Y+5	; 0x05
    153a:	22 30       	cpi	r18, 0x02	; 2
    153c:	31 05       	cpc	r19, r1
    153e:	2c f4       	brge	.+10     	; 0x154a <DIO_voidSetPinDirection+0x140>
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	9d 81       	ldd	r25, Y+5	; 0x05
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	69 f0       	breq	.+26     	; 0x1562 <DIO_voidSetPinDirection+0x158>
    1548:	5f c0       	rjmp	.+190    	; 0x1608 <DIO_voidSetPinDirection+0x1fe>
    154a:	2c 81       	ldd	r18, Y+4	; 0x04
    154c:	3d 81       	ldd	r19, Y+5	; 0x05
    154e:	22 30       	cpi	r18, 0x02	; 2
    1550:	31 05       	cpc	r19, r1
    1552:	89 f1       	breq	.+98     	; 0x15b6 <DIO_voidSetPinDirection+0x1ac>
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	9d 81       	ldd	r25, Y+5	; 0x05
    1558:	83 30       	cpi	r24, 0x03	; 3
    155a:	91 05       	cpc	r25, r1
    155c:	09 f4       	brne	.+2      	; 0x1560 <DIO_voidSetPinDirection+0x156>
    155e:	40 c0       	rjmp	.+128    	; 0x15e0 <DIO_voidSetPinDirection+0x1d6>
    1560:	53 c0       	rjmp	.+166    	; 0x1608 <DIO_voidSetPinDirection+0x1fe>
				case PORTA : CLR_BIT(DDRA_REG,Copy_u8Pin);		break;
    1562:	aa e3       	ldi	r26, 0x3A	; 58
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	ea e3       	ldi	r30, 0x3A	; 58
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <DIO_voidSetPinDirection+0x176>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <DIO_voidSetPinDirection+0x172>
    1584:	80 95       	com	r24
    1586:	84 23       	and	r24, r20
    1588:	8c 93       	st	X, r24
    158a:	3e c0       	rjmp	.+124    	; 0x1608 <DIO_voidSetPinDirection+0x1fe>
				case PORTB : CLR_BIT(DDRB_REG,Copy_u8Pin);		break;
    158c:	a7 e3       	ldi	r26, 0x37	; 55
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e7 e3       	ldi	r30, 0x37	; 55
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	48 2f       	mov	r20, r24
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 2e       	mov	r0, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <DIO_voidSetPinDirection+0x1a0>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	0a 94       	dec	r0
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <DIO_voidSetPinDirection+0x19c>
    15ae:	80 95       	com	r24
    15b0:	84 23       	and	r24, r20
    15b2:	8c 93       	st	X, r24
    15b4:	29 c0       	rjmp	.+82     	; 0x1608 <DIO_voidSetPinDirection+0x1fe>
				case PORTC : CLR_BIT(DDRC_REG,Copy_u8Pin);		break;
    15b6:	a4 e3       	ldi	r26, 0x34	; 52
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e4 e3       	ldi	r30, 0x34	; 52
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 2e       	mov	r0, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <DIO_voidSetPinDirection+0x1ca>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <DIO_voidSetPinDirection+0x1c6>
    15d8:	80 95       	com	r24
    15da:	84 23       	and	r24, r20
    15dc:	8c 93       	st	X, r24
    15de:	14 c0       	rjmp	.+40     	; 0x1608 <DIO_voidSetPinDirection+0x1fe>
				case PORTD : CLR_BIT(DDRD_REG,Copy_u8Pin);		break;
    15e0:	a1 e3       	ldi	r26, 0x31	; 49
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e1 e3       	ldi	r30, 0x31	; 49
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	48 2f       	mov	r20, r24
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 2e       	mov	r0, r18
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <DIO_voidSetPinDirection+0x1f4>
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	0a 94       	dec	r0
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <DIO_voidSetPinDirection+0x1f0>
    1602:	80 95       	com	r24
    1604:	84 23       	and	r24, r20
    1606:	8c 93       	st	X, r24
			}
			
		}
	}
}
    1608:	27 96       	adiw	r28, 0x07	; 7
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin ,u8 Copy_u8Value){
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	27 97       	sbiw	r28, 0x07	; 7
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	6a 83       	std	Y+2, r22	; 0x02
    1632:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8Port < 4) && (Copy_u8Pin < 8)){
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	84 30       	cpi	r24, 0x04	; 4
    1638:	08 f0       	brcs	.+2      	; 0x163c <DIO_voidSetPinValue+0x22>
    163a:	ee c0       	rjmp	.+476    	; 0x1818 <DIO_voidSetPinValue+0x1fe>
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	88 30       	cpi	r24, 0x08	; 8
    1640:	08 f0       	brcs	.+2      	; 0x1644 <DIO_voidSetPinValue+0x2a>
    1642:	ea c0       	rjmp	.+468    	; 0x1818 <DIO_voidSetPinValue+0x1fe>
		if(Copy_u8Value == HIGH){
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	09 f0       	breq	.+2      	; 0x164c <DIO_voidSetPinValue+0x32>
    164a:	6f c0       	rjmp	.+222    	; 0x172a <DIO_voidSetPinValue+0x110>
			switch(Copy_u8Port){
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	3f 83       	std	Y+7, r19	; 0x07
    1654:	2e 83       	std	Y+6, r18	; 0x06
    1656:	8e 81       	ldd	r24, Y+6	; 0x06
    1658:	9f 81       	ldd	r25, Y+7	; 0x07
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	91 05       	cpc	r25, r1
    165e:	49 f1       	breq	.+82     	; 0x16b2 <DIO_voidSetPinValue+0x98>
    1660:	2e 81       	ldd	r18, Y+6	; 0x06
    1662:	3f 81       	ldd	r19, Y+7	; 0x07
    1664:	22 30       	cpi	r18, 0x02	; 2
    1666:	31 05       	cpc	r19, r1
    1668:	2c f4       	brge	.+10     	; 0x1674 <DIO_voidSetPinValue+0x5a>
    166a:	8e 81       	ldd	r24, Y+6	; 0x06
    166c:	9f 81       	ldd	r25, Y+7	; 0x07
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	61 f0       	breq	.+24     	; 0x168a <DIO_voidSetPinValue+0x70>
    1672:	d2 c0       	rjmp	.+420    	; 0x1818 <DIO_voidSetPinValue+0x1fe>
    1674:	2e 81       	ldd	r18, Y+6	; 0x06
    1676:	3f 81       	ldd	r19, Y+7	; 0x07
    1678:	22 30       	cpi	r18, 0x02	; 2
    167a:	31 05       	cpc	r19, r1
    167c:	71 f1       	breq	.+92     	; 0x16da <DIO_voidSetPinValue+0xc0>
    167e:	8e 81       	ldd	r24, Y+6	; 0x06
    1680:	9f 81       	ldd	r25, Y+7	; 0x07
    1682:	83 30       	cpi	r24, 0x03	; 3
    1684:	91 05       	cpc	r25, r1
    1686:	e9 f1       	breq	.+122    	; 0x1702 <DIO_voidSetPinValue+0xe8>
    1688:	c7 c0       	rjmp	.+398    	; 0x1818 <DIO_voidSetPinValue+0x1fe>
				case PORTA : SET_BIT(PORTA_REG,Copy_u8Pin);		break;
    168a:	ab e3       	ldi	r26, 0x3B	; 59
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	eb e3       	ldi	r30, 0x3B	; 59
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	48 2f       	mov	r20, r24
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 2e       	mov	r0, r18
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <DIO_voidSetPinValue+0x8e>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	0a 94       	dec	r0
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <DIO_voidSetPinValue+0x8a>
    16ac:	84 2b       	or	r24, r20
    16ae:	8c 93       	st	X, r24
    16b0:	b3 c0       	rjmp	.+358    	; 0x1818 <DIO_voidSetPinValue+0x1fe>
				case PORTB : SET_BIT(PORTB_REG,Copy_u8Pin);		break;
    16b2:	a8 e3       	ldi	r26, 0x38	; 56
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e8 e3       	ldi	r30, 0x38	; 56
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	48 2f       	mov	r20, r24
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 2e       	mov	r0, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <DIO_voidSetPinValue+0xb6>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <DIO_voidSetPinValue+0xb2>
    16d4:	84 2b       	or	r24, r20
    16d6:	8c 93       	st	X, r24
    16d8:	9f c0       	rjmp	.+318    	; 0x1818 <DIO_voidSetPinValue+0x1fe>
				case PORTC : SET_BIT(PORTC_REG,Copy_u8Pin);		break;
    16da:	a5 e3       	ldi	r26, 0x35	; 53
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e5 e3       	ldi	r30, 0x35	; 53
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 2e       	mov	r0, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <DIO_voidSetPinValue+0xde>
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	0a 94       	dec	r0
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <DIO_voidSetPinValue+0xda>
    16fc:	84 2b       	or	r24, r20
    16fe:	8c 93       	st	X, r24
    1700:	8b c0       	rjmp	.+278    	; 0x1818 <DIO_voidSetPinValue+0x1fe>
				case PORTD : SET_BIT(PORTD_REG,Copy_u8Pin);		break;
    1702:	a2 e3       	ldi	r26, 0x32	; 50
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e2 e3       	ldi	r30, 0x32	; 50
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <DIO_voidSetPinValue+0x106>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <DIO_voidSetPinValue+0x102>
    1724:	84 2b       	or	r24, r20
    1726:	8c 93       	st	X, r24
    1728:	77 c0       	rjmp	.+238    	; 0x1818 <DIO_voidSetPinValue+0x1fe>
			}
			
		}
		else if(Copy_u8Value == LOW){
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	88 23       	and	r24, r24
    172e:	09 f0       	breq	.+2      	; 0x1732 <DIO_voidSetPinValue+0x118>
    1730:	73 c0       	rjmp	.+230    	; 0x1818 <DIO_voidSetPinValue+0x1fe>
			switch(Copy_u8Port){
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	3d 83       	std	Y+5, r19	; 0x05
    173a:	2c 83       	std	Y+4, r18	; 0x04
    173c:	8c 81       	ldd	r24, Y+4	; 0x04
    173e:	9d 81       	ldd	r25, Y+5	; 0x05
    1740:	81 30       	cpi	r24, 0x01	; 1
    1742:	91 05       	cpc	r25, r1
    1744:	59 f1       	breq	.+86     	; 0x179c <DIO_voidSetPinValue+0x182>
    1746:	2c 81       	ldd	r18, Y+4	; 0x04
    1748:	3d 81       	ldd	r19, Y+5	; 0x05
    174a:	22 30       	cpi	r18, 0x02	; 2
    174c:	31 05       	cpc	r19, r1
    174e:	2c f4       	brge	.+10     	; 0x175a <DIO_voidSetPinValue+0x140>
    1750:	8c 81       	ldd	r24, Y+4	; 0x04
    1752:	9d 81       	ldd	r25, Y+5	; 0x05
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	69 f0       	breq	.+26     	; 0x1772 <DIO_voidSetPinValue+0x158>
    1758:	5f c0       	rjmp	.+190    	; 0x1818 <DIO_voidSetPinValue+0x1fe>
    175a:	2c 81       	ldd	r18, Y+4	; 0x04
    175c:	3d 81       	ldd	r19, Y+5	; 0x05
    175e:	22 30       	cpi	r18, 0x02	; 2
    1760:	31 05       	cpc	r19, r1
    1762:	89 f1       	breq	.+98     	; 0x17c6 <DIO_voidSetPinValue+0x1ac>
    1764:	8c 81       	ldd	r24, Y+4	; 0x04
    1766:	9d 81       	ldd	r25, Y+5	; 0x05
    1768:	83 30       	cpi	r24, 0x03	; 3
    176a:	91 05       	cpc	r25, r1
    176c:	09 f4       	brne	.+2      	; 0x1770 <DIO_voidSetPinValue+0x156>
    176e:	40 c0       	rjmp	.+128    	; 0x17f0 <DIO_voidSetPinValue+0x1d6>
    1770:	53 c0       	rjmp	.+166    	; 0x1818 <DIO_voidSetPinValue+0x1fe>
				case PORTA : CLR_BIT(PORTA_REG,Copy_u8Pin);		break;
    1772:	ab e3       	ldi	r26, 0x3B	; 59
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	eb e3       	ldi	r30, 0x3B	; 59
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	48 2f       	mov	r20, r24
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 2e       	mov	r0, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <DIO_voidSetPinValue+0x176>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	0a 94       	dec	r0
    1792:	e2 f7       	brpl	.-8      	; 0x178c <DIO_voidSetPinValue+0x172>
    1794:	80 95       	com	r24
    1796:	84 23       	and	r24, r20
    1798:	8c 93       	st	X, r24
    179a:	3e c0       	rjmp	.+124    	; 0x1818 <DIO_voidSetPinValue+0x1fe>
				case PORTB : CLR_BIT(PORTB_REG,Copy_u8Pin);		break;
    179c:	a8 e3       	ldi	r26, 0x38	; 56
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e8 e3       	ldi	r30, 0x38	; 56
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	48 2f       	mov	r20, r24
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 2e       	mov	r0, r18
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <DIO_voidSetPinValue+0x1a0>
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	0a 94       	dec	r0
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <DIO_voidSetPinValue+0x19c>
    17be:	80 95       	com	r24
    17c0:	84 23       	and	r24, r20
    17c2:	8c 93       	st	X, r24
    17c4:	29 c0       	rjmp	.+82     	; 0x1818 <DIO_voidSetPinValue+0x1fe>
				case PORTC : CLR_BIT(PORTC_REG,Copy_u8Pin);		break;
    17c6:	a5 e3       	ldi	r26, 0x35	; 53
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e5 e3       	ldi	r30, 0x35	; 53
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	48 2f       	mov	r20, r24
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 2e       	mov	r0, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <DIO_voidSetPinValue+0x1ca>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	0a 94       	dec	r0
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <DIO_voidSetPinValue+0x1c6>
    17e8:	80 95       	com	r24
    17ea:	84 23       	and	r24, r20
    17ec:	8c 93       	st	X, r24
    17ee:	14 c0       	rjmp	.+40     	; 0x1818 <DIO_voidSetPinValue+0x1fe>
				case PORTD : CLR_BIT(PORTD_REG,Copy_u8Pin);		break;
    17f0:	a2 e3       	ldi	r26, 0x32	; 50
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e2 e3       	ldi	r30, 0x32	; 50
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	48 2f       	mov	r20, r24
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 2e       	mov	r0, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <DIO_voidSetPinValue+0x1f4>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	0a 94       	dec	r0
    1810:	e2 f7       	brpl	.-8      	; 0x180a <DIO_voidSetPinValue+0x1f0>
    1812:	80 95       	com	r24
    1814:	84 23       	and	r24, r20
    1816:	8c 93       	st	X, r24
			}
			
		}
	}
	
}
    1818:	27 96       	adiw	r28, 0x07	; 7
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin){
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <DIO_u8GetPinValue+0x6>
    1830:	00 d0       	rcall	.+0      	; 0x1832 <DIO_u8GetPinValue+0x8>
    1832:	0f 92       	push	r0
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	8a 83       	std	Y+2, r24	; 0x02
    183a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Value = 0xFF;
    183c:	8f ef       	ldi	r24, 0xFF	; 255
    183e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8Port < 4) && (Copy_u8Pin < 8)){
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	84 30       	cpi	r24, 0x04	; 4
    1844:	08 f0       	brcs	.+2      	; 0x1848 <DIO_u8GetPinValue+0x1e>
    1846:	6b c0       	rjmp	.+214    	; 0x191e <DIO_u8GetPinValue+0xf4>
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	88 30       	cpi	r24, 0x08	; 8
    184c:	08 f0       	brcs	.+2      	; 0x1850 <DIO_u8GetPinValue+0x26>
    184e:	67 c0       	rjmp	.+206    	; 0x191e <DIO_u8GetPinValue+0xf4>
			switch(Copy_u8Port){
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	3d 83       	std	Y+5, r19	; 0x05
    1858:	2c 83       	std	Y+4, r18	; 0x04
    185a:	4c 81       	ldd	r20, Y+4	; 0x04
    185c:	5d 81       	ldd	r21, Y+5	; 0x05
    185e:	41 30       	cpi	r20, 0x01	; 1
    1860:	51 05       	cpc	r21, r1
    1862:	41 f1       	breq	.+80     	; 0x18b4 <DIO_u8GetPinValue+0x8a>
    1864:	8c 81       	ldd	r24, Y+4	; 0x04
    1866:	9d 81       	ldd	r25, Y+5	; 0x05
    1868:	82 30       	cpi	r24, 0x02	; 2
    186a:	91 05       	cpc	r25, r1
    186c:	34 f4       	brge	.+12     	; 0x187a <DIO_u8GetPinValue+0x50>
    186e:	2c 81       	ldd	r18, Y+4	; 0x04
    1870:	3d 81       	ldd	r19, Y+5	; 0x05
    1872:	21 15       	cp	r18, r1
    1874:	31 05       	cpc	r19, r1
    1876:	61 f0       	breq	.+24     	; 0x1890 <DIO_u8GetPinValue+0x66>
    1878:	52 c0       	rjmp	.+164    	; 0x191e <DIO_u8GetPinValue+0xf4>
    187a:	4c 81       	ldd	r20, Y+4	; 0x04
    187c:	5d 81       	ldd	r21, Y+5	; 0x05
    187e:	42 30       	cpi	r20, 0x02	; 2
    1880:	51 05       	cpc	r21, r1
    1882:	51 f1       	breq	.+84     	; 0x18d8 <DIO_u8GetPinValue+0xae>
    1884:	8c 81       	ldd	r24, Y+4	; 0x04
    1886:	9d 81       	ldd	r25, Y+5	; 0x05
    1888:	83 30       	cpi	r24, 0x03	; 3
    188a:	91 05       	cpc	r25, r1
    188c:	b9 f1       	breq	.+110    	; 0x18fc <DIO_u8GetPinValue+0xd2>
    188e:	47 c0       	rjmp	.+142    	; 0x191e <DIO_u8GetPinValue+0xf4>
				case PORTA : Local_u8Value = GET_BIT(PINA_REG,Copy_u8Pin);		break;
    1890:	e9 e3       	ldi	r30, 0x39	; 57
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	88 2f       	mov	r24, r24
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	a9 01       	movw	r20, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <DIO_u8GetPinValue+0x7e>
    18a4:	55 95       	asr	r21
    18a6:	47 95       	ror	r20
    18a8:	8a 95       	dec	r24
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <DIO_u8GetPinValue+0x7a>
    18ac:	ca 01       	movw	r24, r20
    18ae:	81 70       	andi	r24, 0x01	; 1
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	35 c0       	rjmp	.+106    	; 0x191e <DIO_u8GetPinValue+0xf4>
				case PORTB : Local_u8Value = GET_BIT(PINB_REG,Copy_u8Pin);		break;
    18b4:	e6 e3       	ldi	r30, 0x36	; 54
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	88 2f       	mov	r24, r24
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	a9 01       	movw	r20, r18
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <DIO_u8GetPinValue+0xa2>
    18c8:	55 95       	asr	r21
    18ca:	47 95       	ror	r20
    18cc:	8a 95       	dec	r24
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <DIO_u8GetPinValue+0x9e>
    18d0:	ca 01       	movw	r24, r20
    18d2:	81 70       	andi	r24, 0x01	; 1
    18d4:	89 83       	std	Y+1, r24	; 0x01
    18d6:	23 c0       	rjmp	.+70     	; 0x191e <DIO_u8GetPinValue+0xf4>
				case PORTC : Local_u8Value = GET_BIT(PINC_REG,Copy_u8Pin);		break;
    18d8:	e3 e3       	ldi	r30, 0x33	; 51
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	88 2f       	mov	r24, r24
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a9 01       	movw	r20, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <DIO_u8GetPinValue+0xc6>
    18ec:	55 95       	asr	r21
    18ee:	47 95       	ror	r20
    18f0:	8a 95       	dec	r24
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <DIO_u8GetPinValue+0xc2>
    18f4:	ca 01       	movw	r24, r20
    18f6:	81 70       	andi	r24, 0x01	; 1
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	11 c0       	rjmp	.+34     	; 0x191e <DIO_u8GetPinValue+0xf4>
				case PORTD : Local_u8Value = GET_BIT(PIND_REG,Copy_u8Pin);		break;
    18fc:	e0 e3       	ldi	r30, 0x30	; 48
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	a9 01       	movw	r20, r18
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <DIO_u8GetPinValue+0xea>
    1910:	55 95       	asr	r21
    1912:	47 95       	ror	r20
    1914:	8a 95       	dec	r24
    1916:	e2 f7       	brpl	.-8      	; 0x1910 <DIO_u8GetPinValue+0xe6>
    1918:	ca 01       	movw	r24, r20
    191a:	81 70       	andi	r24, 0x01	; 1
    191c:	89 83       	std	Y+1, r24	; 0x01
			}
	}
	return Local_u8Value;
    191e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8Port ,u8 Copy_u8Direction){
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	00 d0       	rcall	.+0      	; 0x1936 <DIO_voidSetPortDirection+0x6>
    1936:	00 d0       	rcall	.+0      	; 0x1938 <DIO_voidSetPortDirection+0x8>
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	89 83       	std	Y+1, r24	; 0x01
    193e:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8Port < 4 ){
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	84 30       	cpi	r24, 0x04	; 4
    1944:	90 f5       	brcc	.+100    	; 0x19aa <DIO_voidSetPortDirection+0x7a>
		switch(Copy_u8Port){
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	3c 83       	std	Y+4, r19	; 0x04
    194e:	2b 83       	std	Y+3, r18	; 0x03
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	91 05       	cpc	r25, r1
    1958:	d1 f0       	breq	.+52     	; 0x198e <DIO_voidSetPortDirection+0x5e>
    195a:	2b 81       	ldd	r18, Y+3	; 0x03
    195c:	3c 81       	ldd	r19, Y+4	; 0x04
    195e:	22 30       	cpi	r18, 0x02	; 2
    1960:	31 05       	cpc	r19, r1
    1962:	2c f4       	brge	.+10     	; 0x196e <DIO_voidSetPortDirection+0x3e>
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	61 f0       	breq	.+24     	; 0x1984 <DIO_voidSetPortDirection+0x54>
    196c:	1e c0       	rjmp	.+60     	; 0x19aa <DIO_voidSetPortDirection+0x7a>
    196e:	2b 81       	ldd	r18, Y+3	; 0x03
    1970:	3c 81       	ldd	r19, Y+4	; 0x04
    1972:	22 30       	cpi	r18, 0x02	; 2
    1974:	31 05       	cpc	r19, r1
    1976:	81 f0       	breq	.+32     	; 0x1998 <DIO_voidSetPortDirection+0x68>
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	9c 81       	ldd	r25, Y+4	; 0x04
    197c:	83 30       	cpi	r24, 0x03	; 3
    197e:	91 05       	cpc	r25, r1
    1980:	81 f0       	breq	.+32     	; 0x19a2 <DIO_voidSetPortDirection+0x72>
    1982:	13 c0       	rjmp	.+38     	; 0x19aa <DIO_voidSetPortDirection+0x7a>
			case PORTA : DDRA_REG = Copy_u8Direction;		break;
    1984:	ea e3       	ldi	r30, 0x3A	; 58
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	80 83       	st	Z, r24
    198c:	0e c0       	rjmp	.+28     	; 0x19aa <DIO_voidSetPortDirection+0x7a>
			case PORTB : DDRB_REG = Copy_u8Direction;		break;
    198e:	e7 e3       	ldi	r30, 0x37	; 55
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	80 83       	st	Z, r24
    1996:	09 c0       	rjmp	.+18     	; 0x19aa <DIO_voidSetPortDirection+0x7a>
			case PORTC : DDRC_REG = Copy_u8Direction;		break;
    1998:	e4 e3       	ldi	r30, 0x34	; 52
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	80 83       	st	Z, r24
    19a0:	04 c0       	rjmp	.+8      	; 0x19aa <DIO_voidSetPortDirection+0x7a>
			case PORTD : DDRD_REG = Copy_u8Direction;		break;
    19a2:	e1 e3       	ldi	r30, 0x31	; 49
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	80 83       	st	Z, r24
		}
	}
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8Port ,u8 Copy_u8Value){
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <DIO_voidSetPortValue+0x6>
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <DIO_voidSetPortValue+0x8>
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8Port < 4 ){
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	84 30       	cpi	r24, 0x04	; 4
    19cc:	90 f5       	brcc	.+100    	; 0x1a32 <DIO_voidSetPortValue+0x7a>
		switch(Copy_u8Port){
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	3c 83       	std	Y+4, r19	; 0x04
    19d6:	2b 83       	std	Y+3, r18	; 0x03
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	9c 81       	ldd	r25, Y+4	; 0x04
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	91 05       	cpc	r25, r1
    19e0:	d1 f0       	breq	.+52     	; 0x1a16 <DIO_voidSetPortValue+0x5e>
    19e2:	2b 81       	ldd	r18, Y+3	; 0x03
    19e4:	3c 81       	ldd	r19, Y+4	; 0x04
    19e6:	22 30       	cpi	r18, 0x02	; 2
    19e8:	31 05       	cpc	r19, r1
    19ea:	2c f4       	brge	.+10     	; 0x19f6 <DIO_voidSetPortValue+0x3e>
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	61 f0       	breq	.+24     	; 0x1a0c <DIO_voidSetPortValue+0x54>
    19f4:	1e c0       	rjmp	.+60     	; 0x1a32 <DIO_voidSetPortValue+0x7a>
    19f6:	2b 81       	ldd	r18, Y+3	; 0x03
    19f8:	3c 81       	ldd	r19, Y+4	; 0x04
    19fa:	22 30       	cpi	r18, 0x02	; 2
    19fc:	31 05       	cpc	r19, r1
    19fe:	81 f0       	breq	.+32     	; 0x1a20 <DIO_voidSetPortValue+0x68>
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	83 30       	cpi	r24, 0x03	; 3
    1a06:	91 05       	cpc	r25, r1
    1a08:	81 f0       	breq	.+32     	; 0x1a2a <DIO_voidSetPortValue+0x72>
    1a0a:	13 c0       	rjmp	.+38     	; 0x1a32 <DIO_voidSetPortValue+0x7a>
			case PORTA : PORTA_REG = Copy_u8Value;		break;
    1a0c:	eb e3       	ldi	r30, 0x3B	; 59
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	80 83       	st	Z, r24
    1a14:	0e c0       	rjmp	.+28     	; 0x1a32 <DIO_voidSetPortValue+0x7a>
			case PORTB : PORTB_REG = Copy_u8Value;		break;
    1a16:	e8 e3       	ldi	r30, 0x38	; 56
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	80 83       	st	Z, r24
    1a1e:	09 c0       	rjmp	.+18     	; 0x1a32 <DIO_voidSetPortValue+0x7a>
			case PORTC : PORTC_REG = Copy_u8Value;		break;
    1a20:	e5 e3       	ldi	r30, 0x35	; 53
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	80 83       	st	Z, r24
    1a28:	04 c0       	rjmp	.+8      	; 0x1a32 <DIO_voidSetPortValue+0x7a>
			case PORTD : PORTD_REG = Copy_u8Value;		break;
    1a2a:	e2 e3       	ldi	r30, 0x32	; 50
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	80 83       	st	Z, r24
		}
	}
}
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port){
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <DIO_u8GetPortValue+0x6>
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <DIO_u8GetPortValue+0x8>
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Value = 0xFF;
    1a4e:	8f ef       	ldi	r24, 0xFF	; 255
    1a50:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Port < 4){
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	84 30       	cpi	r24, 0x04	; 4
    1a56:	90 f5       	brcc	.+100    	; 0x1abc <DIO_u8GetPortValue+0x7c>
			switch(Copy_u8Port){
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	3c 83       	std	Y+4, r19	; 0x04
    1a60:	2b 83       	std	Y+3, r18	; 0x03
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	9c 81       	ldd	r25, Y+4	; 0x04
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	91 05       	cpc	r25, r1
    1a6a:	d1 f0       	breq	.+52     	; 0x1aa0 <DIO_u8GetPortValue+0x60>
    1a6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a70:	22 30       	cpi	r18, 0x02	; 2
    1a72:	31 05       	cpc	r19, r1
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <DIO_u8GetPortValue+0x40>
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	61 f0       	breq	.+24     	; 0x1a96 <DIO_u8GetPortValue+0x56>
    1a7e:	1e c0       	rjmp	.+60     	; 0x1abc <DIO_u8GetPortValue+0x7c>
    1a80:	2b 81       	ldd	r18, Y+3	; 0x03
    1a82:	3c 81       	ldd	r19, Y+4	; 0x04
    1a84:	22 30       	cpi	r18, 0x02	; 2
    1a86:	31 05       	cpc	r19, r1
    1a88:	81 f0       	breq	.+32     	; 0x1aaa <DIO_u8GetPortValue+0x6a>
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	83 30       	cpi	r24, 0x03	; 3
    1a90:	91 05       	cpc	r25, r1
    1a92:	81 f0       	breq	.+32     	; 0x1ab4 <DIO_u8GetPortValue+0x74>
    1a94:	13 c0       	rjmp	.+38     	; 0x1abc <DIO_u8GetPortValue+0x7c>
				case PORTA : Local_u8Value = PINA_REG;		break;
    1a96:	e9 e3       	ldi	r30, 0x39	; 57
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    1a9e:	0e c0       	rjmp	.+28     	; 0x1abc <DIO_u8GetPortValue+0x7c>
				case PORTB : Local_u8Value = PINB_REG;		break;
    1aa0:	e6 e3       	ldi	r30, 0x36	; 54
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	09 c0       	rjmp	.+18     	; 0x1abc <DIO_u8GetPortValue+0x7c>
				case PORTC : Local_u8Value = PINC_REG;		break;
    1aaa:	e3 e3       	ldi	r30, 0x33	; 51
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	04 c0       	rjmp	.+8      	; 0x1abc <DIO_u8GetPortValue+0x7c>
				case PORTD : Local_u8Value = PIND_REG;		break;
    1ab4:	e0 e3       	ldi	r30, 0x30	; 48
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	89 83       	std	Y+1, r24	; 0x01
			}
	}
	return Local_u8Value;
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <EXTI0_voidInitialization>:
void (*(EXTI0_PfCallBack))(void) = NULL;  //Global Variable Pointer To Function Follow Interrupt 0
void (*(EXTI1_PfCallBack))(void) = NULL;  //Global Variable Pointer To Function Follow Interrupt 1
void (*(EXTI2_PfCallBack))(void) = NULL;  //Global Variable Pointer To Function Follow Interrupt 2

/************************************************* INTERRUPT 0 ************************************************************/
void EXTI0_voidInitialization(void){
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
	#if 	EXTI0_SENSE_MODE == EXTI_LOW_LEVEL
		CLR_BIT(MCUCR ,ISC00);
		CLR_BIT(MCUCR ,ISC01);
	#elif 	EXTI0_SENSE_MODE == EXTI_IOC
		SET_BIT(MCUCR ,ISC00);
    1ad4:	a5 e5       	ldi	r26, 0x55	; 85
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e5 e5       	ldi	r30, 0x55	; 85
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	81 60       	ori	r24, 0x01	; 1
    1ae0:	8c 93       	st	X, r24
		CLR_BIT(MCUCR ,ISC01);
    1ae2:	a5 e5       	ldi	r26, 0x55	; 85
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e5 e5       	ldi	r30, 0x55	; 85
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	8d 7f       	andi	r24, 0xFD	; 253
    1aee:	8c 93       	st	X, r24
		SET_BIT(MCUCR ,ISC00);
		SET_BIT(MCUCR ,ISC01);
	#else
		#error 	"Wrong Choice of External interrupt 0 Sense Mode!"
	#endif
	CLR_BIT(GICR ,INT0); 	//Disable Interrupt 0
    1af0:	ab e5       	ldi	r26, 0x5B	; 91
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	eb e5       	ldi	r30, 0x5B	; 91
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	8f 7b       	andi	r24, 0xBF	; 191
    1afc:	8c 93       	st	X, r24
	SET_BIT(GIFR ,INTF0); 	//Clear External interrupt 0 Flag
    1afe:	aa e5       	ldi	r26, 0x5A	; 90
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	ea e5       	ldi	r30, 0x5A	; 90
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	80 64       	ori	r24, 0x40	; 64
    1b0a:	8c 93       	st	X, r24
}
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <EXTI0_voidEnable>:

void EXTI0_voidEnable(void){
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR ,INT0); 	//Enable Interrupt 0
    1b1a:	ab e5       	ldi	r26, 0x5B	; 91
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	eb e5       	ldi	r30, 0x5B	; 91
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	80 64       	ori	r24, 0x40	; 64
    1b26:	8c 93       	st	X, r24
}
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <EXTI0_voidDisable>:
void EXTI0_voidDisable(void){
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR ,INT0); 	//Disable Interrupt 0
    1b36:	ab e5       	ldi	r26, 0x5B	; 91
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	eb e5       	ldi	r30, 0x5B	; 91
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	8f 7b       	andi	r24, 0xBF	; 191
    1b42:	8c 93       	st	X, r24
}
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <EXTIO_voidSetCallBack>:

void EXTIO_voidSetCallBack(void (*pf)(void)) { /* pf = EXTI0_Func */
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <EXTIO_voidSetCallBack+0x6>
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	9a 83       	std	Y+2, r25	; 0x02
    1b56:	89 83       	std	Y+1, r24	; 0x01
	EXTI0_PfCallBack = pf;
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5c:	90 93 99 03 	sts	0x0399, r25
    1b60:	80 93 98 03 	sts	0x0398, r24
}
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <__vector_1>:
/* takeCare : This Prototype To convince the compiler that it is being called by the processor and make him use it and doesn't ignore it */
void __vector_1 (void) __attribute__((signal ,used));

/*This Function Called Only By Processor (hardware)*/
/* ISR Function For External Interrupt 0*/
void __vector_1(void){
    1b6e:	1f 92       	push	r1
    1b70:	0f 92       	push	r0
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	0f 92       	push	r0
    1b76:	11 24       	eor	r1, r1
    1b78:	2f 93       	push	r18
    1b7a:	3f 93       	push	r19
    1b7c:	4f 93       	push	r20
    1b7e:	5f 93       	push	r21
    1b80:	6f 93       	push	r22
    1b82:	7f 93       	push	r23
    1b84:	8f 93       	push	r24
    1b86:	9f 93       	push	r25
    1b88:	af 93       	push	r26
    1b8a:	bf 93       	push	r27
    1b8c:	ef 93       	push	r30
    1b8e:	ff 93       	push	r31
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
	EXTI0_PfCallBack();		/* => EXTI0_Func(); */
    1b98:	e0 91 98 03 	lds	r30, 0x0398
    1b9c:	f0 91 99 03 	lds	r31, 0x0399
    1ba0:	09 95       	icall
}
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	ff 91       	pop	r31
    1ba8:	ef 91       	pop	r30
    1baa:	bf 91       	pop	r27
    1bac:	af 91       	pop	r26
    1bae:	9f 91       	pop	r25
    1bb0:	8f 91       	pop	r24
    1bb2:	7f 91       	pop	r23
    1bb4:	6f 91       	pop	r22
    1bb6:	5f 91       	pop	r21
    1bb8:	4f 91       	pop	r20
    1bba:	3f 91       	pop	r19
    1bbc:	2f 91       	pop	r18
    1bbe:	0f 90       	pop	r0
    1bc0:	0f be       	out	0x3f, r0	; 63
    1bc2:	0f 90       	pop	r0
    1bc4:	1f 90       	pop	r1
    1bc6:	18 95       	reti

00001bc8 <EXTI1_voidInitialization>:

/************************************************* INTERRUPT 1 ************************************************************/

void EXTI1_voidInitialization(void){
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
	#if 	EXTI1_SENSE_MODE == EXTI_LOW_LEVEL
		CLR_BIT(MCUCR ,ISC10);
		CLR_BIT(MCUCR ,ISC11);
	#elif 	EXTI1_SENSE_MODE == EXTI_IOC
		SET_BIT(MCUCR ,ISC10);
    1bd0:	a5 e5       	ldi	r26, 0x55	; 85
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	e5 e5       	ldi	r30, 0x55	; 85
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	84 60       	ori	r24, 0x04	; 4
    1bdc:	8c 93       	st	X, r24
		CLR_BIT(MCUCR ,ISC11);
    1bde:	a5 e5       	ldi	r26, 0x55	; 85
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e5 e5       	ldi	r30, 0x55	; 85
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	87 7f       	andi	r24, 0xF7	; 247
    1bea:	8c 93       	st	X, r24
		SET_BIT(MCUCR ,ISC11);
	#else
		#error 	"Wrong Choice of External interrupt 1 Sense Mode!"
	#endif

	CLR_BIT(GICR ,INT1); 	//Disable Interrupt 1
    1bec:	ab e5       	ldi	r26, 0x5B	; 91
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	eb e5       	ldi	r30, 0x5B	; 91
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	8f 77       	andi	r24, 0x7F	; 127
    1bf8:	8c 93       	st	X, r24
	SET_BIT(GIFR ,INTF1); 	//Clear External interrupt 1 Flag
    1bfa:	aa e5       	ldi	r26, 0x5A	; 90
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	ea e5       	ldi	r30, 0x5A	; 90
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	80 68       	ori	r24, 0x80	; 128
    1c06:	8c 93       	st	X, r24
}
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <EXTI1_voidEnable>:

void EXTI1_voidEnable(void){
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR ,INT1); 	//Enable Interrupt 1
    1c16:	ab e5       	ldi	r26, 0x5B	; 91
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	eb e5       	ldi	r30, 0x5B	; 91
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	80 68       	ori	r24, 0x80	; 128
    1c22:	8c 93       	st	X, r24
}
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <EXTI1_voidDisable>:

void EXTI1_voidDisable(void){
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR ,INT1); 	//Disable Interrupt 1
    1c32:	ab e5       	ldi	r26, 0x5B	; 91
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	eb e5       	ldi	r30, 0x5B	; 91
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	8f 77       	andi	r24, 0x7F	; 127
    1c3e:	8c 93       	st	X, r24
}
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <EXTI1_voidSetCallBack>:

void EXTI1_voidSetCallBack(void (*pf)(void)){
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <EXTI1_voidSetCallBack+0x6>
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	9a 83       	std	Y+2, r25	; 0x02
    1c52:	89 83       	std	Y+1, r24	; 0x01
	EXTI1_PfCallBack = pf;
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	9a 81       	ldd	r25, Y+2	; 0x02
    1c58:	90 93 9b 03 	sts	0x039B, r25
    1c5c:	80 93 9a 03 	sts	0x039A, r24
}
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <__vector_2>:

void __vector_2 (void) __attribute__((signal ,used));

void __vector_2(void){
    1c6a:	1f 92       	push	r1
    1c6c:	0f 92       	push	r0
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	0f 92       	push	r0
    1c72:	11 24       	eor	r1, r1
    1c74:	2f 93       	push	r18
    1c76:	3f 93       	push	r19
    1c78:	4f 93       	push	r20
    1c7a:	5f 93       	push	r21
    1c7c:	6f 93       	push	r22
    1c7e:	7f 93       	push	r23
    1c80:	8f 93       	push	r24
    1c82:	9f 93       	push	r25
    1c84:	af 93       	push	r26
    1c86:	bf 93       	push	r27
    1c88:	ef 93       	push	r30
    1c8a:	ff 93       	push	r31
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
	EXTI1_PfCallBack();		/* => EXTI1_Func(); */
    1c94:	e0 91 9a 03 	lds	r30, 0x039A
    1c98:	f0 91 9b 03 	lds	r31, 0x039B
    1c9c:	09 95       	icall
}
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	ff 91       	pop	r31
    1ca4:	ef 91       	pop	r30
    1ca6:	bf 91       	pop	r27
    1ca8:	af 91       	pop	r26
    1caa:	9f 91       	pop	r25
    1cac:	8f 91       	pop	r24
    1cae:	7f 91       	pop	r23
    1cb0:	6f 91       	pop	r22
    1cb2:	5f 91       	pop	r21
    1cb4:	4f 91       	pop	r20
    1cb6:	3f 91       	pop	r19
    1cb8:	2f 91       	pop	r18
    1cba:	0f 90       	pop	r0
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	0f 90       	pop	r0
    1cc0:	1f 90       	pop	r1
    1cc2:	18 95       	reti

00001cc4 <EXTI2_voidInitialization>:


/************************************************* INTERRUPT 2 ************************************************************/
void EXTI2_voidInitialization(void){
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
	#if 	EXTI2_SENSE_MODE == EXTI_FALLING
		CLR_BIT(MCUCSR ,ISC2);
    1ccc:	a4 e5       	ldi	r26, 0x54	; 84
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e4 e5       	ldi	r30, 0x54	; 84
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	8f 7b       	andi	r24, 0xBF	; 191
    1cd8:	8c 93       	st	X, r24
		SET_BIT(MCUCSR ,ISC2);
	#else
		#error 	"Wrong Choice of External interrupt 2 Sense Mode!"
	#endif

	CLR_BIT(GICR ,INT2); 	//Disable Interrupt 2
    1cda:	ab e5       	ldi	r26, 0x5B	; 91
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	eb e5       	ldi	r30, 0x5B	; 91
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	8f 7d       	andi	r24, 0xDF	; 223
    1ce6:	8c 93       	st	X, r24
	SET_BIT(GIFR ,INTF2); 	//Clear External interrupt 2 Flag
    1ce8:	aa e5       	ldi	r26, 0x5A	; 90
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	ea e5       	ldi	r30, 0x5A	; 90
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	80 62       	ori	r24, 0x20	; 32
    1cf4:	8c 93       	st	X, r24
}
    1cf6:	cf 91       	pop	r28
    1cf8:	df 91       	pop	r29
    1cfa:	08 95       	ret

00001cfc <EXTI2_voidEnable>:

void EXTI2_voidEnable(void){
    1cfc:	df 93       	push	r29
    1cfe:	cf 93       	push	r28
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR ,INT2); 	//Enable Interrupt 2
    1d04:	ab e5       	ldi	r26, 0x5B	; 91
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	eb e5       	ldi	r30, 0x5B	; 91
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	80 62       	ori	r24, 0x20	; 32
    1d10:	8c 93       	st	X, r24
}
    1d12:	cf 91       	pop	r28
    1d14:	df 91       	pop	r29
    1d16:	08 95       	ret

00001d18 <EXTI2_voidDisable>:

void EXTI2_voidDisable(void){
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR ,INT2); 	//Disable Interrupt 2
    1d20:	ab e5       	ldi	r26, 0x5B	; 91
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	eb e5       	ldi	r30, 0x5B	; 91
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	8f 7d       	andi	r24, 0xDF	; 223
    1d2c:	8c 93       	st	X, r24
}
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <EXTI2_voidSetCallBack>:

void EXTI2_voidSetCallBack(void (*pf)(void)){
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <EXTI2_voidSetCallBack+0x6>
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	9a 83       	std	Y+2, r25	; 0x02
    1d40:	89 83       	std	Y+1, r24	; 0x01
	EXTI2_PfCallBack = pf;
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	9a 81       	ldd	r25, Y+2	; 0x02
    1d46:	90 93 9d 03 	sts	0x039D, r25
    1d4a:	80 93 9c 03 	sts	0x039C, r24
}
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <__vector_3>:

void __vector_3 (void) __attribute__((signal ,used));

void __vector_3(void){
    1d58:	1f 92       	push	r1
    1d5a:	0f 92       	push	r0
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	0f 92       	push	r0
    1d60:	11 24       	eor	r1, r1
    1d62:	2f 93       	push	r18
    1d64:	3f 93       	push	r19
    1d66:	4f 93       	push	r20
    1d68:	5f 93       	push	r21
    1d6a:	6f 93       	push	r22
    1d6c:	7f 93       	push	r23
    1d6e:	8f 93       	push	r24
    1d70:	9f 93       	push	r25
    1d72:	af 93       	push	r26
    1d74:	bf 93       	push	r27
    1d76:	ef 93       	push	r30
    1d78:	ff 93       	push	r31
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
	EXTI2_PfCallBack();		/* => EXTI2_Func(); */
    1d82:	e0 91 9c 03 	lds	r30, 0x039C
    1d86:	f0 91 9d 03 	lds	r31, 0x039D
    1d8a:	09 95       	icall
}
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	ff 91       	pop	r31
    1d92:	ef 91       	pop	r30
    1d94:	bf 91       	pop	r27
    1d96:	af 91       	pop	r26
    1d98:	9f 91       	pop	r25
    1d9a:	8f 91       	pop	r24
    1d9c:	7f 91       	pop	r23
    1d9e:	6f 91       	pop	r22
    1da0:	5f 91       	pop	r21
    1da2:	4f 91       	pop	r20
    1da4:	3f 91       	pop	r19
    1da6:	2f 91       	pop	r18
    1da8:	0f 90       	pop	r0
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	0f 90       	pop	r0
    1dae:	1f 90       	pop	r1
    1db0:	18 95       	reti

00001db2 <GIE_voidEnable>:
#include "BIT_MATH.h"
#include "GIE_private.h"
#include "GIE_interface.h"
#include "GIE_config.h"

void GIE_voidEnable(void){
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG ,SREF1); 	//Enable Global Interrupt
    1dba:	af e5       	ldi	r26, 0x5F	; 95
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	ef e5       	ldi	r30, 0x5F	; 95
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	80 68       	ori	r24, 0x80	; 128
    1dc6:	8c 93       	st	X, r24
}
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <GIE_voidDisable>:

void GIE_voidDisable(void){
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG ,SREF1); 	//Disable Global Interrupt
    1dd6:	af e5       	ldi	r26, 0x5F	; 95
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	ef e5       	ldi	r30, 0x5F	; 95
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	8f 77       	andi	r24, 0x7F	; 127
    1de2:	8c 93       	st	X, r24
}
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <KPD_voidInitialization>:
#include "KEYPAD_config.h"

// cols -> output
// rows -> input

void KPD_voidInitialization(void){
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
	/* DIRECTIONS OF COLUMNS PORT */
	DIO_voidSetPinDirection(KEYPAD_COLSPORT, KEYPAD_COL1, OUTPUT);
    1df2:	83 e0       	ldi	r24, 0x03	; 3
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	41 e0       	ldi	r20, 0x01	; 1
    1df8:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_COLSPORT, KEYPAD_COL2, OUTPUT);
    1dfc:	83 e0       	ldi	r24, 0x03	; 3
    1dfe:	61 e0       	ldi	r22, 0x01	; 1
    1e00:	41 e0       	ldi	r20, 0x01	; 1
    1e02:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_COLSPORT, KEYPAD_COL3, OUTPUT);
    1e06:	83 e0       	ldi	r24, 0x03	; 3
    1e08:	66 e0       	ldi	r22, 0x06	; 6
    1e0a:	41 e0       	ldi	r20, 0x01	; 1
    1e0c:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>
	//DIO_voidSetPinDirection(KEYPAD_COLSPORT, KEYPAD_COL4, OUTPUT);

	/* DIRECTIONS OF ROWS PORT */
	DIO_voidSetPinDirection(KEYPAD_ROWSPORT, KEYPAD_ROW1, INPUT);
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	64 e0       	ldi	r22, 0x04	; 4
    1e14:	40 e0       	ldi	r20, 0x00	; 0
    1e16:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_ROWSPORT, KEYPAD_ROW2, INPUT);
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	65 e0       	ldi	r22, 0x05	; 5
    1e1e:	40 e0       	ldi	r20, 0x00	; 0
    1e20:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_ROWSPORT, KEYPAD_ROW3, INPUT);
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	66 e0       	ldi	r22, 0x06	; 6
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_ROWSPORT, KEYPAD_ROW4, INPUT);
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	67 e0       	ldi	r22, 0x07	; 7
    1e32:	40 e0       	ldi	r20, 0x00	; 0
    1e34:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>

	/* PIN VALUES OF COLUMNS PORT */
	DIO_voidSetPinValue(KEYPAD_COLSPORT, KEYPAD_COL1, HIGH);
    1e38:	83 e0       	ldi	r24, 0x03	; 3
    1e3a:	60 e0       	ldi	r22, 0x00	; 0
    1e3c:	41 e0       	ldi	r20, 0x01	; 1
    1e3e:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_COLSPORT, KEYPAD_COL2, HIGH);
    1e42:	83 e0       	ldi	r24, 0x03	; 3
    1e44:	61 e0       	ldi	r22, 0x01	; 1
    1e46:	41 e0       	ldi	r20, 0x01	; 1
    1e48:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_COLSPORT, KEYPAD_COL3, HIGH);
    1e4c:	83 e0       	ldi	r24, 0x03	; 3
    1e4e:	66 e0       	ldi	r22, 0x06	; 6
    1e50:	41 e0       	ldi	r20, 0x01	; 1
    1e52:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
	//DIO_voidSetPinValue(KEYPAD_COLSPORT, KEYPAD_COL4, HIGH);

	/* PIN VALUES OF ROWS PORT */
	DIO_voidSetPinValue(KEYPAD_ROWSPORT, KEYPAD_ROW1, HIGH);
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	64 e0       	ldi	r22, 0x04	; 4
    1e5a:	41 e0       	ldi	r20, 0x01	; 1
    1e5c:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_ROWSPORT, KEYPAD_ROW2, HIGH);
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	65 e0       	ldi	r22, 0x05	; 5
    1e64:	41 e0       	ldi	r20, 0x01	; 1
    1e66:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_ROWSPORT, KEYPAD_ROW3, HIGH);
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	66 e0       	ldi	r22, 0x06	; 6
    1e6e:	41 e0       	ldi	r20, 0x01	; 1
    1e70:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_ROWSPORT, KEYPAD_ROW4, HIGH);
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	67 e0       	ldi	r22, 0x07	; 7
    1e78:	41 e0       	ldi	r20, 0x01	; 1
    1e7a:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
}
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <KPD_u8GETPressedKey>:

u8 KPD_u8GETPressedKey(void){
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <KPD_u8GETPressedKey+0x6>
    1e8a:	0f 92       	push	r0
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
	/* INITIAL VALUE FOR PRESSED KEY */
	u8 Local_u8PressedKey = KEYPAD_NoPressedKey;
    1e90:	8f ef       	ldi	r24, 0xFF	; 255
    1e92:	8b 83       	std	Y+3, r24	; 0x03
	static u8 Local_u8KeypadColArr[KEYPAD_ColSize] = {KEYPAD_COL1 ,KEYPAD_COL2 ,KEYPAD_COL3};
	
	/* KEYPAD ROW ARRAY */
	static u8 Local_u8KeypadRowArr[KEYPAD_RowSize] = {KEYPAD_ROW1 ,KEYPAD_ROW2 ,KEYPAD_ROW3 ,KEYPAD_ROW4};
	
	for(Local_u8ColCounter = 0 ;Local_u8ColCounter < KEYPAD_ColSize ;Local_u8ColCounter++){
    1e94:	1a 82       	std	Y+2, r1	; 0x02
    1e96:	4f c0       	rjmp	.+158    	; 0x1f36 <KPD_u8GETPressedKey+0xb2>
		
		/* ACTIVE CURRENT COLUMN */
		DIO_voidSetPinValue(KEYPAD_COLSPORT ,Local_u8KeypadColArr[Local_u8ColCounter] ,LOW);
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	88 2f       	mov	r24, r24
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	e3 59       	subi	r30, 0x93	; 147
    1ea2:	fc 4f       	sbci	r31, 0xFC	; 252
    1ea4:	90 81       	ld	r25, Z
    1ea6:	83 e0       	ldi	r24, 0x03	; 3
    1ea8:	69 2f       	mov	r22, r25
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
		
		/* READ CURRENT ROW */
		for(Local_u8RowCounter = 0 ;Local_u8RowCounter < KEYPAD_RowSize ;Local_u8RowCounter++){
    1eb0:	19 82       	std	Y+1, r1	; 0x01
    1eb2:	2f c0       	rjmp	.+94     	; 0x1f12 <KPD_u8GETPressedKey+0x8e>
			/* CHECK IF KEY IS PRESSED */
			if((DIO_u8GetPinValue(KEYPAD_ROWSPORT, Local_u8KeypadRowArr[Local_u8RowCounter])) == 0){
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	88 2f       	mov	r24, r24
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	fc 01       	movw	r30, r24
    1ebc:	e7 59       	subi	r30, 0x97	; 151
    1ebe:	fc 4f       	sbci	r31, 0xFC	; 252
    1ec0:	90 81       	ld	r25, Z
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	69 2f       	mov	r22, r25
    1ec6:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8GetPinValue>
    1eca:	88 23       	and	r24, r24
    1ecc:	f9 f4       	brne	.+62     	; 0x1f0c <KPD_u8GETPressedKey+0x88>
				while((DIO_u8GetPinValue(KEYPAD_ROWSPORT, Local_u8KeypadRowArr[Local_u8RowCounter])) == 0);
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	88 2f       	mov	r24, r24
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	e7 59       	subi	r30, 0x97	; 151
    1ed8:	fc 4f       	sbci	r31, 0xFC	; 252
    1eda:	90 81       	ld	r25, Z
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	69 2f       	mov	r22, r25
    1ee0:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8GetPinValue>
    1ee4:	88 23       	and	r24, r24
    1ee6:	99 f3       	breq	.-26     	; 0x1ece <KPD_u8GETPressedKey+0x4a>
				Local_u8PressedKey = Local_u8KeypadArr[Local_u8RowCounter][Local_u8ColCounter];
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	48 2f       	mov	r20, r24
    1ef2:	50 e0       	ldi	r21, 0x00	; 0
    1ef4:	c9 01       	movw	r24, r18
    1ef6:	88 0f       	add	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	82 0f       	add	r24, r18
    1efc:	93 1f       	adc	r25, r19
    1efe:	84 0f       	add	r24, r20
    1f00:	95 1f       	adc	r25, r21
    1f02:	fc 01       	movw	r30, r24
    1f04:	e0 59       	subi	r30, 0x90	; 144
    1f06:	fc 4f       	sbci	r31, 0xFC	; 252
    1f08:	80 81       	ld	r24, Z
    1f0a:	8b 83       	std	Y+3, r24	; 0x03
		
		/* ACTIVE CURRENT COLUMN */
		DIO_voidSetPinValue(KEYPAD_COLSPORT ,Local_u8KeypadColArr[Local_u8ColCounter] ,LOW);
		
		/* READ CURRENT ROW */
		for(Local_u8RowCounter = 0 ;Local_u8RowCounter < KEYPAD_RowSize ;Local_u8RowCounter++){
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	8f 5f       	subi	r24, 0xFF	; 255
    1f10:	89 83       	std	Y+1, r24	; 0x01
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	84 30       	cpi	r24, 0x04	; 4
    1f16:	70 f2       	brcs	.-100    	; 0x1eb4 <KPD_u8GETPressedKey+0x30>
				while((DIO_u8GetPinValue(KEYPAD_ROWSPORT, Local_u8KeypadRowArr[Local_u8RowCounter])) == 0);
				Local_u8PressedKey = Local_u8KeypadArr[Local_u8RowCounter][Local_u8ColCounter];
			}
		}
		/* DEACTIVE CURRENT COLUMN */
		DIO_voidSetPinValue(KEYPAD_COLSPORT ,Local_u8KeypadColArr[Local_u8ColCounter], HIGH);
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	88 2f       	mov	r24, r24
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	fc 01       	movw	r30, r24
    1f20:	e3 59       	subi	r30, 0x93	; 147
    1f22:	fc 4f       	sbci	r31, 0xFC	; 252
    1f24:	90 81       	ld	r25, Z
    1f26:	83 e0       	ldi	r24, 0x03	; 3
    1f28:	69 2f       	mov	r22, r25
    1f2a:	41 e0       	ldi	r20, 0x01	; 1
    1f2c:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
	static u8 Local_u8KeypadColArr[KEYPAD_ColSize] = {KEYPAD_COL1 ,KEYPAD_COL2 ,KEYPAD_COL3};
	
	/* KEYPAD ROW ARRAY */
	static u8 Local_u8KeypadRowArr[KEYPAD_RowSize] = {KEYPAD_ROW1 ,KEYPAD_ROW2 ,KEYPAD_ROW3 ,KEYPAD_ROW4};
	
	for(Local_u8ColCounter = 0 ;Local_u8ColCounter < KEYPAD_ColSize ;Local_u8ColCounter++){
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	8f 5f       	subi	r24, 0xFF	; 255
    1f34:	8a 83       	std	Y+2, r24	; 0x02
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	83 30       	cpi	r24, 0x03	; 3
    1f3a:	08 f4       	brcc	.+2      	; 0x1f3e <KPD_u8GETPressedKey+0xba>
    1f3c:	ad cf       	rjmp	.-166    	; 0x1e98 <KPD_u8GETPressedKey+0x14>
			}
		}
		/* DEACTIVE CURRENT COLUMN */
		DIO_voidSetPinValue(KEYPAD_COLSPORT ,Local_u8KeypadColArr[Local_u8ColCounter], HIGH);
	}
	return Local_u8PressedKey;
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <LCD_voidInitialization4>:
#include "LCD_interface.h"
#include "LCD_config.h"

static u8 cursor = 1;

void LCD_voidInitialization4(void){
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	2e 97       	sbiw	r28, 0x0e	; 14
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	a4 e3       	ldi	r26, 0x34	; 52
    1f66:	b2 e4       	ldi	r27, 0x42	; 66
    1f68:	8b 87       	std	Y+11, r24	; 0x0b
    1f6a:	9c 87       	std	Y+12, r25	; 0x0c
    1f6c:	ad 87       	std	Y+13, r26	; 0x0d
    1f6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	4a e7       	ldi	r20, 0x7A	; 122
    1f7e:	53 e4       	ldi	r21, 0x43	; 67
    1f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	8f 83       	std	Y+7, r24	; 0x07
    1f8a:	98 87       	std	Y+8, r25	; 0x08
    1f8c:	a9 87       	std	Y+9, r26	; 0x09
    1f8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f90:	6f 81       	ldd	r22, Y+7	; 0x07
    1f92:	78 85       	ldd	r23, Y+8	; 0x08
    1f94:	89 85       	ldd	r24, Y+9	; 0x09
    1f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e8       	ldi	r20, 0x80	; 128
    1f9e:	5f e3       	ldi	r21, 0x3F	; 63
    1fa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fa4:	88 23       	and	r24, r24
    1fa6:	2c f4       	brge	.+10     	; 0x1fb2 <LCD_voidInitialization4+0x66>
		__ticks = 1;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9e 83       	std	Y+6, r25	; 0x06
    1fae:	8d 83       	std	Y+5, r24	; 0x05
    1fb0:	3f c0       	rjmp	.+126    	; 0x2030 <LCD_voidInitialization4+0xe4>
	else if (__tmp > 65535)
    1fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb4:	78 85       	ldd	r23, Y+8	; 0x08
    1fb6:	89 85       	ldd	r24, Y+9	; 0x09
    1fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	3f ef       	ldi	r19, 0xFF	; 255
    1fbe:	4f e7       	ldi	r20, 0x7F	; 127
    1fc0:	57 e4       	ldi	r21, 0x47	; 71
    1fc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fc6:	18 16       	cp	r1, r24
    1fc8:	4c f5       	brge	.+82     	; 0x201c <LCD_voidInitialization4+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e2       	ldi	r20, 0x20	; 32
    1fd8:	51 e4       	ldi	r21, 0x41	; 65
    1fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	bc 01       	movw	r22, r24
    1fe4:	cd 01       	movw	r24, r26
    1fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	9e 83       	std	Y+6, r25	; 0x06
    1ff0:	8d 83       	std	Y+5, r24	; 0x05
    1ff2:	0f c0       	rjmp	.+30     	; 0x2012 <LCD_voidInitialization4+0xc6>
    1ff4:	89 e1       	ldi	r24, 0x19	; 25
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9c 83       	std	Y+4, r25	; 0x04
    1ffa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <LCD_voidInitialization4+0xb4>
    2004:	9c 83       	std	Y+4, r25	; 0x04
    2006:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2008:	8d 81       	ldd	r24, Y+5	; 0x05
    200a:	9e 81       	ldd	r25, Y+6	; 0x06
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	9e 83       	std	Y+6, r25	; 0x06
    2010:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2012:	8d 81       	ldd	r24, Y+5	; 0x05
    2014:	9e 81       	ldd	r25, Y+6	; 0x06
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	69 f7       	brne	.-38     	; 0x1ff4 <LCD_voidInitialization4+0xa8>
    201a:	14 c0       	rjmp	.+40     	; 0x2044 <LCD_voidInitialization4+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201c:	6f 81       	ldd	r22, Y+7	; 0x07
    201e:	78 85       	ldd	r23, Y+8	; 0x08
    2020:	89 85       	ldd	r24, Y+9	; 0x09
    2022:	9a 85       	ldd	r25, Y+10	; 0x0a
    2024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	9e 83       	std	Y+6, r25	; 0x06
    202e:	8d 83       	std	Y+5, r24	; 0x05
    2030:	8d 81       	ldd	r24, Y+5	; 0x05
    2032:	9e 81       	ldd	r25, Y+6	; 0x06
    2034:	9a 83       	std	Y+2, r25	; 0x02
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	9a 81       	ldd	r25, Y+2	; 0x02
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <LCD_voidInitialization4+0xf0>
    2040:	9a 83       	std	Y+2, r25	; 0x02
    2042:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(45); 				//Wait for more than 40 ms after VDD rises to 4.5 V
	LCD_voidSendCMD4(0x32);		//send for 4-bit initialization of LCD_Command
    2044:	82 e3       	ldi	r24, 0x32	; 50
    2046:	0e 94 65 12 	call	0x24ca	; 0x24ca <LCD_voidSendCMD4>
	LCD_voidSendCMD4(0x28);		//2-line 5x7 matrix in 4-bit mode
    204a:	88 e2       	ldi	r24, 0x28	; 40
    204c:	0e 94 65 12 	call	0x24ca	; 0x24ca <LCD_voidSendCMD4>
	LCD_voidSendCMD4(0x0c);		//Display on Cursor OFF
    2050:	8c e0       	ldi	r24, 0x0C	; 12
    2052:	0e 94 65 12 	call	0x24ca	; 0x24ca <LCD_voidSendCMD4>
	LCD_voidSendCMD4(0x06);		//Increment cursor (shift cursor to right)
    2056:	86 e0       	ldi	r24, 0x06	; 6
    2058:	0e 94 65 12 	call	0x24ca	; 0x24ca <LCD_voidSendCMD4>
	LCD_voidSendCMD4(0x01);		//clear display screen
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	0e 94 65 12 	call	0x24ca	; 0x24ca <LCD_voidSendCMD4>
}
    2062:	2e 96       	adiw	r28, 0x0e	; 14
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	de bf       	out	0x3e, r29	; 62
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	cd bf       	out	0x3d, r28	; 61
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	08 95       	ret

00002074 <LCD_voidWritecChar4>:

void LCD_voidWritecChar4 (u8 Data){
    2074:	df 93       	push	r29
    2076:	cf 93       	push	r28
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
    207c:	eb 97       	sbiw	r28, 0x3b	; 59
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	f8 94       	cli
    2082:	de bf       	out	0x3e, r29	; 62
    2084:	0f be       	out	0x3f, r0	; 63
    2086:	cd bf       	out	0x3d, r28	; 61
    2088:	8b af       	std	Y+59, r24	; 0x3b
	if(cursor == 17){
    208a:	80 91 7c 03 	lds	r24, 0x037C
    208e:	81 31       	cpi	r24, 0x11	; 17
    2090:	29 f4       	brne	.+10     	; 0x209c <LCD_voidWritecChar4+0x28>
		LCD_voidGOTOXY(1, 0);
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	60 e0       	ldi	r22, 0x00	; 0
    2096:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
    209a:	0b c0       	rjmp	.+22     	; 0x20b2 <LCD_voidWritecChar4+0x3e>
	}
	else if(cursor == 33){
    209c:	80 91 7c 03 	lds	r24, 0x037C
    20a0:	81 32       	cpi	r24, 0x21	; 33
    20a2:	39 f4       	brne	.+14     	; 0x20b2 <LCD_voidWritecChar4+0x3e>
		LCD_voidGOTOXY(0, 0);
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	60 e0       	ldi	r22, 0x00	; 0
    20a8:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
		cursor = 1;
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	80 93 7c 03 	sts	0x037C, r24
	}
	DIO_voidSetPinValue(CONTROL_PORT ,LCD_RS ,HIGH);
    20b2:	82 e0       	ldi	r24, 0x02	; 2
    20b4:	62 e0       	ldi	r22, 0x02	; 2
    20b6:	41 e0       	ldi	r20, 0x01	; 1
    20b8:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CONTROL_PORT ,LCD_EN ,HIGH);
    20bc:	82 e0       	ldi	r24, 0x02	; 2
    20be:	63 e0       	ldi	r22, 0x03	; 3
    20c0:	41 e0       	ldi	r20, 0x01	; 1
    20c2:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
	u8 Dummy0 = 0b00001100;
    20c6:	8c e0       	ldi	r24, 0x0C	; 12
    20c8:	8a af       	std	Y+58, r24	; 0x3a
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	a0 ea       	ldi	r26, 0xA0	; 160
    20d0:	b0 e4       	ldi	r27, 0x40	; 64
    20d2:	8d ab       	std	Y+53, r24	; 0x35
    20d4:	9e ab       	std	Y+54, r25	; 0x36
    20d6:	af ab       	std	Y+55, r26	; 0x37
    20d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20da:	6d a9       	ldd	r22, Y+53	; 0x35
    20dc:	7e a9       	ldd	r23, Y+54	; 0x36
    20de:	8f a9       	ldd	r24, Y+55	; 0x37
    20e0:	98 ad       	ldd	r25, Y+56	; 0x38
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	4a e7       	ldi	r20, 0x7A	; 122
    20e8:	53 e4       	ldi	r21, 0x43	; 67
    20ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	89 ab       	std	Y+49, r24	; 0x31
    20f4:	9a ab       	std	Y+50, r25	; 0x32
    20f6:	ab ab       	std	Y+51, r26	; 0x33
    20f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20fa:	69 a9       	ldd	r22, Y+49	; 0x31
    20fc:	7a a9       	ldd	r23, Y+50	; 0x32
    20fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2100:	9c a9       	ldd	r25, Y+52	; 0x34
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e8       	ldi	r20, 0x80	; 128
    2108:	5f e3       	ldi	r21, 0x3F	; 63
    210a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    210e:	88 23       	and	r24, r24
    2110:	2c f4       	brge	.+10     	; 0x211c <LCD_voidWritecChar4+0xa8>
		__ticks = 1;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	98 ab       	std	Y+48, r25	; 0x30
    2118:	8f a7       	std	Y+47, r24	; 0x2f
    211a:	3f c0       	rjmp	.+126    	; 0x219a <LCD_voidWritecChar4+0x126>
	else if (__tmp > 65535)
    211c:	69 a9       	ldd	r22, Y+49	; 0x31
    211e:	7a a9       	ldd	r23, Y+50	; 0x32
    2120:	8b a9       	ldd	r24, Y+51	; 0x33
    2122:	9c a9       	ldd	r25, Y+52	; 0x34
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	3f ef       	ldi	r19, 0xFF	; 255
    2128:	4f e7       	ldi	r20, 0x7F	; 127
    212a:	57 e4       	ldi	r21, 0x47	; 71
    212c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2130:	18 16       	cp	r1, r24
    2132:	4c f5       	brge	.+82     	; 0x2186 <LCD_voidWritecChar4+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2134:	6d a9       	ldd	r22, Y+53	; 0x35
    2136:	7e a9       	ldd	r23, Y+54	; 0x36
    2138:	8f a9       	ldd	r24, Y+55	; 0x37
    213a:	98 ad       	ldd	r25, Y+56	; 0x38
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e2       	ldi	r20, 0x20	; 32
    2142:	51 e4       	ldi	r21, 0x41	; 65
    2144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	bc 01       	movw	r22, r24
    214e:	cd 01       	movw	r24, r26
    2150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	98 ab       	std	Y+48, r25	; 0x30
    215a:	8f a7       	std	Y+47, r24	; 0x2f
    215c:	0f c0       	rjmp	.+30     	; 0x217c <LCD_voidWritecChar4+0x108>
    215e:	89 e1       	ldi	r24, 0x19	; 25
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	9e a7       	std	Y+46, r25	; 0x2e
    2164:	8d a7       	std	Y+45, r24	; 0x2d
    2166:	8d a5       	ldd	r24, Y+45	; 0x2d
    2168:	9e a5       	ldd	r25, Y+46	; 0x2e
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <LCD_voidWritecChar4+0xf6>
    216e:	9e a7       	std	Y+46, r25	; 0x2e
    2170:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2172:	8f a5       	ldd	r24, Y+47	; 0x2f
    2174:	98 a9       	ldd	r25, Y+48	; 0x30
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	98 ab       	std	Y+48, r25	; 0x30
    217a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217c:	8f a5       	ldd	r24, Y+47	; 0x2f
    217e:	98 a9       	ldd	r25, Y+48	; 0x30
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	69 f7       	brne	.-38     	; 0x215e <LCD_voidWritecChar4+0xea>
    2184:	14 c0       	rjmp	.+40     	; 0x21ae <LCD_voidWritecChar4+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2186:	69 a9       	ldd	r22, Y+49	; 0x31
    2188:	7a a9       	ldd	r23, Y+50	; 0x32
    218a:	8b a9       	ldd	r24, Y+51	; 0x33
    218c:	9c a9       	ldd	r25, Y+52	; 0x34
    218e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	98 ab       	std	Y+48, r25	; 0x30
    2198:	8f a7       	std	Y+47, r24	; 0x2f
    219a:	8f a5       	ldd	r24, Y+47	; 0x2f
    219c:	98 a9       	ldd	r25, Y+48	; 0x30
    219e:	9c a7       	std	Y+44, r25	; 0x2c
    21a0:	8b a7       	std	Y+43, r24	; 0x2b
    21a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    21a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <LCD_voidWritecChar4+0x132>
    21aa:	9c a7       	std	Y+44, r25	; 0x2c
    21ac:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);

	u8 Dummy = (Data & 0xf0) | Dummy0;
    21ae:	8b ad       	ldd	r24, Y+59	; 0x3b
    21b0:	98 2f       	mov	r25, r24
    21b2:	90 7f       	andi	r25, 0xF0	; 240
    21b4:	8a ad       	ldd	r24, Y+58	; 0x3a
    21b6:	89 2b       	or	r24, r25
    21b8:	89 af       	std	Y+57, r24	; 0x39
	DIO_voidSetPortValue(DATA_PORT ,Dummy);
    21ba:	82 e0       	ldi	r24, 0x02	; 2
    21bc:	69 ad       	ldd	r22, Y+57	; 0x39
    21be:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(CONTROL_PORT ,LCD_EN ,LOW);
    21c2:	82 e0       	ldi	r24, 0x02	; 2
    21c4:	63 e0       	ldi	r22, 0x03	; 3
    21c6:	40 e0       	ldi	r20, 0x00	; 0
    21c8:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	a0 ea       	ldi	r26, 0xA0	; 160
    21d2:	b0 e4       	ldi	r27, 0x40	; 64
    21d4:	8f a3       	std	Y+39, r24	; 0x27
    21d6:	98 a7       	std	Y+40, r25	; 0x28
    21d8:	a9 a7       	std	Y+41, r26	; 0x29
    21da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21dc:	6f a1       	ldd	r22, Y+39	; 0x27
    21de:	78 a5       	ldd	r23, Y+40	; 0x28
    21e0:	89 a5       	ldd	r24, Y+41	; 0x29
    21e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	4a e7       	ldi	r20, 0x7A	; 122
    21ea:	53 e4       	ldi	r21, 0x43	; 67
    21ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	8b a3       	std	Y+35, r24	; 0x23
    21f6:	9c a3       	std	Y+36, r25	; 0x24
    21f8:	ad a3       	std	Y+37, r26	; 0x25
    21fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21fc:	6b a1       	ldd	r22, Y+35	; 0x23
    21fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2200:	8d a1       	ldd	r24, Y+37	; 0x25
    2202:	9e a1       	ldd	r25, Y+38	; 0x26
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e8       	ldi	r20, 0x80	; 128
    220a:	5f e3       	ldi	r21, 0x3F	; 63
    220c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2210:	88 23       	and	r24, r24
    2212:	2c f4       	brge	.+10     	; 0x221e <LCD_voidWritecChar4+0x1aa>
		__ticks = 1;
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	9a a3       	std	Y+34, r25	; 0x22
    221a:	89 a3       	std	Y+33, r24	; 0x21
    221c:	3f c0       	rjmp	.+126    	; 0x229c <LCD_voidWritecChar4+0x228>
	else if (__tmp > 65535)
    221e:	6b a1       	ldd	r22, Y+35	; 0x23
    2220:	7c a1       	ldd	r23, Y+36	; 0x24
    2222:	8d a1       	ldd	r24, Y+37	; 0x25
    2224:	9e a1       	ldd	r25, Y+38	; 0x26
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	3f ef       	ldi	r19, 0xFF	; 255
    222a:	4f e7       	ldi	r20, 0x7F	; 127
    222c:	57 e4       	ldi	r21, 0x47	; 71
    222e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2232:	18 16       	cp	r1, r24
    2234:	4c f5       	brge	.+82     	; 0x2288 <LCD_voidWritecChar4+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2236:	6f a1       	ldd	r22, Y+39	; 0x27
    2238:	78 a5       	ldd	r23, Y+40	; 0x28
    223a:	89 a5       	ldd	r24, Y+41	; 0x29
    223c:	9a a5       	ldd	r25, Y+42	; 0x2a
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e2       	ldi	r20, 0x20	; 32
    2244:	51 e4       	ldi	r21, 0x41	; 65
    2246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	bc 01       	movw	r22, r24
    2250:	cd 01       	movw	r24, r26
    2252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	9a a3       	std	Y+34, r25	; 0x22
    225c:	89 a3       	std	Y+33, r24	; 0x21
    225e:	0f c0       	rjmp	.+30     	; 0x227e <LCD_voidWritecChar4+0x20a>
    2260:	89 e1       	ldi	r24, 0x19	; 25
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	98 a3       	std	Y+32, r25	; 0x20
    2266:	8f 8f       	std	Y+31, r24	; 0x1f
    2268:	8f 8d       	ldd	r24, Y+31	; 0x1f
    226a:	98 a1       	ldd	r25, Y+32	; 0x20
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <LCD_voidWritecChar4+0x1f8>
    2270:	98 a3       	std	Y+32, r25	; 0x20
    2272:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2274:	89 a1       	ldd	r24, Y+33	; 0x21
    2276:	9a a1       	ldd	r25, Y+34	; 0x22
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	9a a3       	std	Y+34, r25	; 0x22
    227c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227e:	89 a1       	ldd	r24, Y+33	; 0x21
    2280:	9a a1       	ldd	r25, Y+34	; 0x22
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	69 f7       	brne	.-38     	; 0x2260 <LCD_voidWritecChar4+0x1ec>
    2286:	14 c0       	rjmp	.+40     	; 0x22b0 <LCD_voidWritecChar4+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2288:	6b a1       	ldd	r22, Y+35	; 0x23
    228a:	7c a1       	ldd	r23, Y+36	; 0x24
    228c:	8d a1       	ldd	r24, Y+37	; 0x25
    228e:	9e a1       	ldd	r25, Y+38	; 0x26
    2290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	9a a3       	std	Y+34, r25	; 0x22
    229a:	89 a3       	std	Y+33, r24	; 0x21
    229c:	89 a1       	ldd	r24, Y+33	; 0x21
    229e:	9a a1       	ldd	r25, Y+34	; 0x22
    22a0:	9e 8f       	std	Y+30, r25	; 0x1e
    22a2:	8d 8f       	std	Y+29, r24	; 0x1d
    22a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <LCD_voidWritecChar4+0x234>
    22ac:	9e 8f       	std	Y+30, r25	; 0x1e
    22ae:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	DIO_voidSetPinValue(CONTROL_PORT ,LCD_EN ,HIGH);
    22b0:	82 e0       	ldi	r24, 0x02	; 2
    22b2:	63 e0       	ldi	r22, 0x03	; 3
    22b4:	41 e0       	ldi	r20, 0x01	; 1
    22b6:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	a0 ea       	ldi	r26, 0xA0	; 160
    22c0:	b0 e4       	ldi	r27, 0x40	; 64
    22c2:	89 8f       	std	Y+25, r24	; 0x19
    22c4:	9a 8f       	std	Y+26, r25	; 0x1a
    22c6:	ab 8f       	std	Y+27, r26	; 0x1b
    22c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ca:	69 8d       	ldd	r22, Y+25	; 0x19
    22cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	4a e7       	ldi	r20, 0x7A	; 122
    22d8:	53 e4       	ldi	r21, 0x43	; 67
    22da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	8d 8b       	std	Y+21, r24	; 0x15
    22e4:	9e 8b       	std	Y+22, r25	; 0x16
    22e6:	af 8b       	std	Y+23, r26	; 0x17
    22e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22ea:	6d 89       	ldd	r22, Y+21	; 0x15
    22ec:	7e 89       	ldd	r23, Y+22	; 0x16
    22ee:	8f 89       	ldd	r24, Y+23	; 0x17
    22f0:	98 8d       	ldd	r25, Y+24	; 0x18
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e8       	ldi	r20, 0x80	; 128
    22f8:	5f e3       	ldi	r21, 0x3F	; 63
    22fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22fe:	88 23       	and	r24, r24
    2300:	2c f4       	brge	.+10     	; 0x230c <LCD_voidWritecChar4+0x298>
		__ticks = 1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9c 8b       	std	Y+20, r25	; 0x14
    2308:	8b 8b       	std	Y+19, r24	; 0x13
    230a:	3f c0       	rjmp	.+126    	; 0x238a <LCD_voidWritecChar4+0x316>
	else if (__tmp > 65535)
    230c:	6d 89       	ldd	r22, Y+21	; 0x15
    230e:	7e 89       	ldd	r23, Y+22	; 0x16
    2310:	8f 89       	ldd	r24, Y+23	; 0x17
    2312:	98 8d       	ldd	r25, Y+24	; 0x18
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	3f ef       	ldi	r19, 0xFF	; 255
    2318:	4f e7       	ldi	r20, 0x7F	; 127
    231a:	57 e4       	ldi	r21, 0x47	; 71
    231c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2320:	18 16       	cp	r1, r24
    2322:	4c f5       	brge	.+82     	; 0x2376 <LCD_voidWritecChar4+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2324:	69 8d       	ldd	r22, Y+25	; 0x19
    2326:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2328:	8b 8d       	ldd	r24, Y+27	; 0x1b
    232a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e2       	ldi	r20, 0x20	; 32
    2332:	51 e4       	ldi	r21, 0x41	; 65
    2334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	bc 01       	movw	r22, r24
    233e:	cd 01       	movw	r24, r26
    2340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9c 8b       	std	Y+20, r25	; 0x14
    234a:	8b 8b       	std	Y+19, r24	; 0x13
    234c:	0f c0       	rjmp	.+30     	; 0x236c <LCD_voidWritecChar4+0x2f8>
    234e:	89 e1       	ldi	r24, 0x19	; 25
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9a 8b       	std	Y+18, r25	; 0x12
    2354:	89 8b       	std	Y+17, r24	; 0x11
    2356:	89 89       	ldd	r24, Y+17	; 0x11
    2358:	9a 89       	ldd	r25, Y+18	; 0x12
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <LCD_voidWritecChar4+0x2e6>
    235e:	9a 8b       	std	Y+18, r25	; 0x12
    2360:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2362:	8b 89       	ldd	r24, Y+19	; 0x13
    2364:	9c 89       	ldd	r25, Y+20	; 0x14
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	9c 8b       	std	Y+20, r25	; 0x14
    236a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236c:	8b 89       	ldd	r24, Y+19	; 0x13
    236e:	9c 89       	ldd	r25, Y+20	; 0x14
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	69 f7       	brne	.-38     	; 0x234e <LCD_voidWritecChar4+0x2da>
    2374:	14 c0       	rjmp	.+40     	; 0x239e <LCD_voidWritecChar4+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2376:	6d 89       	ldd	r22, Y+21	; 0x15
    2378:	7e 89       	ldd	r23, Y+22	; 0x16
    237a:	8f 89       	ldd	r24, Y+23	; 0x17
    237c:	98 8d       	ldd	r25, Y+24	; 0x18
    237e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	9c 8b       	std	Y+20, r25	; 0x14
    2388:	8b 8b       	std	Y+19, r24	; 0x13
    238a:	8b 89       	ldd	r24, Y+19	; 0x13
    238c:	9c 89       	ldd	r25, Y+20	; 0x14
    238e:	98 8b       	std	Y+16, r25	; 0x10
    2390:	8f 87       	std	Y+15, r24	; 0x0f
    2392:	8f 85       	ldd	r24, Y+15	; 0x0f
    2394:	98 89       	ldd	r25, Y+16	; 0x10
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <LCD_voidWritecChar4+0x322>
    239a:	98 8b       	std	Y+16, r25	; 0x10
    239c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);

	Dummy = ((Data & 0x0f) << 4) | Dummy0;
    239e:	8b ad       	ldd	r24, Y+59	; 0x3b
    23a0:	88 2f       	mov	r24, r24
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	82 95       	swap	r24
    23a6:	92 95       	swap	r25
    23a8:	90 7f       	andi	r25, 0xF0	; 240
    23aa:	98 27       	eor	r25, r24
    23ac:	80 7f       	andi	r24, 0xF0	; 240
    23ae:	98 27       	eor	r25, r24
    23b0:	98 2f       	mov	r25, r24
    23b2:	8a ad       	ldd	r24, Y+58	; 0x3a
    23b4:	89 2b       	or	r24, r25
    23b6:	89 af       	std	Y+57, r24	; 0x39
	DIO_voidSetPortValue(DATA_PORT ,Dummy);
    23b8:	82 e0       	ldi	r24, 0x02	; 2
    23ba:	69 ad       	ldd	r22, Y+57	; 0x39
    23bc:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(CONTROL_PORT ,LCD_EN ,LOW);
    23c0:	82 e0       	ldi	r24, 0x02	; 2
    23c2:	63 e0       	ldi	r22, 0x03	; 3
    23c4:	40 e0       	ldi	r20, 0x00	; 0
    23c6:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	a0 ea       	ldi	r26, 0xA0	; 160
    23d0:	b0 e4       	ldi	r27, 0x40	; 64
    23d2:	8b 87       	std	Y+11, r24	; 0x0b
    23d4:	9c 87       	std	Y+12, r25	; 0x0c
    23d6:	ad 87       	std	Y+13, r26	; 0x0d
    23d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23da:	6b 85       	ldd	r22, Y+11	; 0x0b
    23dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23de:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	4a e7       	ldi	r20, 0x7A	; 122
    23e8:	53 e4       	ldi	r21, 0x43	; 67
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	8f 83       	std	Y+7, r24	; 0x07
    23f4:	98 87       	std	Y+8, r25	; 0x08
    23f6:	a9 87       	std	Y+9, r26	; 0x09
    23f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23fa:	6f 81       	ldd	r22, Y+7	; 0x07
    23fc:	78 85       	ldd	r23, Y+8	; 0x08
    23fe:	89 85       	ldd	r24, Y+9	; 0x09
    2400:	9a 85       	ldd	r25, Y+10	; 0x0a
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5f e3       	ldi	r21, 0x3F	; 63
    240a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    240e:	88 23       	and	r24, r24
    2410:	2c f4       	brge	.+10     	; 0x241c <LCD_voidWritecChar4+0x3a8>
		__ticks = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9e 83       	std	Y+6, r25	; 0x06
    2418:	8d 83       	std	Y+5, r24	; 0x05
    241a:	3f c0       	rjmp	.+126    	; 0x249a <LCD_voidWritecChar4+0x426>
	else if (__tmp > 65535)
    241c:	6f 81       	ldd	r22, Y+7	; 0x07
    241e:	78 85       	ldd	r23, Y+8	; 0x08
    2420:	89 85       	ldd	r24, Y+9	; 0x09
    2422:	9a 85       	ldd	r25, Y+10	; 0x0a
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	3f ef       	ldi	r19, 0xFF	; 255
    2428:	4f e7       	ldi	r20, 0x7F	; 127
    242a:	57 e4       	ldi	r21, 0x47	; 71
    242c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2430:	18 16       	cp	r1, r24
    2432:	4c f5       	brge	.+82     	; 0x2486 <LCD_voidWritecChar4+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2434:	6b 85       	ldd	r22, Y+11	; 0x0b
    2436:	7c 85       	ldd	r23, Y+12	; 0x0c
    2438:	8d 85       	ldd	r24, Y+13	; 0x0d
    243a:	9e 85       	ldd	r25, Y+14	; 0x0e
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e2       	ldi	r20, 0x20	; 32
    2442:	51 e4       	ldi	r21, 0x41	; 65
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9e 83       	std	Y+6, r25	; 0x06
    245a:	8d 83       	std	Y+5, r24	; 0x05
    245c:	0f c0       	rjmp	.+30     	; 0x247c <LCD_voidWritecChar4+0x408>
    245e:	89 e1       	ldi	r24, 0x19	; 25
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9c 83       	std	Y+4, r25	; 0x04
    2464:	8b 83       	std	Y+3, r24	; 0x03
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	9c 81       	ldd	r25, Y+4	; 0x04
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <LCD_voidWritecChar4+0x3f6>
    246e:	9c 83       	std	Y+4, r25	; 0x04
    2470:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2472:	8d 81       	ldd	r24, Y+5	; 0x05
    2474:	9e 81       	ldd	r25, Y+6	; 0x06
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	9e 83       	std	Y+6, r25	; 0x06
    247a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247c:	8d 81       	ldd	r24, Y+5	; 0x05
    247e:	9e 81       	ldd	r25, Y+6	; 0x06
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	69 f7       	brne	.-38     	; 0x245e <LCD_voidWritecChar4+0x3ea>
    2484:	14 c0       	rjmp	.+40     	; 0x24ae <LCD_voidWritecChar4+0x43a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2486:	6f 81       	ldd	r22, Y+7	; 0x07
    2488:	78 85       	ldd	r23, Y+8	; 0x08
    248a:	89 85       	ldd	r24, Y+9	; 0x09
    248c:	9a 85       	ldd	r25, Y+10	; 0x0a
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9e 83       	std	Y+6, r25	; 0x06
    2498:	8d 83       	std	Y+5, r24	; 0x05
    249a:	8d 81       	ldd	r24, Y+5	; 0x05
    249c:	9e 81       	ldd	r25, Y+6	; 0x06
    249e:	9a 83       	std	Y+2, r25	; 0x02
    24a0:	89 83       	std	Y+1, r24	; 0x01
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	9a 81       	ldd	r25, Y+2	; 0x02
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <LCD_voidWritecChar4+0x432>
    24aa:	9a 83       	std	Y+2, r25	; 0x02
    24ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cursor++;
    24ae:	80 91 7c 03 	lds	r24, 0x037C
    24b2:	8f 5f       	subi	r24, 0xFF	; 255
    24b4:	80 93 7c 03 	sts	0x037C, r24
}
    24b8:	eb 96       	adiw	r28, 0x3b	; 59
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	f8 94       	cli
    24be:	de bf       	out	0x3e, r29	; 62
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	cd bf       	out	0x3d, r28	; 61
    24c4:	cf 91       	pop	r28
    24c6:	df 91       	pop	r29
    24c8:	08 95       	ret

000024ca <LCD_voidSendCMD4>:

void LCD_voidSendCMD4(u8 CMD){
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	eb 97       	sbiw	r28, 0x3b	; 59
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	de bf       	out	0x3e, r29	; 62
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	cd bf       	out	0x3d, r28	; 61
    24de:	8b af       	std	Y+59, r24	; 0x3b
	DIO_voidSetPinValue(CONTROL_PORT ,LCD_RS ,LOW);
    24e0:	82 e0       	ldi	r24, 0x02	; 2
    24e2:	62 e0       	ldi	r22, 0x02	; 2
    24e4:	40 e0       	ldi	r20, 0x00	; 0
    24e6:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CONTROL_PORT ,LCD_EN ,HIGH);
    24ea:	82 e0       	ldi	r24, 0x02	; 2
    24ec:	63 e0       	ldi	r22, 0x03	; 3
    24ee:	41 e0       	ldi	r20, 0x01	; 1
    24f0:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
	u8 Dummy0 = 0b00001000;
    24f4:	88 e0       	ldi	r24, 0x08	; 8
    24f6:	8a af       	std	Y+58, r24	; 0x3a
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	a0 ea       	ldi	r26, 0xA0	; 160
    24fe:	b0 e4       	ldi	r27, 0x40	; 64
    2500:	8d ab       	std	Y+53, r24	; 0x35
    2502:	9e ab       	std	Y+54, r25	; 0x36
    2504:	af ab       	std	Y+55, r26	; 0x37
    2506:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2508:	6d a9       	ldd	r22, Y+53	; 0x35
    250a:	7e a9       	ldd	r23, Y+54	; 0x36
    250c:	8f a9       	ldd	r24, Y+55	; 0x37
    250e:	98 ad       	ldd	r25, Y+56	; 0x38
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	4a e7       	ldi	r20, 0x7A	; 122
    2516:	53 e4       	ldi	r21, 0x43	; 67
    2518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	89 ab       	std	Y+49, r24	; 0x31
    2522:	9a ab       	std	Y+50, r25	; 0x32
    2524:	ab ab       	std	Y+51, r26	; 0x33
    2526:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2528:	69 a9       	ldd	r22, Y+49	; 0x31
    252a:	7a a9       	ldd	r23, Y+50	; 0x32
    252c:	8b a9       	ldd	r24, Y+51	; 0x33
    252e:	9c a9       	ldd	r25, Y+52	; 0x34
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e8       	ldi	r20, 0x80	; 128
    2536:	5f e3       	ldi	r21, 0x3F	; 63
    2538:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    253c:	88 23       	and	r24, r24
    253e:	2c f4       	brge	.+10     	; 0x254a <LCD_voidSendCMD4+0x80>
		__ticks = 1;
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	98 ab       	std	Y+48, r25	; 0x30
    2546:	8f a7       	std	Y+47, r24	; 0x2f
    2548:	3f c0       	rjmp	.+126    	; 0x25c8 <LCD_voidSendCMD4+0xfe>
	else if (__tmp > 65535)
    254a:	69 a9       	ldd	r22, Y+49	; 0x31
    254c:	7a a9       	ldd	r23, Y+50	; 0x32
    254e:	8b a9       	ldd	r24, Y+51	; 0x33
    2550:	9c a9       	ldd	r25, Y+52	; 0x34
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	3f ef       	ldi	r19, 0xFF	; 255
    2556:	4f e7       	ldi	r20, 0x7F	; 127
    2558:	57 e4       	ldi	r21, 0x47	; 71
    255a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    255e:	18 16       	cp	r1, r24
    2560:	4c f5       	brge	.+82     	; 0x25b4 <LCD_voidSendCMD4+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2562:	6d a9       	ldd	r22, Y+53	; 0x35
    2564:	7e a9       	ldd	r23, Y+54	; 0x36
    2566:	8f a9       	ldd	r24, Y+55	; 0x37
    2568:	98 ad       	ldd	r25, Y+56	; 0x38
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e2       	ldi	r20, 0x20	; 32
    2570:	51 e4       	ldi	r21, 0x41	; 65
    2572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	bc 01       	movw	r22, r24
    257c:	cd 01       	movw	r24, r26
    257e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	98 ab       	std	Y+48, r25	; 0x30
    2588:	8f a7       	std	Y+47, r24	; 0x2f
    258a:	0f c0       	rjmp	.+30     	; 0x25aa <LCD_voidSendCMD4+0xe0>
    258c:	89 e1       	ldi	r24, 0x19	; 25
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	9e a7       	std	Y+46, r25	; 0x2e
    2592:	8d a7       	std	Y+45, r24	; 0x2d
    2594:	8d a5       	ldd	r24, Y+45	; 0x2d
    2596:	9e a5       	ldd	r25, Y+46	; 0x2e
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	f1 f7       	brne	.-4      	; 0x2598 <LCD_voidSendCMD4+0xce>
    259c:	9e a7       	std	Y+46, r25	; 0x2e
    259e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    25a2:	98 a9       	ldd	r25, Y+48	; 0x30
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	98 ab       	std	Y+48, r25	; 0x30
    25a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ac:	98 a9       	ldd	r25, Y+48	; 0x30
    25ae:	00 97       	sbiw	r24, 0x00	; 0
    25b0:	69 f7       	brne	.-38     	; 0x258c <LCD_voidSendCMD4+0xc2>
    25b2:	14 c0       	rjmp	.+40     	; 0x25dc <LCD_voidSendCMD4+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b4:	69 a9       	ldd	r22, Y+49	; 0x31
    25b6:	7a a9       	ldd	r23, Y+50	; 0x32
    25b8:	8b a9       	ldd	r24, Y+51	; 0x33
    25ba:	9c a9       	ldd	r25, Y+52	; 0x34
    25bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	98 ab       	std	Y+48, r25	; 0x30
    25c6:	8f a7       	std	Y+47, r24	; 0x2f
    25c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ca:	98 a9       	ldd	r25, Y+48	; 0x30
    25cc:	9c a7       	std	Y+44, r25	; 0x2c
    25ce:	8b a7       	std	Y+43, r24	; 0x2b
    25d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    25d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <LCD_voidSendCMD4+0x10a>
    25d8:	9c a7       	std	Y+44, r25	; 0x2c
    25da:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);

	u8 Dummy = (CMD & 0xf0) | Dummy0;
    25dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    25de:	98 2f       	mov	r25, r24
    25e0:	90 7f       	andi	r25, 0xF0	; 240
    25e2:	8a ad       	ldd	r24, Y+58	; 0x3a
    25e4:	89 2b       	or	r24, r25
    25e6:	89 af       	std	Y+57, r24	; 0x39
	DIO_voidSetPortValue(DATA_PORT ,Dummy);
    25e8:	82 e0       	ldi	r24, 0x02	; 2
    25ea:	69 ad       	ldd	r22, Y+57	; 0x39
    25ec:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(CONTROL_PORT ,LCD_EN ,LOW);
    25f0:	82 e0       	ldi	r24, 0x02	; 2
    25f2:	63 e0       	ldi	r22, 0x03	; 3
    25f4:	40 e0       	ldi	r20, 0x00	; 0
    25f6:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	a0 ea       	ldi	r26, 0xA0	; 160
    2600:	b0 e4       	ldi	r27, 0x40	; 64
    2602:	8f a3       	std	Y+39, r24	; 0x27
    2604:	98 a7       	std	Y+40, r25	; 0x28
    2606:	a9 a7       	std	Y+41, r26	; 0x29
    2608:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    260a:	6f a1       	ldd	r22, Y+39	; 0x27
    260c:	78 a5       	ldd	r23, Y+40	; 0x28
    260e:	89 a5       	ldd	r24, Y+41	; 0x29
    2610:	9a a5       	ldd	r25, Y+42	; 0x2a
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	4a e7       	ldi	r20, 0x7A	; 122
    2618:	53 e4       	ldi	r21, 0x43	; 67
    261a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	8b a3       	std	Y+35, r24	; 0x23
    2624:	9c a3       	std	Y+36, r25	; 0x24
    2626:	ad a3       	std	Y+37, r26	; 0x25
    2628:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    262a:	6b a1       	ldd	r22, Y+35	; 0x23
    262c:	7c a1       	ldd	r23, Y+36	; 0x24
    262e:	8d a1       	ldd	r24, Y+37	; 0x25
    2630:	9e a1       	ldd	r25, Y+38	; 0x26
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	40 e8       	ldi	r20, 0x80	; 128
    2638:	5f e3       	ldi	r21, 0x3F	; 63
    263a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    263e:	88 23       	and	r24, r24
    2640:	2c f4       	brge	.+10     	; 0x264c <LCD_voidSendCMD4+0x182>
		__ticks = 1;
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	9a a3       	std	Y+34, r25	; 0x22
    2648:	89 a3       	std	Y+33, r24	; 0x21
    264a:	3f c0       	rjmp	.+126    	; 0x26ca <LCD_voidSendCMD4+0x200>
	else if (__tmp > 65535)
    264c:	6b a1       	ldd	r22, Y+35	; 0x23
    264e:	7c a1       	ldd	r23, Y+36	; 0x24
    2650:	8d a1       	ldd	r24, Y+37	; 0x25
    2652:	9e a1       	ldd	r25, Y+38	; 0x26
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	3f ef       	ldi	r19, 0xFF	; 255
    2658:	4f e7       	ldi	r20, 0x7F	; 127
    265a:	57 e4       	ldi	r21, 0x47	; 71
    265c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2660:	18 16       	cp	r1, r24
    2662:	4c f5       	brge	.+82     	; 0x26b6 <LCD_voidSendCMD4+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2664:	6f a1       	ldd	r22, Y+39	; 0x27
    2666:	78 a5       	ldd	r23, Y+40	; 0x28
    2668:	89 a5       	ldd	r24, Y+41	; 0x29
    266a:	9a a5       	ldd	r25, Y+42	; 0x2a
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	40 e2       	ldi	r20, 0x20	; 32
    2672:	51 e4       	ldi	r21, 0x41	; 65
    2674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	bc 01       	movw	r22, r24
    267e:	cd 01       	movw	r24, r26
    2680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	9a a3       	std	Y+34, r25	; 0x22
    268a:	89 a3       	std	Y+33, r24	; 0x21
    268c:	0f c0       	rjmp	.+30     	; 0x26ac <LCD_voidSendCMD4+0x1e2>
    268e:	89 e1       	ldi	r24, 0x19	; 25
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	98 a3       	std	Y+32, r25	; 0x20
    2694:	8f 8f       	std	Y+31, r24	; 0x1f
    2696:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2698:	98 a1       	ldd	r25, Y+32	; 0x20
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	f1 f7       	brne	.-4      	; 0x269a <LCD_voidSendCMD4+0x1d0>
    269e:	98 a3       	std	Y+32, r25	; 0x20
    26a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a2:	89 a1       	ldd	r24, Y+33	; 0x21
    26a4:	9a a1       	ldd	r25, Y+34	; 0x22
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	9a a3       	std	Y+34, r25	; 0x22
    26aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ac:	89 a1       	ldd	r24, Y+33	; 0x21
    26ae:	9a a1       	ldd	r25, Y+34	; 0x22
    26b0:	00 97       	sbiw	r24, 0x00	; 0
    26b2:	69 f7       	brne	.-38     	; 0x268e <LCD_voidSendCMD4+0x1c4>
    26b4:	14 c0       	rjmp	.+40     	; 0x26de <LCD_voidSendCMD4+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b6:	6b a1       	ldd	r22, Y+35	; 0x23
    26b8:	7c a1       	ldd	r23, Y+36	; 0x24
    26ba:	8d a1       	ldd	r24, Y+37	; 0x25
    26bc:	9e a1       	ldd	r25, Y+38	; 0x26
    26be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	9a a3       	std	Y+34, r25	; 0x22
    26c8:	89 a3       	std	Y+33, r24	; 0x21
    26ca:	89 a1       	ldd	r24, Y+33	; 0x21
    26cc:	9a a1       	ldd	r25, Y+34	; 0x22
    26ce:	9e 8f       	std	Y+30, r25	; 0x1e
    26d0:	8d 8f       	std	Y+29, r24	; 0x1d
    26d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <LCD_voidSendCMD4+0x20c>
    26da:	9e 8f       	std	Y+30, r25	; 0x1e
    26dc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	DIO_voidSetPinValue(CONTROL_PORT ,LCD_EN ,HIGH);
    26de:	82 e0       	ldi	r24, 0x02	; 2
    26e0:	63 e0       	ldi	r22, 0x03	; 3
    26e2:	41 e0       	ldi	r20, 0x01	; 1
    26e4:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	a0 ea       	ldi	r26, 0xA0	; 160
    26ee:	b0 e4       	ldi	r27, 0x40	; 64
    26f0:	89 8f       	std	Y+25, r24	; 0x19
    26f2:	9a 8f       	std	Y+26, r25	; 0x1a
    26f4:	ab 8f       	std	Y+27, r26	; 0x1b
    26f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f8:	69 8d       	ldd	r22, Y+25	; 0x19
    26fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	4a e7       	ldi	r20, 0x7A	; 122
    2706:	53 e4       	ldi	r21, 0x43	; 67
    2708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	8d 8b       	std	Y+21, r24	; 0x15
    2712:	9e 8b       	std	Y+22, r25	; 0x16
    2714:	af 8b       	std	Y+23, r26	; 0x17
    2716:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2718:	6d 89       	ldd	r22, Y+21	; 0x15
    271a:	7e 89       	ldd	r23, Y+22	; 0x16
    271c:	8f 89       	ldd	r24, Y+23	; 0x17
    271e:	98 8d       	ldd	r25, Y+24	; 0x18
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e8       	ldi	r20, 0x80	; 128
    2726:	5f e3       	ldi	r21, 0x3F	; 63
    2728:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    272c:	88 23       	and	r24, r24
    272e:	2c f4       	brge	.+10     	; 0x273a <LCD_voidSendCMD4+0x270>
		__ticks = 1;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	9c 8b       	std	Y+20, r25	; 0x14
    2736:	8b 8b       	std	Y+19, r24	; 0x13
    2738:	3f c0       	rjmp	.+126    	; 0x27b8 <LCD_voidSendCMD4+0x2ee>
	else if (__tmp > 65535)
    273a:	6d 89       	ldd	r22, Y+21	; 0x15
    273c:	7e 89       	ldd	r23, Y+22	; 0x16
    273e:	8f 89       	ldd	r24, Y+23	; 0x17
    2740:	98 8d       	ldd	r25, Y+24	; 0x18
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	3f ef       	ldi	r19, 0xFF	; 255
    2746:	4f e7       	ldi	r20, 0x7F	; 127
    2748:	57 e4       	ldi	r21, 0x47	; 71
    274a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    274e:	18 16       	cp	r1, r24
    2750:	4c f5       	brge	.+82     	; 0x27a4 <LCD_voidSendCMD4+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2752:	69 8d       	ldd	r22, Y+25	; 0x19
    2754:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2756:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2758:	9c 8d       	ldd	r25, Y+28	; 0x1c
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	40 e2       	ldi	r20, 0x20	; 32
    2760:	51 e4       	ldi	r21, 0x41	; 65
    2762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	bc 01       	movw	r22, r24
    276c:	cd 01       	movw	r24, r26
    276e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	9c 8b       	std	Y+20, r25	; 0x14
    2778:	8b 8b       	std	Y+19, r24	; 0x13
    277a:	0f c0       	rjmp	.+30     	; 0x279a <LCD_voidSendCMD4+0x2d0>
    277c:	89 e1       	ldi	r24, 0x19	; 25
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	9a 8b       	std	Y+18, r25	; 0x12
    2782:	89 8b       	std	Y+17, r24	; 0x11
    2784:	89 89       	ldd	r24, Y+17	; 0x11
    2786:	9a 89       	ldd	r25, Y+18	; 0x12
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	f1 f7       	brne	.-4      	; 0x2788 <LCD_voidSendCMD4+0x2be>
    278c:	9a 8b       	std	Y+18, r25	; 0x12
    278e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2790:	8b 89       	ldd	r24, Y+19	; 0x13
    2792:	9c 89       	ldd	r25, Y+20	; 0x14
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	9c 8b       	std	Y+20, r25	; 0x14
    2798:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279a:	8b 89       	ldd	r24, Y+19	; 0x13
    279c:	9c 89       	ldd	r25, Y+20	; 0x14
    279e:	00 97       	sbiw	r24, 0x00	; 0
    27a0:	69 f7       	brne	.-38     	; 0x277c <LCD_voidSendCMD4+0x2b2>
    27a2:	14 c0       	rjmp	.+40     	; 0x27cc <LCD_voidSendCMD4+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a4:	6d 89       	ldd	r22, Y+21	; 0x15
    27a6:	7e 89       	ldd	r23, Y+22	; 0x16
    27a8:	8f 89       	ldd	r24, Y+23	; 0x17
    27aa:	98 8d       	ldd	r25, Y+24	; 0x18
    27ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	9c 8b       	std	Y+20, r25	; 0x14
    27b6:	8b 8b       	std	Y+19, r24	; 0x13
    27b8:	8b 89       	ldd	r24, Y+19	; 0x13
    27ba:	9c 89       	ldd	r25, Y+20	; 0x14
    27bc:	98 8b       	std	Y+16, r25	; 0x10
    27be:	8f 87       	std	Y+15, r24	; 0x0f
    27c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27c2:	98 89       	ldd	r25, Y+16	; 0x10
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	f1 f7       	brne	.-4      	; 0x27c4 <LCD_voidSendCMD4+0x2fa>
    27c8:	98 8b       	std	Y+16, r25	; 0x10
    27ca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);

	Dummy = ((CMD & 0x0f) << 4) | Dummy0;
    27cc:	8b ad       	ldd	r24, Y+59	; 0x3b
    27ce:	88 2f       	mov	r24, r24
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	82 95       	swap	r24
    27d4:	92 95       	swap	r25
    27d6:	90 7f       	andi	r25, 0xF0	; 240
    27d8:	98 27       	eor	r25, r24
    27da:	80 7f       	andi	r24, 0xF0	; 240
    27dc:	98 27       	eor	r25, r24
    27de:	98 2f       	mov	r25, r24
    27e0:	8a ad       	ldd	r24, Y+58	; 0x3a
    27e2:	89 2b       	or	r24, r25
    27e4:	89 af       	std	Y+57, r24	; 0x39
	DIO_voidSetPortValue(DATA_PORT ,Dummy);
    27e6:	82 e0       	ldi	r24, 0x02	; 2
    27e8:	69 ad       	ldd	r22, Y+57	; 0x39
    27ea:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <DIO_voidSetPortValue>
	DIO_voidSetPinValue(CONTROL_PORT ,LCD_EN ,LOW);
    27ee:	82 e0       	ldi	r24, 0x02	; 2
    27f0:	63 e0       	ldi	r22, 0x03	; 3
    27f2:	40 e0       	ldi	r20, 0x00	; 0
    27f4:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	a0 ea       	ldi	r26, 0xA0	; 160
    27fe:	b0 e4       	ldi	r27, 0x40	; 64
    2800:	8b 87       	std	Y+11, r24	; 0x0b
    2802:	9c 87       	std	Y+12, r25	; 0x0c
    2804:	ad 87       	std	Y+13, r26	; 0x0d
    2806:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2808:	6b 85       	ldd	r22, Y+11	; 0x0b
    280a:	7c 85       	ldd	r23, Y+12	; 0x0c
    280c:	8d 85       	ldd	r24, Y+13	; 0x0d
    280e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	4a e7       	ldi	r20, 0x7A	; 122
    2816:	53 e4       	ldi	r21, 0x43	; 67
    2818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	8f 83       	std	Y+7, r24	; 0x07
    2822:	98 87       	std	Y+8, r25	; 0x08
    2824:	a9 87       	std	Y+9, r26	; 0x09
    2826:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2828:	6f 81       	ldd	r22, Y+7	; 0x07
    282a:	78 85       	ldd	r23, Y+8	; 0x08
    282c:	89 85       	ldd	r24, Y+9	; 0x09
    282e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e8       	ldi	r20, 0x80	; 128
    2836:	5f e3       	ldi	r21, 0x3F	; 63
    2838:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    283c:	88 23       	and	r24, r24
    283e:	2c f4       	brge	.+10     	; 0x284a <LCD_voidSendCMD4+0x380>
		__ticks = 1;
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	9e 83       	std	Y+6, r25	; 0x06
    2846:	8d 83       	std	Y+5, r24	; 0x05
    2848:	3f c0       	rjmp	.+126    	; 0x28c8 <LCD_voidSendCMD4+0x3fe>
	else if (__tmp > 65535)
    284a:	6f 81       	ldd	r22, Y+7	; 0x07
    284c:	78 85       	ldd	r23, Y+8	; 0x08
    284e:	89 85       	ldd	r24, Y+9	; 0x09
    2850:	9a 85       	ldd	r25, Y+10	; 0x0a
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	3f ef       	ldi	r19, 0xFF	; 255
    2856:	4f e7       	ldi	r20, 0x7F	; 127
    2858:	57 e4       	ldi	r21, 0x47	; 71
    285a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    285e:	18 16       	cp	r1, r24
    2860:	4c f5       	brge	.+82     	; 0x28b4 <LCD_voidSendCMD4+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2862:	6b 85       	ldd	r22, Y+11	; 0x0b
    2864:	7c 85       	ldd	r23, Y+12	; 0x0c
    2866:	8d 85       	ldd	r24, Y+13	; 0x0d
    2868:	9e 85       	ldd	r25, Y+14	; 0x0e
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e2       	ldi	r20, 0x20	; 32
    2870:	51 e4       	ldi	r21, 0x41	; 65
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	9e 83       	std	Y+6, r25	; 0x06
    2888:	8d 83       	std	Y+5, r24	; 0x05
    288a:	0f c0       	rjmp	.+30     	; 0x28aa <LCD_voidSendCMD4+0x3e0>
    288c:	89 e1       	ldi	r24, 0x19	; 25
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	9c 83       	std	Y+4, r25	; 0x04
    2892:	8b 83       	std	Y+3, r24	; 0x03
    2894:	8b 81       	ldd	r24, Y+3	; 0x03
    2896:	9c 81       	ldd	r25, Y+4	; 0x04
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <LCD_voidSendCMD4+0x3ce>
    289c:	9c 83       	std	Y+4, r25	; 0x04
    289e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a0:	8d 81       	ldd	r24, Y+5	; 0x05
    28a2:	9e 81       	ldd	r25, Y+6	; 0x06
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	9e 83       	std	Y+6, r25	; 0x06
    28a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28aa:	8d 81       	ldd	r24, Y+5	; 0x05
    28ac:	9e 81       	ldd	r25, Y+6	; 0x06
    28ae:	00 97       	sbiw	r24, 0x00	; 0
    28b0:	69 f7       	brne	.-38     	; 0x288c <LCD_voidSendCMD4+0x3c2>
    28b2:	14 c0       	rjmp	.+40     	; 0x28dc <LCD_voidSendCMD4+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b4:	6f 81       	ldd	r22, Y+7	; 0x07
    28b6:	78 85       	ldd	r23, Y+8	; 0x08
    28b8:	89 85       	ldd	r24, Y+9	; 0x09
    28ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    28bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
    28c8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ca:	9e 81       	ldd	r25, Y+6	; 0x06
    28cc:	9a 83       	std	Y+2, r25	; 0x02
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	9a 81       	ldd	r25, Y+2	; 0x02
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <LCD_voidSendCMD4+0x40a>
    28d8:	9a 83       	std	Y+2, r25	; 0x02
    28da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    28dc:	eb 96       	adiw	r28, 0x3b	; 59
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	08 95       	ret

000028ee <LCD_voidGOTOXY>:

void LCD_voidGOTOXY(u8 Line_num ,u8 Posittion){
    28ee:	df 93       	push	r29
    28f0:	cf 93       	push	r28
    28f2:	00 d0       	rcall	.+0      	; 0x28f4 <LCD_voidGOTOXY+0x6>
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	6a 83       	std	Y+2, r22	; 0x02
	if((Line_num == 0) && (Posittion < 16)){
    28fc:	89 81       	ldd	r24, Y+1	; 0x01
    28fe:	88 23       	and	r24, r24
    2900:	59 f4       	brne	.+22     	; 0x2918 <LCD_voidGOTOXY+0x2a>
    2902:	8a 81       	ldd	r24, Y+2	; 0x02
    2904:	80 31       	cpi	r24, 0x10	; 16
    2906:	40 f4       	brcc	.+16     	; 0x2918 <LCD_voidGOTOXY+0x2a>
		LCD_voidSendCMD4((0x80 + Posittion));
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	80 58       	subi	r24, 0x80	; 128
    290c:	0e 94 65 12 	call	0x24ca	; 0x24ca <LCD_voidSendCMD4>
		cursor = Posittion;
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	80 93 7c 03 	sts	0x037C, r24
    2916:	0e c0       	rjmp	.+28     	; 0x2934 <LCD_voidGOTOXY+0x46>
	}
	else if((Line_num == 1) && (Posittion < 16)){
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	81 30       	cpi	r24, 0x01	; 1
    291c:	59 f4       	brne	.+22     	; 0x2934 <LCD_voidGOTOXY+0x46>
    291e:	8a 81       	ldd	r24, Y+2	; 0x02
    2920:	80 31       	cpi	r24, 0x10	; 16
    2922:	40 f4       	brcc	.+16     	; 0x2934 <LCD_voidGOTOXY+0x46>
		LCD_voidSendCMD4((0xC0 + Posittion));
    2924:	8a 81       	ldd	r24, Y+2	; 0x02
    2926:	80 54       	subi	r24, 0x40	; 64
    2928:	0e 94 65 12 	call	0x24ca	; 0x24ca <LCD_voidSendCMD4>
		cursor = 17 + Posittion;
    292c:	8a 81       	ldd	r24, Y+2	; 0x02
    292e:	8f 5e       	subi	r24, 0xEF	; 239
    2930:	80 93 7c 03 	sts	0x037C, r24
	}
}
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	cf 91       	pop	r28
    293a:	df 91       	pop	r29
    293c:	08 95       	ret

0000293e <LCD_voidWriteString>:

void LCD_voidWriteString(u8* ptr){
    293e:	df 93       	push	r29
    2940:	cf 93       	push	r28
    2942:	00 d0       	rcall	.+0      	; 0x2944 <LCD_voidWriteString+0x6>
    2944:	0f 92       	push	r0
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	9b 83       	std	Y+3, r25	; 0x03
    294c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    294e:	19 82       	std	Y+1, r1	; 0x01
    2950:	0e c0       	rjmp	.+28     	; 0x296e <LCD_voidWriteString+0x30>
	while(ptr[i] != '\0'){
		LCD_voidWritecChar4(ptr[i]);
    2952:	89 81       	ldd	r24, Y+1	; 0x01
    2954:	28 2f       	mov	r18, r24
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	9b 81       	ldd	r25, Y+3	; 0x03
    295c:	fc 01       	movw	r30, r24
    295e:	e2 0f       	add	r30, r18
    2960:	f3 1f       	adc	r31, r19
    2962:	80 81       	ld	r24, Z
    2964:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
		i++;
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	8f 5f       	subi	r24, 0xFF	; 255
    296c:	89 83       	std	Y+1, r24	; 0x01
	}
}

void LCD_voidWriteString(u8* ptr){
	u8 i = 0;
	while(ptr[i] != '\0'){
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	28 2f       	mov	r18, r24
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	8a 81       	ldd	r24, Y+2	; 0x02
    2976:	9b 81       	ldd	r25, Y+3	; 0x03
    2978:	fc 01       	movw	r30, r24
    297a:	e2 0f       	add	r30, r18
    297c:	f3 1f       	adc	r31, r19
    297e:	80 81       	ld	r24, Z
    2980:	88 23       	and	r24, r24
    2982:	39 f7       	brne	.-50     	; 0x2952 <LCD_voidWriteString+0x14>
		LCD_voidWritecChar4(ptr[i]);
		i++;
	}
}
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(void){
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCMD4(0x01);		//clear display screen
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	0e 94 65 12 	call	0x24ca	; 0x24ca <LCD_voidSendCMD4>
	cursor = 1;
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	80 93 7c 03 	sts	0x037C, r24
}
    29a4:	cf 91       	pop	r28
    29a6:	df 91       	pop	r29
    29a8:	08 95       	ret

000029aa <LCD_voidWriteSpecialChar4>:

void LCD_voidWriteSpecialChar4(u8 *arr ,u8 BlockNumber ,u8 LineNumber ,u8 Position){
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	28 97       	sbiw	r28, 0x08	; 8
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	cd bf       	out	0x3d, r28	; 61
    29be:	9d 83       	std	Y+5, r25	; 0x05
    29c0:	8c 83       	std	Y+4, r24	; 0x04
    29c2:	6e 83       	std	Y+6, r22	; 0x06
    29c4:	4f 83       	std	Y+7, r20	; 0x07
    29c6:	28 87       	std	Y+8, r18	; 0x08
	if(BlockNumber < 8 && BlockNumber >= 0 && LineNumber < 2 && LineNumber >= 0 && Position < 16 && Position >= 0){
    29c8:	8e 81       	ldd	r24, Y+6	; 0x06
    29ca:	88 30       	cpi	r24, 0x08	; 8
    29cc:	90 f5       	brcc	.+100    	; 0x2a32 <LCD_voidWriteSpecialChar4+0x88>
    29ce:	8f 81       	ldd	r24, Y+7	; 0x07
    29d0:	82 30       	cpi	r24, 0x02	; 2
    29d2:	78 f5       	brcc	.+94     	; 0x2a32 <LCD_voidWriteSpecialChar4+0x88>
    29d4:	88 85       	ldd	r24, Y+8	; 0x08
    29d6:	80 31       	cpi	r24, 0x10	; 16
    29d8:	60 f5       	brcc	.+88     	; 0x2a32 <LCD_voidWriteSpecialChar4+0x88>
		/* WRITE INSIDE CGRAM */
		u8 CGRAM_Address = BlockNumber * 8;
    29da:	8e 81       	ldd	r24, Y+6	; 0x06
    29dc:	88 2f       	mov	r24, r24
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	88 0f       	add	r24, r24
    29e2:	99 1f       	adc	r25, r25
    29e4:	88 0f       	add	r24, r24
    29e6:	99 1f       	adc	r25, r25
    29e8:	88 0f       	add	r24, r24
    29ea:	99 1f       	adc	r25, r25
    29ec:	8b 83       	std	Y+3, r24	; 0x03
		LCD_voidSendCMD4(CGRAM_Address | 0b01000000);
    29ee:	8b 81       	ldd	r24, Y+3	; 0x03
    29f0:	80 64       	ori	r24, 0x40	; 64
    29f2:	0e 94 65 12 	call	0x24ca	; 0x24ca <LCD_voidSendCMD4>
		for(int i = 0 ;i<8 ;i++){
    29f6:	1a 82       	std	Y+2, r1	; 0x02
    29f8:	19 82       	std	Y+1, r1	; 0x01
    29fa:	0f c0       	rjmp	.+30     	; 0x2a1a <LCD_voidWriteSpecialChar4+0x70>
			LCD_voidWritecChar4(arr[i]);
    29fc:	29 81       	ldd	r18, Y+1	; 0x01
    29fe:	3a 81       	ldd	r19, Y+2	; 0x02
    2a00:	8c 81       	ldd	r24, Y+4	; 0x04
    2a02:	9d 81       	ldd	r25, Y+5	; 0x05
    2a04:	fc 01       	movw	r30, r24
    2a06:	e2 0f       	add	r30, r18
    2a08:	f3 1f       	adc	r31, r19
    2a0a:	80 81       	ld	r24, Z
    2a0c:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
void LCD_voidWriteSpecialChar4(u8 *arr ,u8 BlockNumber ,u8 LineNumber ,u8 Position){
	if(BlockNumber < 8 && BlockNumber >= 0 && LineNumber < 2 && LineNumber >= 0 && Position < 16 && Position >= 0){
		/* WRITE INSIDE CGRAM */
		u8 CGRAM_Address = BlockNumber * 8;
		LCD_voidSendCMD4(CGRAM_Address | 0b01000000);
		for(int i = 0 ;i<8 ;i++){
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
    2a12:	9a 81       	ldd	r25, Y+2	; 0x02
    2a14:	01 96       	adiw	r24, 0x01	; 1
    2a16:	9a 83       	std	Y+2, r25	; 0x02
    2a18:	89 83       	std	Y+1, r24	; 0x01
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1e:	88 30       	cpi	r24, 0x08	; 8
    2a20:	91 05       	cpc	r25, r1
    2a22:	64 f3       	brlt	.-40     	; 0x29fc <LCD_voidWriteSpecialChar4+0x52>
			LCD_voidWritecChar4(arr[i]);
		}

		/* RETURN TO DDRAM TO PRINT */
		LCD_voidGOTOXY(LineNumber, Position);
    2a24:	8f 81       	ldd	r24, Y+7	; 0x07
    2a26:	68 85       	ldd	r22, Y+8	; 0x08
    2a28:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
		LCD_voidWritecChar4(BlockNumber);
    2a2c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a2e:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
	}
}
    2a32:	28 96       	adiw	r28, 0x08	; 8
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	08 95       	ret

00002a44 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(s32 number){
    2a44:	ef 92       	push	r14
    2a46:	ff 92       	push	r15
    2a48:	0f 93       	push	r16
    2a4a:	1f 93       	push	r17
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
    2a54:	a0 97       	sbiw	r28, 0x20	; 32
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	6d 8f       	std	Y+29, r22	; 0x1d
    2a62:	7e 8f       	std	Y+30, r23	; 0x1e
    2a64:	8f 8f       	std	Y+31, r24	; 0x1f
    2a66:	98 a3       	std	Y+32, r25	; 0x20
	u32 Third_Digit;
	u32 Fourth_Digit;
	u32 Fifth_Digit;
	u32 Six_Digit;

	s32 LocalNumber = number;
    2a68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a6c:	af 8d       	ldd	r26, Y+31	; 0x1f
    2a6e:	b8 a1       	ldd	r27, Y+32	; 0x20
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	9a 83       	std	Y+2, r25	; 0x02
    2a74:	ab 83       	std	Y+3, r26	; 0x03
    2a76:	bc 83       	std	Y+4, r27	; 0x04

	if(LocalNumber < 0){
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7c:	ab 81       	ldd	r26, Y+3	; 0x03
    2a7e:	bc 81       	ldd	r27, Y+4	; 0x04
    2a80:	bb 23       	and	r27, r27
    2a82:	94 f4       	brge	.+36     	; 0x2aa8 <LCD_voidWriteNumber+0x64>
		LCD_voidWritecChar4('-');
    2a84:	8d e2       	ldi	r24, 0x2D	; 45
    2a86:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
		LocalNumber = (LocalNumber * (-1));
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8e:	ab 81       	ldd	r26, Y+3	; 0x03
    2a90:	bc 81       	ldd	r27, Y+4	; 0x04
    2a92:	b0 95       	com	r27
    2a94:	a0 95       	com	r26
    2a96:	90 95       	com	r25
    2a98:	81 95       	neg	r24
    2a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a9c:	af 4f       	sbci	r26, 0xFF	; 255
    2a9e:	bf 4f       	sbci	r27, 0xFF	; 255
    2aa0:	89 83       	std	Y+1, r24	; 0x01
    2aa2:	9a 83       	std	Y+2, r25	; 0x02
    2aa4:	ab 83       	std	Y+3, r26	; 0x03
    2aa6:	bc 83       	std	Y+4, r27	; 0x04
	}
	if(LocalNumber >= 0 && LocalNumber < 10){
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    2aac:	ab 81       	ldd	r26, Y+3	; 0x03
    2aae:	bc 81       	ldd	r27, Y+4	; 0x04
    2ab0:	bb 23       	and	r27, r27
    2ab2:	04 f1       	brlt	.+64     	; 0x2af4 <LCD_voidWriteNumber+0xb0>
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab8:	ab 81       	ldd	r26, Y+3	; 0x03
    2aba:	bc 81       	ldd	r27, Y+4	; 0x04
    2abc:	8a 30       	cpi	r24, 0x0A	; 10
    2abe:	91 05       	cpc	r25, r1
    2ac0:	a1 05       	cpc	r26, r1
    2ac2:	b1 05       	cpc	r27, r1
    2ac4:	bc f4       	brge	.+46     	; 0x2af4 <LCD_voidWriteNumber+0xb0>
		First_Digit = (LocalNumber % 10);
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aca:	ab 81       	ldd	r26, Y+3	; 0x03
    2acc:	bc 81       	ldd	r27, Y+4	; 0x04
    2ace:	2a e0       	ldi	r18, 0x0A	; 10
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	40 e0       	ldi	r20, 0x00	; 0
    2ad4:	50 e0       	ldi	r21, 0x00	; 0
    2ad6:	bc 01       	movw	r22, r24
    2ad8:	cd 01       	movw	r24, r26
    2ada:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	89 8f       	std	Y+25, r24	; 0x19
    2ae4:	9a 8f       	std	Y+26, r25	; 0x1a
    2ae6:	ab 8f       	std	Y+27, r26	; 0x1b
    2ae8:	bc 8f       	std	Y+28, r27	; 0x1c
		LCD_voidWritecChar4(First_Digit + 0x30);
    2aea:	89 8d       	ldd	r24, Y+25	; 0x19
    2aec:	80 5d       	subi	r24, 0xD0	; 208
    2aee:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
    2af2:	fb c3       	rjmp	.+2038   	; 0x32ea <LCD_voidWriteNumber+0x8a6>
	}
	else if(LocalNumber >= 10 && LocalNumber < 100){
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	9a 81       	ldd	r25, Y+2	; 0x02
    2af8:	ab 81       	ldd	r26, Y+3	; 0x03
    2afa:	bc 81       	ldd	r27, Y+4	; 0x04
    2afc:	8a 30       	cpi	r24, 0x0A	; 10
    2afe:	91 05       	cpc	r25, r1
    2b00:	a1 05       	cpc	r26, r1
    2b02:	b1 05       	cpc	r27, r1
    2b04:	0c f4       	brge	.+2      	; 0x2b08 <LCD_voidWriteNumber+0xc4>
    2b06:	59 c0       	rjmp	.+178    	; 0x2bba <LCD_voidWriteNumber+0x176>
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0c:	ab 81       	ldd	r26, Y+3	; 0x03
    2b0e:	bc 81       	ldd	r27, Y+4	; 0x04
    2b10:	84 36       	cpi	r24, 0x64	; 100
    2b12:	91 05       	cpc	r25, r1
    2b14:	a1 05       	cpc	r26, r1
    2b16:	b1 05       	cpc	r27, r1
    2b18:	0c f0       	brlt	.+2      	; 0x2b1c <LCD_voidWriteNumber+0xd8>
    2b1a:	4f c0       	rjmp	.+158    	; 0x2bba <LCD_voidWriteNumber+0x176>
		First_Digit = (LocalNumber % 10);
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b20:	ab 81       	ldd	r26, Y+3	; 0x03
    2b22:	bc 81       	ldd	r27, Y+4	; 0x04
    2b24:	2a e0       	ldi	r18, 0x0A	; 10
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e0       	ldi	r20, 0x00	; 0
    2b2a:	50 e0       	ldi	r21, 0x00	; 0
    2b2c:	bc 01       	movw	r22, r24
    2b2e:	cd 01       	movw	r24, r26
    2b30:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	89 8f       	std	Y+25, r24	; 0x19
    2b3a:	9a 8f       	std	Y+26, r25	; 0x1a
    2b3c:	ab 8f       	std	Y+27, r26	; 0x1b
    2b3e:	bc 8f       	std	Y+28, r27	; 0x1c
		Second_Digit = ((LocalNumber % 100) - (LocalNumber % 10)) / 10;
    2b40:	89 81       	ldd	r24, Y+1	; 0x01
    2b42:	9a 81       	ldd	r25, Y+2	; 0x02
    2b44:	ab 81       	ldd	r26, Y+3	; 0x03
    2b46:	bc 81       	ldd	r27, Y+4	; 0x04
    2b48:	24 e6       	ldi	r18, 0x64	; 100
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	40 e0       	ldi	r20, 0x00	; 0
    2b4e:	50 e0       	ldi	r21, 0x00	; 0
    2b50:	bc 01       	movw	r22, r24
    2b52:	cd 01       	movw	r24, r26
    2b54:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	7c 01       	movw	r14, r24
    2b5e:	8d 01       	movw	r16, r26
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	9a 81       	ldd	r25, Y+2	; 0x02
    2b64:	ab 81       	ldd	r26, Y+3	; 0x03
    2b66:	bc 81       	ldd	r27, Y+4	; 0x04
    2b68:	2a e0       	ldi	r18, 0x0A	; 10
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	40 e0       	ldi	r20, 0x00	; 0
    2b6e:	50 e0       	ldi	r21, 0x00	; 0
    2b70:	bc 01       	movw	r22, r24
    2b72:	cd 01       	movw	r24, r26
    2b74:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	a8 01       	movw	r20, r16
    2b7e:	97 01       	movw	r18, r14
    2b80:	28 1b       	sub	r18, r24
    2b82:	39 0b       	sbc	r19, r25
    2b84:	4a 0b       	sbc	r20, r26
    2b86:	5b 0b       	sbc	r21, r27
    2b88:	da 01       	movw	r26, r20
    2b8a:	c9 01       	movw	r24, r18
    2b8c:	2a e0       	ldi	r18, 0x0A	; 10
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	40 e0       	ldi	r20, 0x00	; 0
    2b92:	50 e0       	ldi	r21, 0x00	; 0
    2b94:	bc 01       	movw	r22, r24
    2b96:	cd 01       	movw	r24, r26
    2b98:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2b9c:	da 01       	movw	r26, r20
    2b9e:	c9 01       	movw	r24, r18
    2ba0:	8d 8b       	std	Y+21, r24	; 0x15
    2ba2:	9e 8b       	std	Y+22, r25	; 0x16
    2ba4:	af 8b       	std	Y+23, r26	; 0x17
    2ba6:	b8 8f       	std	Y+24, r27	; 0x18
		LCD_voidWritecChar4(Second_Digit + 0x30);
    2ba8:	8d 89       	ldd	r24, Y+21	; 0x15
    2baa:	80 5d       	subi	r24, 0xD0	; 208
    2bac:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
		LCD_voidWritecChar4(First_Digit + 0x30);
    2bb0:	89 8d       	ldd	r24, Y+25	; 0x19
    2bb2:	80 5d       	subi	r24, 0xD0	; 208
    2bb4:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
    2bb8:	98 c3       	rjmp	.+1840   	; 0x32ea <LCD_voidWriteNumber+0x8a6>
	}
	else if(LocalNumber >=100 && LocalNumber < 1000){
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bbe:	ab 81       	ldd	r26, Y+3	; 0x03
    2bc0:	bc 81       	ldd	r27, Y+4	; 0x04
    2bc2:	84 36       	cpi	r24, 0x64	; 100
    2bc4:	91 05       	cpc	r25, r1
    2bc6:	a1 05       	cpc	r26, r1
    2bc8:	b1 05       	cpc	r27, r1
    2bca:	0c f4       	brge	.+2      	; 0x2bce <LCD_voidWriteNumber+0x18a>
    2bcc:	86 c0       	rjmp	.+268    	; 0x2cda <LCD_voidWriteNumber+0x296>
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd2:	ab 81       	ldd	r26, Y+3	; 0x03
    2bd4:	bc 81       	ldd	r27, Y+4	; 0x04
    2bd6:	88 3e       	cpi	r24, 0xE8	; 232
    2bd8:	33 e0       	ldi	r19, 0x03	; 3
    2bda:	93 07       	cpc	r25, r19
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	a3 07       	cpc	r26, r19
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	b3 07       	cpc	r27, r19
    2be4:	0c f0       	brlt	.+2      	; 0x2be8 <LCD_voidWriteNumber+0x1a4>
    2be6:	79 c0       	rjmp	.+242    	; 0x2cda <LCD_voidWriteNumber+0x296>
		First_Digit  = (LocalNumber % 10);
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	9a 81       	ldd	r25, Y+2	; 0x02
    2bec:	ab 81       	ldd	r26, Y+3	; 0x03
    2bee:	bc 81       	ldd	r27, Y+4	; 0x04
    2bf0:	2a e0       	ldi	r18, 0x0A	; 10
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	40 e0       	ldi	r20, 0x00	; 0
    2bf6:	50 e0       	ldi	r21, 0x00	; 0
    2bf8:	bc 01       	movw	r22, r24
    2bfa:	cd 01       	movw	r24, r26
    2bfc:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	89 8f       	std	Y+25, r24	; 0x19
    2c06:	9a 8f       	std	Y+26, r25	; 0x1a
    2c08:	ab 8f       	std	Y+27, r26	; 0x1b
    2c0a:	bc 8f       	std	Y+28, r27	; 0x1c
		Second_Digit = ((LocalNumber % 100) - (LocalNumber % 10)) / 10;
    2c0c:	89 81       	ldd	r24, Y+1	; 0x01
    2c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c10:	ab 81       	ldd	r26, Y+3	; 0x03
    2c12:	bc 81       	ldd	r27, Y+4	; 0x04
    2c14:	24 e6       	ldi	r18, 0x64	; 100
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	40 e0       	ldi	r20, 0x00	; 0
    2c1a:	50 e0       	ldi	r21, 0x00	; 0
    2c1c:	bc 01       	movw	r22, r24
    2c1e:	cd 01       	movw	r24, r26
    2c20:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	7c 01       	movw	r14, r24
    2c2a:	8d 01       	movw	r16, r26
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c30:	ab 81       	ldd	r26, Y+3	; 0x03
    2c32:	bc 81       	ldd	r27, Y+4	; 0x04
    2c34:	2a e0       	ldi	r18, 0x0A	; 10
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	40 e0       	ldi	r20, 0x00	; 0
    2c3a:	50 e0       	ldi	r21, 0x00	; 0
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	a8 01       	movw	r20, r16
    2c4a:	97 01       	movw	r18, r14
    2c4c:	28 1b       	sub	r18, r24
    2c4e:	39 0b       	sbc	r19, r25
    2c50:	4a 0b       	sbc	r20, r26
    2c52:	5b 0b       	sbc	r21, r27
    2c54:	da 01       	movw	r26, r20
    2c56:	c9 01       	movw	r24, r18
    2c58:	2a e0       	ldi	r18, 0x0A	; 10
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	40 e0       	ldi	r20, 0x00	; 0
    2c5e:	50 e0       	ldi	r21, 0x00	; 0
    2c60:	bc 01       	movw	r22, r24
    2c62:	cd 01       	movw	r24, r26
    2c64:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2c68:	da 01       	movw	r26, r20
    2c6a:	c9 01       	movw	r24, r18
    2c6c:	8d 8b       	std	Y+21, r24	; 0x15
    2c6e:	9e 8b       	std	Y+22, r25	; 0x16
    2c70:	af 8b       	std	Y+23, r26	; 0x17
    2c72:	b8 8f       	std	Y+24, r27	; 0x18
		Third_Digit  = ((LocalNumber) - (LocalNumber % 100)) / 100;
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
    2c76:	9a 81       	ldd	r25, Y+2	; 0x02
    2c78:	ab 81       	ldd	r26, Y+3	; 0x03
    2c7a:	bc 81       	ldd	r27, Y+4	; 0x04
    2c7c:	24 e6       	ldi	r18, 0x64	; 100
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e0       	ldi	r20, 0x00	; 0
    2c82:	50 e0       	ldi	r21, 0x00	; 0
    2c84:	bc 01       	movw	r22, r24
    2c86:	cd 01       	movw	r24, r26
    2c88:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	9c 01       	movw	r18, r24
    2c92:	ad 01       	movw	r20, r26
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	9a 81       	ldd	r25, Y+2	; 0x02
    2c98:	ab 81       	ldd	r26, Y+3	; 0x03
    2c9a:	bc 81       	ldd	r27, Y+4	; 0x04
    2c9c:	82 1b       	sub	r24, r18
    2c9e:	93 0b       	sbc	r25, r19
    2ca0:	a4 0b       	sbc	r26, r20
    2ca2:	b5 0b       	sbc	r27, r21
    2ca4:	24 e6       	ldi	r18, 0x64	; 100
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	40 e0       	ldi	r20, 0x00	; 0
    2caa:	50 e0       	ldi	r21, 0x00	; 0
    2cac:	bc 01       	movw	r22, r24
    2cae:	cd 01       	movw	r24, r26
    2cb0:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2cb4:	da 01       	movw	r26, r20
    2cb6:	c9 01       	movw	r24, r18
    2cb8:	89 8b       	std	Y+17, r24	; 0x11
    2cba:	9a 8b       	std	Y+18, r25	; 0x12
    2cbc:	ab 8b       	std	Y+19, r26	; 0x13
    2cbe:	bc 8b       	std	Y+20, r27	; 0x14
		LCD_voidWritecChar4(Third_Digit + 0x30);
    2cc0:	89 89       	ldd	r24, Y+17	; 0x11
    2cc2:	80 5d       	subi	r24, 0xD0	; 208
    2cc4:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
		LCD_voidWritecChar4(Second_Digit + 0x30);
    2cc8:	8d 89       	ldd	r24, Y+21	; 0x15
    2cca:	80 5d       	subi	r24, 0xD0	; 208
    2ccc:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
		LCD_voidWritecChar4(First_Digit + 0x30);
    2cd0:	89 8d       	ldd	r24, Y+25	; 0x19
    2cd2:	80 5d       	subi	r24, 0xD0	; 208
    2cd4:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
    2cd8:	08 c3       	rjmp	.+1552   	; 0x32ea <LCD_voidWriteNumber+0x8a6>
	}
	else if(LocalNumber >=1000 && LocalNumber < 10000){
    2cda:	89 81       	ldd	r24, Y+1	; 0x01
    2cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cde:	ab 81       	ldd	r26, Y+3	; 0x03
    2ce0:	bc 81       	ldd	r27, Y+4	; 0x04
    2ce2:	88 3e       	cpi	r24, 0xE8	; 232
    2ce4:	33 e0       	ldi	r19, 0x03	; 3
    2ce6:	93 07       	cpc	r25, r19
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	a3 07       	cpc	r26, r19
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	b3 07       	cpc	r27, r19
    2cf0:	0c f4       	brge	.+2      	; 0x2cf4 <LCD_voidWriteNumber+0x2b0>
    2cf2:	be c0       	rjmp	.+380    	; 0x2e70 <LCD_voidWriteNumber+0x42c>
    2cf4:	89 81       	ldd	r24, Y+1	; 0x01
    2cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf8:	ab 81       	ldd	r26, Y+3	; 0x03
    2cfa:	bc 81       	ldd	r27, Y+4	; 0x04
    2cfc:	80 31       	cpi	r24, 0x10	; 16
    2cfe:	47 e2       	ldi	r20, 0x27	; 39
    2d00:	94 07       	cpc	r25, r20
    2d02:	40 e0       	ldi	r20, 0x00	; 0
    2d04:	a4 07       	cpc	r26, r20
    2d06:	40 e0       	ldi	r20, 0x00	; 0
    2d08:	b4 07       	cpc	r27, r20
    2d0a:	0c f0       	brlt	.+2      	; 0x2d0e <LCD_voidWriteNumber+0x2ca>
    2d0c:	b1 c0       	rjmp	.+354    	; 0x2e70 <LCD_voidWriteNumber+0x42c>
		First_Digit  = (LocalNumber % 10);
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	9a 81       	ldd	r25, Y+2	; 0x02
    2d12:	ab 81       	ldd	r26, Y+3	; 0x03
    2d14:	bc 81       	ldd	r27, Y+4	; 0x04
    2d16:	2a e0       	ldi	r18, 0x0A	; 10
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e0       	ldi	r20, 0x00	; 0
    2d1c:	50 e0       	ldi	r21, 0x00	; 0
    2d1e:	bc 01       	movw	r22, r24
    2d20:	cd 01       	movw	r24, r26
    2d22:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	89 8f       	std	Y+25, r24	; 0x19
    2d2c:	9a 8f       	std	Y+26, r25	; 0x1a
    2d2e:	ab 8f       	std	Y+27, r26	; 0x1b
    2d30:	bc 8f       	std	Y+28, r27	; 0x1c
		Second_Digit = ((LocalNumber % 100) - (LocalNumber % 10)) / 10;
    2d32:	89 81       	ldd	r24, Y+1	; 0x01
    2d34:	9a 81       	ldd	r25, Y+2	; 0x02
    2d36:	ab 81       	ldd	r26, Y+3	; 0x03
    2d38:	bc 81       	ldd	r27, Y+4	; 0x04
    2d3a:	24 e6       	ldi	r18, 0x64	; 100
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	40 e0       	ldi	r20, 0x00	; 0
    2d40:	50 e0       	ldi	r21, 0x00	; 0
    2d42:	bc 01       	movw	r22, r24
    2d44:	cd 01       	movw	r24, r26
    2d46:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	7c 01       	movw	r14, r24
    2d50:	8d 01       	movw	r16, r26
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	9a 81       	ldd	r25, Y+2	; 0x02
    2d56:	ab 81       	ldd	r26, Y+3	; 0x03
    2d58:	bc 81       	ldd	r27, Y+4	; 0x04
    2d5a:	2a e0       	ldi	r18, 0x0A	; 10
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	40 e0       	ldi	r20, 0x00	; 0
    2d60:	50 e0       	ldi	r21, 0x00	; 0
    2d62:	bc 01       	movw	r22, r24
    2d64:	cd 01       	movw	r24, r26
    2d66:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	a8 01       	movw	r20, r16
    2d70:	97 01       	movw	r18, r14
    2d72:	28 1b       	sub	r18, r24
    2d74:	39 0b       	sbc	r19, r25
    2d76:	4a 0b       	sbc	r20, r26
    2d78:	5b 0b       	sbc	r21, r27
    2d7a:	da 01       	movw	r26, r20
    2d7c:	c9 01       	movw	r24, r18
    2d7e:	2a e0       	ldi	r18, 0x0A	; 10
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e0       	ldi	r20, 0x00	; 0
    2d84:	50 e0       	ldi	r21, 0x00	; 0
    2d86:	bc 01       	movw	r22, r24
    2d88:	cd 01       	movw	r24, r26
    2d8a:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2d8e:	da 01       	movw	r26, r20
    2d90:	c9 01       	movw	r24, r18
    2d92:	8d 8b       	std	Y+21, r24	; 0x15
    2d94:	9e 8b       	std	Y+22, r25	; 0x16
    2d96:	af 8b       	std	Y+23, r26	; 0x17
    2d98:	b8 8f       	std	Y+24, r27	; 0x18
		Third_Digit  = ((LocalNumber % 1000) - (LocalNumber % 100)) / 100;
    2d9a:	89 81       	ldd	r24, Y+1	; 0x01
    2d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9e:	ab 81       	ldd	r26, Y+3	; 0x03
    2da0:	bc 81       	ldd	r27, Y+4	; 0x04
    2da2:	28 ee       	ldi	r18, 0xE8	; 232
    2da4:	33 e0       	ldi	r19, 0x03	; 3
    2da6:	40 e0       	ldi	r20, 0x00	; 0
    2da8:	50 e0       	ldi	r21, 0x00	; 0
    2daa:	bc 01       	movw	r22, r24
    2dac:	cd 01       	movw	r24, r26
    2dae:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	7c 01       	movw	r14, r24
    2db8:	8d 01       	movw	r16, r26
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dbe:	ab 81       	ldd	r26, Y+3	; 0x03
    2dc0:	bc 81       	ldd	r27, Y+4	; 0x04
    2dc2:	24 e6       	ldi	r18, 0x64	; 100
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	40 e0       	ldi	r20, 0x00	; 0
    2dc8:	50 e0       	ldi	r21, 0x00	; 0
    2dca:	bc 01       	movw	r22, r24
    2dcc:	cd 01       	movw	r24, r26
    2dce:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	a8 01       	movw	r20, r16
    2dd8:	97 01       	movw	r18, r14
    2dda:	28 1b       	sub	r18, r24
    2ddc:	39 0b       	sbc	r19, r25
    2dde:	4a 0b       	sbc	r20, r26
    2de0:	5b 0b       	sbc	r21, r27
    2de2:	da 01       	movw	r26, r20
    2de4:	c9 01       	movw	r24, r18
    2de6:	24 e6       	ldi	r18, 0x64	; 100
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	40 e0       	ldi	r20, 0x00	; 0
    2dec:	50 e0       	ldi	r21, 0x00	; 0
    2dee:	bc 01       	movw	r22, r24
    2df0:	cd 01       	movw	r24, r26
    2df2:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2df6:	da 01       	movw	r26, r20
    2df8:	c9 01       	movw	r24, r18
    2dfa:	89 8b       	std	Y+17, r24	; 0x11
    2dfc:	9a 8b       	std	Y+18, r25	; 0x12
    2dfe:	ab 8b       	std	Y+19, r26	; 0x13
    2e00:	bc 8b       	std	Y+20, r27	; 0x14
		Fourth_Digit = ((LocalNumber) - (LocalNumber % 1000)) / 1000;
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
    2e04:	9a 81       	ldd	r25, Y+2	; 0x02
    2e06:	ab 81       	ldd	r26, Y+3	; 0x03
    2e08:	bc 81       	ldd	r27, Y+4	; 0x04
    2e0a:	28 ee       	ldi	r18, 0xE8	; 232
    2e0c:	33 e0       	ldi	r19, 0x03	; 3
    2e0e:	40 e0       	ldi	r20, 0x00	; 0
    2e10:	50 e0       	ldi	r21, 0x00	; 0
    2e12:	bc 01       	movw	r22, r24
    2e14:	cd 01       	movw	r24, r26
    2e16:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	9c 01       	movw	r18, r24
    2e20:	ad 01       	movw	r20, r26
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	9a 81       	ldd	r25, Y+2	; 0x02
    2e26:	ab 81       	ldd	r26, Y+3	; 0x03
    2e28:	bc 81       	ldd	r27, Y+4	; 0x04
    2e2a:	82 1b       	sub	r24, r18
    2e2c:	93 0b       	sbc	r25, r19
    2e2e:	a4 0b       	sbc	r26, r20
    2e30:	b5 0b       	sbc	r27, r21
    2e32:	28 ee       	ldi	r18, 0xE8	; 232
    2e34:	33 e0       	ldi	r19, 0x03	; 3
    2e36:	40 e0       	ldi	r20, 0x00	; 0
    2e38:	50 e0       	ldi	r21, 0x00	; 0
    2e3a:	bc 01       	movw	r22, r24
    2e3c:	cd 01       	movw	r24, r26
    2e3e:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2e42:	da 01       	movw	r26, r20
    2e44:	c9 01       	movw	r24, r18
    2e46:	8d 87       	std	Y+13, r24	; 0x0d
    2e48:	9e 87       	std	Y+14, r25	; 0x0e
    2e4a:	af 87       	std	Y+15, r26	; 0x0f
    2e4c:	b8 8b       	std	Y+16, r27	; 0x10
		LCD_voidWritecChar4(Fourth_Digit + 0x30);
    2e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e50:	80 5d       	subi	r24, 0xD0	; 208
    2e52:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
		LCD_voidWritecChar4(Third_Digit + 0x30);
    2e56:	89 89       	ldd	r24, Y+17	; 0x11
    2e58:	80 5d       	subi	r24, 0xD0	; 208
    2e5a:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
		LCD_voidWritecChar4(Second_Digit + 0x30);
    2e5e:	8d 89       	ldd	r24, Y+21	; 0x15
    2e60:	80 5d       	subi	r24, 0xD0	; 208
    2e62:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
		LCD_voidWritecChar4(First_Digit + 0x30);
    2e66:	89 8d       	ldd	r24, Y+25	; 0x19
    2e68:	80 5d       	subi	r24, 0xD0	; 208
    2e6a:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
    2e6e:	3d c2       	rjmp	.+1146   	; 0x32ea <LCD_voidWriteNumber+0x8a6>
	}
	else if(LocalNumber >=10000 && LocalNumber < 100000){
    2e70:	89 81       	ldd	r24, Y+1	; 0x01
    2e72:	9a 81       	ldd	r25, Y+2	; 0x02
    2e74:	ab 81       	ldd	r26, Y+3	; 0x03
    2e76:	bc 81       	ldd	r27, Y+4	; 0x04
    2e78:	80 31       	cpi	r24, 0x10	; 16
    2e7a:	37 e2       	ldi	r19, 0x27	; 39
    2e7c:	93 07       	cpc	r25, r19
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	a3 07       	cpc	r26, r19
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	b3 07       	cpc	r27, r19
    2e86:	0c f4       	brge	.+2      	; 0x2e8a <LCD_voidWriteNumber+0x446>
    2e88:	f6 c0       	rjmp	.+492    	; 0x3076 <LCD_voidWriteNumber+0x632>
    2e8a:	89 81       	ldd	r24, Y+1	; 0x01
    2e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e8e:	ab 81       	ldd	r26, Y+3	; 0x03
    2e90:	bc 81       	ldd	r27, Y+4	; 0x04
    2e92:	80 3a       	cpi	r24, 0xA0	; 160
    2e94:	46 e8       	ldi	r20, 0x86	; 134
    2e96:	94 07       	cpc	r25, r20
    2e98:	41 e0       	ldi	r20, 0x01	; 1
    2e9a:	a4 07       	cpc	r26, r20
    2e9c:	40 e0       	ldi	r20, 0x00	; 0
    2e9e:	b4 07       	cpc	r27, r20
    2ea0:	0c f0       	brlt	.+2      	; 0x2ea4 <LCD_voidWriteNumber+0x460>
    2ea2:	e9 c0       	rjmp	.+466    	; 0x3076 <LCD_voidWriteNumber+0x632>
		First_Digit  = (LocalNumber % 10);
    2ea4:	89 81       	ldd	r24, Y+1	; 0x01
    2ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea8:	ab 81       	ldd	r26, Y+3	; 0x03
    2eaa:	bc 81       	ldd	r27, Y+4	; 0x04
    2eac:	2a e0       	ldi	r18, 0x0A	; 10
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	40 e0       	ldi	r20, 0x00	; 0
    2eb2:	50 e0       	ldi	r21, 0x00	; 0
    2eb4:	bc 01       	movw	r22, r24
    2eb6:	cd 01       	movw	r24, r26
    2eb8:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	89 8f       	std	Y+25, r24	; 0x19
    2ec2:	9a 8f       	std	Y+26, r25	; 0x1a
    2ec4:	ab 8f       	std	Y+27, r26	; 0x1b
    2ec6:	bc 8f       	std	Y+28, r27	; 0x1c
		Second_Digit = ((LocalNumber % 100) - (LocalNumber % 10)) / 10;
    2ec8:	89 81       	ldd	r24, Y+1	; 0x01
    2eca:	9a 81       	ldd	r25, Y+2	; 0x02
    2ecc:	ab 81       	ldd	r26, Y+3	; 0x03
    2ece:	bc 81       	ldd	r27, Y+4	; 0x04
    2ed0:	24 e6       	ldi	r18, 0x64	; 100
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	40 e0       	ldi	r20, 0x00	; 0
    2ed6:	50 e0       	ldi	r21, 0x00	; 0
    2ed8:	bc 01       	movw	r22, r24
    2eda:	cd 01       	movw	r24, r26
    2edc:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	7c 01       	movw	r14, r24
    2ee6:	8d 01       	movw	r16, r26
    2ee8:	89 81       	ldd	r24, Y+1	; 0x01
    2eea:	9a 81       	ldd	r25, Y+2	; 0x02
    2eec:	ab 81       	ldd	r26, Y+3	; 0x03
    2eee:	bc 81       	ldd	r27, Y+4	; 0x04
    2ef0:	2a e0       	ldi	r18, 0x0A	; 10
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	40 e0       	ldi	r20, 0x00	; 0
    2ef6:	50 e0       	ldi	r21, 0x00	; 0
    2ef8:	bc 01       	movw	r22, r24
    2efa:	cd 01       	movw	r24, r26
    2efc:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	a8 01       	movw	r20, r16
    2f06:	97 01       	movw	r18, r14
    2f08:	28 1b       	sub	r18, r24
    2f0a:	39 0b       	sbc	r19, r25
    2f0c:	4a 0b       	sbc	r20, r26
    2f0e:	5b 0b       	sbc	r21, r27
    2f10:	da 01       	movw	r26, r20
    2f12:	c9 01       	movw	r24, r18
    2f14:	2a e0       	ldi	r18, 0x0A	; 10
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	40 e0       	ldi	r20, 0x00	; 0
    2f1a:	50 e0       	ldi	r21, 0x00	; 0
    2f1c:	bc 01       	movw	r22, r24
    2f1e:	cd 01       	movw	r24, r26
    2f20:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2f24:	da 01       	movw	r26, r20
    2f26:	c9 01       	movw	r24, r18
    2f28:	8d 8b       	std	Y+21, r24	; 0x15
    2f2a:	9e 8b       	std	Y+22, r25	; 0x16
    2f2c:	af 8b       	std	Y+23, r26	; 0x17
    2f2e:	b8 8f       	std	Y+24, r27	; 0x18
		Third_Digit  = ((LocalNumber % 1000) - (LocalNumber % 100)) / 100;
    2f30:	89 81       	ldd	r24, Y+1	; 0x01
    2f32:	9a 81       	ldd	r25, Y+2	; 0x02
    2f34:	ab 81       	ldd	r26, Y+3	; 0x03
    2f36:	bc 81       	ldd	r27, Y+4	; 0x04
    2f38:	28 ee       	ldi	r18, 0xE8	; 232
    2f3a:	33 e0       	ldi	r19, 0x03	; 3
    2f3c:	40 e0       	ldi	r20, 0x00	; 0
    2f3e:	50 e0       	ldi	r21, 0x00	; 0
    2f40:	bc 01       	movw	r22, r24
    2f42:	cd 01       	movw	r24, r26
    2f44:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	7c 01       	movw	r14, r24
    2f4e:	8d 01       	movw	r16, r26
    2f50:	89 81       	ldd	r24, Y+1	; 0x01
    2f52:	9a 81       	ldd	r25, Y+2	; 0x02
    2f54:	ab 81       	ldd	r26, Y+3	; 0x03
    2f56:	bc 81       	ldd	r27, Y+4	; 0x04
    2f58:	24 e6       	ldi	r18, 0x64	; 100
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	40 e0       	ldi	r20, 0x00	; 0
    2f5e:	50 e0       	ldi	r21, 0x00	; 0
    2f60:	bc 01       	movw	r22, r24
    2f62:	cd 01       	movw	r24, r26
    2f64:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	a8 01       	movw	r20, r16
    2f6e:	97 01       	movw	r18, r14
    2f70:	28 1b       	sub	r18, r24
    2f72:	39 0b       	sbc	r19, r25
    2f74:	4a 0b       	sbc	r20, r26
    2f76:	5b 0b       	sbc	r21, r27
    2f78:	da 01       	movw	r26, r20
    2f7a:	c9 01       	movw	r24, r18
    2f7c:	24 e6       	ldi	r18, 0x64	; 100
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e0       	ldi	r20, 0x00	; 0
    2f82:	50 e0       	ldi	r21, 0x00	; 0
    2f84:	bc 01       	movw	r22, r24
    2f86:	cd 01       	movw	r24, r26
    2f88:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2f8c:	da 01       	movw	r26, r20
    2f8e:	c9 01       	movw	r24, r18
    2f90:	89 8b       	std	Y+17, r24	; 0x11
    2f92:	9a 8b       	std	Y+18, r25	; 0x12
    2f94:	ab 8b       	std	Y+19, r26	; 0x13
    2f96:	bc 8b       	std	Y+20, r27	; 0x14
		Fourth_Digit = ((LocalNumber % 10000) - (LocalNumber % 1000)) / 1000;
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f9c:	ab 81       	ldd	r26, Y+3	; 0x03
    2f9e:	bc 81       	ldd	r27, Y+4	; 0x04
    2fa0:	20 e1       	ldi	r18, 0x10	; 16
    2fa2:	37 e2       	ldi	r19, 0x27	; 39
    2fa4:	40 e0       	ldi	r20, 0x00	; 0
    2fa6:	50 e0       	ldi	r21, 0x00	; 0
    2fa8:	bc 01       	movw	r22, r24
    2faa:	cd 01       	movw	r24, r26
    2fac:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	7c 01       	movw	r14, r24
    2fb6:	8d 01       	movw	r16, r26
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
    2fba:	9a 81       	ldd	r25, Y+2	; 0x02
    2fbc:	ab 81       	ldd	r26, Y+3	; 0x03
    2fbe:	bc 81       	ldd	r27, Y+4	; 0x04
    2fc0:	28 ee       	ldi	r18, 0xE8	; 232
    2fc2:	33 e0       	ldi	r19, 0x03	; 3
    2fc4:	40 e0       	ldi	r20, 0x00	; 0
    2fc6:	50 e0       	ldi	r21, 0x00	; 0
    2fc8:	bc 01       	movw	r22, r24
    2fca:	cd 01       	movw	r24, r26
    2fcc:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	a8 01       	movw	r20, r16
    2fd6:	97 01       	movw	r18, r14
    2fd8:	28 1b       	sub	r18, r24
    2fda:	39 0b       	sbc	r19, r25
    2fdc:	4a 0b       	sbc	r20, r26
    2fde:	5b 0b       	sbc	r21, r27
    2fe0:	da 01       	movw	r26, r20
    2fe2:	c9 01       	movw	r24, r18
    2fe4:	28 ee       	ldi	r18, 0xE8	; 232
    2fe6:	33 e0       	ldi	r19, 0x03	; 3
    2fe8:	40 e0       	ldi	r20, 0x00	; 0
    2fea:	50 e0       	ldi	r21, 0x00	; 0
    2fec:	bc 01       	movw	r22, r24
    2fee:	cd 01       	movw	r24, r26
    2ff0:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    2ff4:	da 01       	movw	r26, r20
    2ff6:	c9 01       	movw	r24, r18
    2ff8:	8d 87       	std	Y+13, r24	; 0x0d
    2ffa:	9e 87       	std	Y+14, r25	; 0x0e
    2ffc:	af 87       	std	Y+15, r26	; 0x0f
    2ffe:	b8 8b       	std	Y+16, r27	; 0x10
		Fifth_Digit  = ((LocalNumber) - (LocalNumber % 10000)) / 10000;
    3000:	89 81       	ldd	r24, Y+1	; 0x01
    3002:	9a 81       	ldd	r25, Y+2	; 0x02
    3004:	ab 81       	ldd	r26, Y+3	; 0x03
    3006:	bc 81       	ldd	r27, Y+4	; 0x04
    3008:	20 e1       	ldi	r18, 0x10	; 16
    300a:	37 e2       	ldi	r19, 0x27	; 39
    300c:	40 e0       	ldi	r20, 0x00	; 0
    300e:	50 e0       	ldi	r21, 0x00	; 0
    3010:	bc 01       	movw	r22, r24
    3012:	cd 01       	movw	r24, r26
    3014:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	9c 01       	movw	r18, r24
    301e:	ad 01       	movw	r20, r26
    3020:	89 81       	ldd	r24, Y+1	; 0x01
    3022:	9a 81       	ldd	r25, Y+2	; 0x02
    3024:	ab 81       	ldd	r26, Y+3	; 0x03
    3026:	bc 81       	ldd	r27, Y+4	; 0x04
    3028:	82 1b       	sub	r24, r18
    302a:	93 0b       	sbc	r25, r19
    302c:	a4 0b       	sbc	r26, r20
    302e:	b5 0b       	sbc	r27, r21
    3030:	20 e1       	ldi	r18, 0x10	; 16
    3032:	37 e2       	ldi	r19, 0x27	; 39
    3034:	40 e0       	ldi	r20, 0x00	; 0
    3036:	50 e0       	ldi	r21, 0x00	; 0
    3038:	bc 01       	movw	r22, r24
    303a:	cd 01       	movw	r24, r26
    303c:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    3040:	da 01       	movw	r26, r20
    3042:	c9 01       	movw	r24, r18
    3044:	89 87       	std	Y+9, r24	; 0x09
    3046:	9a 87       	std	Y+10, r25	; 0x0a
    3048:	ab 87       	std	Y+11, r26	; 0x0b
    304a:	bc 87       	std	Y+12, r27	; 0x0c
		LCD_voidWritecChar4(Fifth_Digit + 0x30);
    304c:	89 85       	ldd	r24, Y+9	; 0x09
    304e:	80 5d       	subi	r24, 0xD0	; 208
    3050:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
		LCD_voidWritecChar4(Fourth_Digit + 0x30);
    3054:	8d 85       	ldd	r24, Y+13	; 0x0d
    3056:	80 5d       	subi	r24, 0xD0	; 208
    3058:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
		LCD_voidWritecChar4(Third_Digit + 0x30);
    305c:	89 89       	ldd	r24, Y+17	; 0x11
    305e:	80 5d       	subi	r24, 0xD0	; 208
    3060:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
		LCD_voidWritecChar4(Second_Digit + 0x30);
    3064:	8d 89       	ldd	r24, Y+21	; 0x15
    3066:	80 5d       	subi	r24, 0xD0	; 208
    3068:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
		LCD_voidWritecChar4(First_Digit + 0x30);
    306c:	89 8d       	ldd	r24, Y+25	; 0x19
    306e:	80 5d       	subi	r24, 0xD0	; 208
    3070:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
    3074:	3a c1       	rjmp	.+628    	; 0x32ea <LCD_voidWriteNumber+0x8a6>
	}
	else if(LocalNumber >=100000 && LocalNumber < 1000000){
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	9a 81       	ldd	r25, Y+2	; 0x02
    307a:	ab 81       	ldd	r26, Y+3	; 0x03
    307c:	bc 81       	ldd	r27, Y+4	; 0x04
    307e:	80 3a       	cpi	r24, 0xA0	; 160
    3080:	36 e8       	ldi	r19, 0x86	; 134
    3082:	93 07       	cpc	r25, r19
    3084:	31 e0       	ldi	r19, 0x01	; 1
    3086:	a3 07       	cpc	r26, r19
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	b3 07       	cpc	r27, r19
    308c:	0c f4       	brge	.+2      	; 0x3090 <LCD_voidWriteNumber+0x64c>
    308e:	2d c1       	rjmp	.+602    	; 0x32ea <LCD_voidWriteNumber+0x8a6>
    3090:	89 81       	ldd	r24, Y+1	; 0x01
    3092:	9a 81       	ldd	r25, Y+2	; 0x02
    3094:	ab 81       	ldd	r26, Y+3	; 0x03
    3096:	bc 81       	ldd	r27, Y+4	; 0x04
    3098:	80 34       	cpi	r24, 0x40	; 64
    309a:	42 e4       	ldi	r20, 0x42	; 66
    309c:	94 07       	cpc	r25, r20
    309e:	4f e0       	ldi	r20, 0x0F	; 15
    30a0:	a4 07       	cpc	r26, r20
    30a2:	40 e0       	ldi	r20, 0x00	; 0
    30a4:	b4 07       	cpc	r27, r20
    30a6:	0c f0       	brlt	.+2      	; 0x30aa <LCD_voidWriteNumber+0x666>
    30a8:	20 c1       	rjmp	.+576    	; 0x32ea <LCD_voidWriteNumber+0x8a6>
		First_Digit  = (LocalNumber % 10);
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	9a 81       	ldd	r25, Y+2	; 0x02
    30ae:	ab 81       	ldd	r26, Y+3	; 0x03
    30b0:	bc 81       	ldd	r27, Y+4	; 0x04
    30b2:	2a e0       	ldi	r18, 0x0A	; 10
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	40 e0       	ldi	r20, 0x00	; 0
    30b8:	50 e0       	ldi	r21, 0x00	; 0
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	89 8f       	std	Y+25, r24	; 0x19
    30c8:	9a 8f       	std	Y+26, r25	; 0x1a
    30ca:	ab 8f       	std	Y+27, r26	; 0x1b
    30cc:	bc 8f       	std	Y+28, r27	; 0x1c
		Second_Digit = ((LocalNumber % 100) - (LocalNumber % 10)) / 10;
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	9a 81       	ldd	r25, Y+2	; 0x02
    30d2:	ab 81       	ldd	r26, Y+3	; 0x03
    30d4:	bc 81       	ldd	r27, Y+4	; 0x04
    30d6:	24 e6       	ldi	r18, 0x64	; 100
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	40 e0       	ldi	r20, 0x00	; 0
    30dc:	50 e0       	ldi	r21, 0x00	; 0
    30de:	bc 01       	movw	r22, r24
    30e0:	cd 01       	movw	r24, r26
    30e2:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	7c 01       	movw	r14, r24
    30ec:	8d 01       	movw	r16, r26
    30ee:	89 81       	ldd	r24, Y+1	; 0x01
    30f0:	9a 81       	ldd	r25, Y+2	; 0x02
    30f2:	ab 81       	ldd	r26, Y+3	; 0x03
    30f4:	bc 81       	ldd	r27, Y+4	; 0x04
    30f6:	2a e0       	ldi	r18, 0x0A	; 10
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	40 e0       	ldi	r20, 0x00	; 0
    30fc:	50 e0       	ldi	r21, 0x00	; 0
    30fe:	bc 01       	movw	r22, r24
    3100:	cd 01       	movw	r24, r26
    3102:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	a8 01       	movw	r20, r16
    310c:	97 01       	movw	r18, r14
    310e:	28 1b       	sub	r18, r24
    3110:	39 0b       	sbc	r19, r25
    3112:	4a 0b       	sbc	r20, r26
    3114:	5b 0b       	sbc	r21, r27
    3116:	da 01       	movw	r26, r20
    3118:	c9 01       	movw	r24, r18
    311a:	2a e0       	ldi	r18, 0x0A	; 10
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	40 e0       	ldi	r20, 0x00	; 0
    3120:	50 e0       	ldi	r21, 0x00	; 0
    3122:	bc 01       	movw	r22, r24
    3124:	cd 01       	movw	r24, r26
    3126:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    312a:	da 01       	movw	r26, r20
    312c:	c9 01       	movw	r24, r18
    312e:	8d 8b       	std	Y+21, r24	; 0x15
    3130:	9e 8b       	std	Y+22, r25	; 0x16
    3132:	af 8b       	std	Y+23, r26	; 0x17
    3134:	b8 8f       	std	Y+24, r27	; 0x18
		Third_Digit  = ((LocalNumber % 1000) - (LocalNumber % 100)) / 100;
    3136:	89 81       	ldd	r24, Y+1	; 0x01
    3138:	9a 81       	ldd	r25, Y+2	; 0x02
    313a:	ab 81       	ldd	r26, Y+3	; 0x03
    313c:	bc 81       	ldd	r27, Y+4	; 0x04
    313e:	28 ee       	ldi	r18, 0xE8	; 232
    3140:	33 e0       	ldi	r19, 0x03	; 3
    3142:	40 e0       	ldi	r20, 0x00	; 0
    3144:	50 e0       	ldi	r21, 0x00	; 0
    3146:	bc 01       	movw	r22, r24
    3148:	cd 01       	movw	r24, r26
    314a:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	7c 01       	movw	r14, r24
    3154:	8d 01       	movw	r16, r26
    3156:	89 81       	ldd	r24, Y+1	; 0x01
    3158:	9a 81       	ldd	r25, Y+2	; 0x02
    315a:	ab 81       	ldd	r26, Y+3	; 0x03
    315c:	bc 81       	ldd	r27, Y+4	; 0x04
    315e:	24 e6       	ldi	r18, 0x64	; 100
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e0       	ldi	r20, 0x00	; 0
    3164:	50 e0       	ldi	r21, 0x00	; 0
    3166:	bc 01       	movw	r22, r24
    3168:	cd 01       	movw	r24, r26
    316a:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    316e:	dc 01       	movw	r26, r24
    3170:	cb 01       	movw	r24, r22
    3172:	a8 01       	movw	r20, r16
    3174:	97 01       	movw	r18, r14
    3176:	28 1b       	sub	r18, r24
    3178:	39 0b       	sbc	r19, r25
    317a:	4a 0b       	sbc	r20, r26
    317c:	5b 0b       	sbc	r21, r27
    317e:	da 01       	movw	r26, r20
    3180:	c9 01       	movw	r24, r18
    3182:	24 e6       	ldi	r18, 0x64	; 100
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	40 e0       	ldi	r20, 0x00	; 0
    3188:	50 e0       	ldi	r21, 0x00	; 0
    318a:	bc 01       	movw	r22, r24
    318c:	cd 01       	movw	r24, r26
    318e:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    3192:	da 01       	movw	r26, r20
    3194:	c9 01       	movw	r24, r18
    3196:	89 8b       	std	Y+17, r24	; 0x11
    3198:	9a 8b       	std	Y+18, r25	; 0x12
    319a:	ab 8b       	std	Y+19, r26	; 0x13
    319c:	bc 8b       	std	Y+20, r27	; 0x14
		Fourth_Digit = ((LocalNumber % 10000) - (LocalNumber % 1000)) / 1000;
    319e:	89 81       	ldd	r24, Y+1	; 0x01
    31a0:	9a 81       	ldd	r25, Y+2	; 0x02
    31a2:	ab 81       	ldd	r26, Y+3	; 0x03
    31a4:	bc 81       	ldd	r27, Y+4	; 0x04
    31a6:	20 e1       	ldi	r18, 0x10	; 16
    31a8:	37 e2       	ldi	r19, 0x27	; 39
    31aa:	40 e0       	ldi	r20, 0x00	; 0
    31ac:	50 e0       	ldi	r21, 0x00	; 0
    31ae:	bc 01       	movw	r22, r24
    31b0:	cd 01       	movw	r24, r26
    31b2:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	7c 01       	movw	r14, r24
    31bc:	8d 01       	movw	r16, r26
    31be:	89 81       	ldd	r24, Y+1	; 0x01
    31c0:	9a 81       	ldd	r25, Y+2	; 0x02
    31c2:	ab 81       	ldd	r26, Y+3	; 0x03
    31c4:	bc 81       	ldd	r27, Y+4	; 0x04
    31c6:	28 ee       	ldi	r18, 0xE8	; 232
    31c8:	33 e0       	ldi	r19, 0x03	; 3
    31ca:	40 e0       	ldi	r20, 0x00	; 0
    31cc:	50 e0       	ldi	r21, 0x00	; 0
    31ce:	bc 01       	movw	r22, r24
    31d0:	cd 01       	movw	r24, r26
    31d2:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	a8 01       	movw	r20, r16
    31dc:	97 01       	movw	r18, r14
    31de:	28 1b       	sub	r18, r24
    31e0:	39 0b       	sbc	r19, r25
    31e2:	4a 0b       	sbc	r20, r26
    31e4:	5b 0b       	sbc	r21, r27
    31e6:	da 01       	movw	r26, r20
    31e8:	c9 01       	movw	r24, r18
    31ea:	28 ee       	ldi	r18, 0xE8	; 232
    31ec:	33 e0       	ldi	r19, 0x03	; 3
    31ee:	40 e0       	ldi	r20, 0x00	; 0
    31f0:	50 e0       	ldi	r21, 0x00	; 0
    31f2:	bc 01       	movw	r22, r24
    31f4:	cd 01       	movw	r24, r26
    31f6:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    31fa:	da 01       	movw	r26, r20
    31fc:	c9 01       	movw	r24, r18
    31fe:	8d 87       	std	Y+13, r24	; 0x0d
    3200:	9e 87       	std	Y+14, r25	; 0x0e
    3202:	af 87       	std	Y+15, r26	; 0x0f
    3204:	b8 8b       	std	Y+16, r27	; 0x10
		Fifth_Digit  = ((LocalNumber % 100000) - (LocalNumber % 10000)) / 10000;
    3206:	89 81       	ldd	r24, Y+1	; 0x01
    3208:	9a 81       	ldd	r25, Y+2	; 0x02
    320a:	ab 81       	ldd	r26, Y+3	; 0x03
    320c:	bc 81       	ldd	r27, Y+4	; 0x04
    320e:	20 ea       	ldi	r18, 0xA0	; 160
    3210:	36 e8       	ldi	r19, 0x86	; 134
    3212:	41 e0       	ldi	r20, 0x01	; 1
    3214:	50 e0       	ldi	r21, 0x00	; 0
    3216:	bc 01       	movw	r22, r24
    3218:	cd 01       	movw	r24, r26
    321a:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    321e:	dc 01       	movw	r26, r24
    3220:	cb 01       	movw	r24, r22
    3222:	7c 01       	movw	r14, r24
    3224:	8d 01       	movw	r16, r26
    3226:	89 81       	ldd	r24, Y+1	; 0x01
    3228:	9a 81       	ldd	r25, Y+2	; 0x02
    322a:	ab 81       	ldd	r26, Y+3	; 0x03
    322c:	bc 81       	ldd	r27, Y+4	; 0x04
    322e:	20 e1       	ldi	r18, 0x10	; 16
    3230:	37 e2       	ldi	r19, 0x27	; 39
    3232:	40 e0       	ldi	r20, 0x00	; 0
    3234:	50 e0       	ldi	r21, 0x00	; 0
    3236:	bc 01       	movw	r22, r24
    3238:	cd 01       	movw	r24, r26
    323a:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	a8 01       	movw	r20, r16
    3244:	97 01       	movw	r18, r14
    3246:	28 1b       	sub	r18, r24
    3248:	39 0b       	sbc	r19, r25
    324a:	4a 0b       	sbc	r20, r26
    324c:	5b 0b       	sbc	r21, r27
    324e:	da 01       	movw	r26, r20
    3250:	c9 01       	movw	r24, r18
    3252:	20 e1       	ldi	r18, 0x10	; 16
    3254:	37 e2       	ldi	r19, 0x27	; 39
    3256:	40 e0       	ldi	r20, 0x00	; 0
    3258:	50 e0       	ldi	r21, 0x00	; 0
    325a:	bc 01       	movw	r22, r24
    325c:	cd 01       	movw	r24, r26
    325e:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    3262:	da 01       	movw	r26, r20
    3264:	c9 01       	movw	r24, r18
    3266:	89 87       	std	Y+9, r24	; 0x09
    3268:	9a 87       	std	Y+10, r25	; 0x0a
    326a:	ab 87       	std	Y+11, r26	; 0x0b
    326c:	bc 87       	std	Y+12, r27	; 0x0c
		Six_Digit    = ((LocalNumber) - (LocalNumber % 100000)) / 100000;
    326e:	89 81       	ldd	r24, Y+1	; 0x01
    3270:	9a 81       	ldd	r25, Y+2	; 0x02
    3272:	ab 81       	ldd	r26, Y+3	; 0x03
    3274:	bc 81       	ldd	r27, Y+4	; 0x04
    3276:	20 ea       	ldi	r18, 0xA0	; 160
    3278:	36 e8       	ldi	r19, 0x86	; 134
    327a:	41 e0       	ldi	r20, 0x01	; 1
    327c:	50 e0       	ldi	r21, 0x00	; 0
    327e:	bc 01       	movw	r22, r24
    3280:	cd 01       	movw	r24, r26
    3282:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	9c 01       	movw	r18, r24
    328c:	ad 01       	movw	r20, r26
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	9a 81       	ldd	r25, Y+2	; 0x02
    3292:	ab 81       	ldd	r26, Y+3	; 0x03
    3294:	bc 81       	ldd	r27, Y+4	; 0x04
    3296:	82 1b       	sub	r24, r18
    3298:	93 0b       	sbc	r25, r19
    329a:	a4 0b       	sbc	r26, r20
    329c:	b5 0b       	sbc	r27, r21
    329e:	20 ea       	ldi	r18, 0xA0	; 160
    32a0:	36 e8       	ldi	r19, 0x86	; 134
    32a2:	41 e0       	ldi	r20, 0x01	; 1
    32a4:	50 e0       	ldi	r21, 0x00	; 0
    32a6:	bc 01       	movw	r22, r24
    32a8:	cd 01       	movw	r24, r26
    32aa:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__divmodsi4>
    32ae:	da 01       	movw	r26, r20
    32b0:	c9 01       	movw	r24, r18
    32b2:	8d 83       	std	Y+5, r24	; 0x05
    32b4:	9e 83       	std	Y+6, r25	; 0x06
    32b6:	af 83       	std	Y+7, r26	; 0x07
    32b8:	b8 87       	std	Y+8, r27	; 0x08
		LCD_voidWritecChar4(Six_Digit + 0x30);
    32ba:	8d 81       	ldd	r24, Y+5	; 0x05
    32bc:	80 5d       	subi	r24, 0xD0	; 208
    32be:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
		LCD_voidWritecChar4(Fifth_Digit + 0x30);
    32c2:	89 85       	ldd	r24, Y+9	; 0x09
    32c4:	80 5d       	subi	r24, 0xD0	; 208
    32c6:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
		LCD_voidWritecChar4(Fourth_Digit + 0x30);
    32ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    32cc:	80 5d       	subi	r24, 0xD0	; 208
    32ce:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
		LCD_voidWritecChar4(Third_Digit + 0x30);
    32d2:	89 89       	ldd	r24, Y+17	; 0x11
    32d4:	80 5d       	subi	r24, 0xD0	; 208
    32d6:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
		LCD_voidWritecChar4(Second_Digit + 0x30);
    32da:	8d 89       	ldd	r24, Y+21	; 0x15
    32dc:	80 5d       	subi	r24, 0xD0	; 208
    32de:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
		LCD_voidWritecChar4(First_Digit + 0x30);
    32e2:	89 8d       	ldd	r24, Y+25	; 0x19
    32e4:	80 5d       	subi	r24, 0xD0	; 208
    32e6:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
	}
}
    32ea:	a0 96       	adiw	r28, 0x20	; 32
    32ec:	0f b6       	in	r0, 0x3f	; 63
    32ee:	f8 94       	cli
    32f0:	de bf       	out	0x3e, r29	; 62
    32f2:	0f be       	out	0x3f, r0	; 63
    32f4:	cd bf       	out	0x3d, r28	; 61
    32f6:	cf 91       	pop	r28
    32f8:	df 91       	pop	r29
    32fa:	1f 91       	pop	r17
    32fc:	0f 91       	pop	r16
    32fe:	ff 90       	pop	r15
    3300:	ef 90       	pop	r14
    3302:	08 95       	ret

00003304 <RTC_voidInitialization>:
#include "STD_TYPES.h"
#include "TWI_interface.h"
#include "RTC_interface.h"

void RTC_voidInitialization(void)
{
    3304:	df 93       	push	r29
    3306:	cf 93       	push	r28
    3308:	cd b7       	in	r28, 0x3d	; 61
    330a:	de b7       	in	r29, 0x3e	; 62
	/* INITIALIZE TWI MODULE AS A MASTER */
    TWI_voidMasterInitialization();
    330c:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <TWI_voidMasterInitialization>

    /* TRANSMIT START COMMUNICATION */
    TWI_SendStartCondition();
    3310:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <TWI_SendStartCondition>

    /* CONNECT TO RTC MODULE BY SENDING IT'S ID THE BUS */
    TWI_SendSlaveAddressWithWrite(RTC_WriteMode);        // Connect to DS1307 by sending its ID on I2c Bus
    3314:	80 ed       	ldi	r24, 0xD0	; 208
    3316:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <TWI_SendSlaveAddressWithWrite>
    TWI_MasterWriteDataByte(RTC_ControlRegAddress);// Select the Ds1307 ControlRegister to configure Ds1307
    331a:	87 e0       	ldi	r24, 0x07	; 7
    331c:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <TWI_MasterWriteDataByte>

    TWI_MasterWriteDataByte(0x00);                        // Write 0x00 to Control register to disable SQW-Out
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <TWI_MasterWriteDataByte>

	TWI_SendStopCondition();                             // Stop I2C communication after initializing DS1307
    3326:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <TWI_SendStopCondition>
}
    332a:	cf 91       	pop	r28
    332c:	df 91       	pop	r29
    332e:	08 95       	ret

00003330 <RTC_SetDateTime>:
void RTC_SetDateTime(E_RTC *rtc)
{
    3330:	df 93       	push	r29
    3332:	cf 93       	push	r28
    3334:	00 d0       	rcall	.+0      	; 0x3336 <RTC_SetDateTime+0x6>
    3336:	cd b7       	in	r28, 0x3d	; 61
    3338:	de b7       	in	r29, 0x3e	; 62
    333a:	9a 83       	std	Y+2, r25	; 0x02
    333c:	89 83       	std	Y+1, r24	; 0x01
	TWI_SendStartCondition();                          // Start I2C communication
    333e:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <TWI_SendStartCondition>

    TWI_SendSlaveAddressWithWrite(RTC_WriteMode);      // connect to DS1307 by sending its ID on I2c Bus
    3342:	80 ed       	ldi	r24, 0xD0	; 208
    3344:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <TWI_SendSlaveAddressWithWrite>
    TWI_MasterWriteDataByte(RTC_SecondRegAddress); // Request sec RAM address at 00H
    3348:	80 e0       	ldi	r24, 0x00	; 0
    334a:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <TWI_MasterWriteDataByte>
    TWI_MasterWriteDataByte(((rtc->RTC_u8Second/10)<<4) + (rtc->RTC_u8Second%10));                    // Write sec from RAM address 00H
    334e:	e9 81       	ldd	r30, Y+1	; 0x01
    3350:	fa 81       	ldd	r31, Y+2	; 0x02
    3352:	80 81       	ld	r24, Z
    3354:	9a e0       	ldi	r25, 0x0A	; 10
    3356:	69 2f       	mov	r22, r25
    3358:	0e 94 3d 32 	call	0x647a	; 0x647a <__udivmodqi4>
    335c:	28 2f       	mov	r18, r24
    335e:	22 95       	swap	r18
    3360:	20 7f       	andi	r18, 0xF0	; 240
    3362:	e9 81       	ldd	r30, Y+1	; 0x01
    3364:	fa 81       	ldd	r31, Y+2	; 0x02
    3366:	80 81       	ld	r24, Z
    3368:	9a e0       	ldi	r25, 0x0A	; 10
    336a:	69 2f       	mov	r22, r25
    336c:	0e 94 3d 32 	call	0x647a	; 0x647a <__udivmodqi4>
    3370:	89 2f       	mov	r24, r25
    3372:	82 0f       	add	r24, r18
    3374:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <TWI_MasterWriteDataByte>
    TWI_MasterWriteDataByte(((rtc->RTC_u8Minute/10)<<4) + (rtc->RTC_u8Minute%10));                    // Write min from RAM address 01H
    3378:	e9 81       	ldd	r30, Y+1	; 0x01
    337a:	fa 81       	ldd	r31, Y+2	; 0x02
    337c:	81 81       	ldd	r24, Z+1	; 0x01
    337e:	9a e0       	ldi	r25, 0x0A	; 10
    3380:	69 2f       	mov	r22, r25
    3382:	0e 94 3d 32 	call	0x647a	; 0x647a <__udivmodqi4>
    3386:	28 2f       	mov	r18, r24
    3388:	22 95       	swap	r18
    338a:	20 7f       	andi	r18, 0xF0	; 240
    338c:	e9 81       	ldd	r30, Y+1	; 0x01
    338e:	fa 81       	ldd	r31, Y+2	; 0x02
    3390:	81 81       	ldd	r24, Z+1	; 0x01
    3392:	9a e0       	ldi	r25, 0x0A	; 10
    3394:	69 2f       	mov	r22, r25
    3396:	0e 94 3d 32 	call	0x647a	; 0x647a <__udivmodqi4>
    339a:	89 2f       	mov	r24, r25
    339c:	82 0f       	add	r24, r18
    339e:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <TWI_MasterWriteDataByte>
    TWI_MasterWriteDataByte(((rtc->RTC_u8Hour/10)<<4) + (rtc->RTC_u8Hour%10));              // Write hour from RAM address 02H
    33a2:	e9 81       	ldd	r30, Y+1	; 0x01
    33a4:	fa 81       	ldd	r31, Y+2	; 0x02
    33a6:	82 81       	ldd	r24, Z+2	; 0x02
    33a8:	9a e0       	ldi	r25, 0x0A	; 10
    33aa:	69 2f       	mov	r22, r25
    33ac:	0e 94 3d 32 	call	0x647a	; 0x647a <__udivmodqi4>
    33b0:	28 2f       	mov	r18, r24
    33b2:	22 95       	swap	r18
    33b4:	20 7f       	andi	r18, 0xF0	; 240
    33b6:	e9 81       	ldd	r30, Y+1	; 0x01
    33b8:	fa 81       	ldd	r31, Y+2	; 0x02
    33ba:	82 81       	ldd	r24, Z+2	; 0x02
    33bc:	9a e0       	ldi	r25, 0x0A	; 10
    33be:	69 2f       	mov	r22, r25
    33c0:	0e 94 3d 32 	call	0x647a	; 0x647a <__udivmodqi4>
    33c4:	89 2f       	mov	r24, r25
    33c6:	82 0f       	add	r24, r18
    33c8:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <TWI_MasterWriteDataByte>
    TWI_MasterWriteDataByte(((rtc->RTC_u8Weekday/10)<<4) + (rtc->RTC_u8Weekday%10));                // Write weekDay on RAM address 03H
    33cc:	e9 81       	ldd	r30, Y+1	; 0x01
    33ce:	fa 81       	ldd	r31, Y+2	; 0x02
    33d0:	83 81       	ldd	r24, Z+3	; 0x03
    33d2:	9a e0       	ldi	r25, 0x0A	; 10
    33d4:	69 2f       	mov	r22, r25
    33d6:	0e 94 3d 32 	call	0x647a	; 0x647a <__udivmodqi4>
    33da:	28 2f       	mov	r18, r24
    33dc:	22 95       	swap	r18
    33de:	20 7f       	andi	r18, 0xF0	; 240
    33e0:	e9 81       	ldd	r30, Y+1	; 0x01
    33e2:	fa 81       	ldd	r31, Y+2	; 0x02
    33e4:	83 81       	ldd	r24, Z+3	; 0x03
    33e6:	9a e0       	ldi	r25, 0x0A	; 10
    33e8:	69 2f       	mov	r22, r25
    33ea:	0e 94 3d 32 	call	0x647a	; 0x647a <__udivmodqi4>
    33ee:	89 2f       	mov	r24, r25
    33f0:	82 0f       	add	r24, r18
    33f2:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <TWI_MasterWriteDataByte>
    TWI_MasterWriteDataByte(((rtc->RTC_u8Date/10)<<4) + (rtc->RTC_u8Date%10)) ;                   // Write date on RAM address 04H
    33f6:	e9 81       	ldd	r30, Y+1	; 0x01
    33f8:	fa 81       	ldd	r31, Y+2	; 0x02
    33fa:	84 81       	ldd	r24, Z+4	; 0x04
    33fc:	9a e0       	ldi	r25, 0x0A	; 10
    33fe:	69 2f       	mov	r22, r25
    3400:	0e 94 3d 32 	call	0x647a	; 0x647a <__udivmodqi4>
    3404:	28 2f       	mov	r18, r24
    3406:	22 95       	swap	r18
    3408:	20 7f       	andi	r18, 0xF0	; 240
    340a:	e9 81       	ldd	r30, Y+1	; 0x01
    340c:	fa 81       	ldd	r31, Y+2	; 0x02
    340e:	84 81       	ldd	r24, Z+4	; 0x04
    3410:	9a e0       	ldi	r25, 0x0A	; 10
    3412:	69 2f       	mov	r22, r25
    3414:	0e 94 3d 32 	call	0x647a	; 0x647a <__udivmodqi4>
    3418:	89 2f       	mov	r24, r25
    341a:	82 0f       	add	r24, r18
    341c:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <TWI_MasterWriteDataByte>
    TWI_MasterWriteDataByte(((rtc->RTC_u8Month/10)<<4) + (rtc->RTC_u8Month%10));                    // Write month on RAM address 05H
    3420:	e9 81       	ldd	r30, Y+1	; 0x01
    3422:	fa 81       	ldd	r31, Y+2	; 0x02
    3424:	85 81       	ldd	r24, Z+5	; 0x05
    3426:	9a e0       	ldi	r25, 0x0A	; 10
    3428:	69 2f       	mov	r22, r25
    342a:	0e 94 3d 32 	call	0x647a	; 0x647a <__udivmodqi4>
    342e:	28 2f       	mov	r18, r24
    3430:	22 95       	swap	r18
    3432:	20 7f       	andi	r18, 0xF0	; 240
    3434:	e9 81       	ldd	r30, Y+1	; 0x01
    3436:	fa 81       	ldd	r31, Y+2	; 0x02
    3438:	85 81       	ldd	r24, Z+5	; 0x05
    343a:	9a e0       	ldi	r25, 0x0A	; 10
    343c:	69 2f       	mov	r22, r25
    343e:	0e 94 3d 32 	call	0x647a	; 0x647a <__udivmodqi4>
    3442:	89 2f       	mov	r24, r25
    3444:	82 0f       	add	r24, r18
    3446:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <TWI_MasterWriteDataByte>
    TWI_MasterWriteDataByte(((rtc->RTC_u8Year/10)<<4) + (rtc->RTC_u8Year%10));             // Write year on RAM address 06h
    344a:	e9 81       	ldd	r30, Y+1	; 0x01
    344c:	fa 81       	ldd	r31, Y+2	; 0x02
    344e:	86 81       	ldd	r24, Z+6	; 0x06
    3450:	9a e0       	ldi	r25, 0x0A	; 10
    3452:	69 2f       	mov	r22, r25
    3454:	0e 94 3d 32 	call	0x647a	; 0x647a <__udivmodqi4>
    3458:	28 2f       	mov	r18, r24
    345a:	22 95       	swap	r18
    345c:	20 7f       	andi	r18, 0xF0	; 240
    345e:	e9 81       	ldd	r30, Y+1	; 0x01
    3460:	fa 81       	ldd	r31, Y+2	; 0x02
    3462:	86 81       	ldd	r24, Z+6	; 0x06
    3464:	9a e0       	ldi	r25, 0x0A	; 10
    3466:	69 2f       	mov	r22, r25
    3468:	0e 94 3d 32 	call	0x647a	; 0x647a <__udivmodqi4>
    346c:	89 2f       	mov	r24, r25
    346e:	82 0f       	add	r24, r18
    3470:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <TWI_MasterWriteDataByte>

    TWI_SendStopCondition();                              // Stop I2C communication after Setting the Date
    3474:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <TWI_SendStopCondition>
}
    3478:	0f 90       	pop	r0
    347a:	0f 90       	pop	r0
    347c:	cf 91       	pop	r28
    347e:	df 91       	pop	r29
    3480:	08 95       	ret

00003482 <RTC_GetDateTime>:
void RTC_GetDateTime(E_RTC *rtc)
{
    3482:	df 93       	push	r29
    3484:	cf 93       	push	r28
    3486:	00 d0       	rcall	.+0      	; 0x3488 <RTC_GetDateTime+0x6>
    3488:	cd b7       	in	r28, 0x3d	; 61
    348a:	de b7       	in	r29, 0x3e	; 62
    348c:	9a 83       	std	Y+2, r25	; 0x02
    348e:	89 83       	std	Y+1, r24	; 0x01
	TWI_SendStartCondition();                            // Start I2C communication
    3490:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <TWI_SendStartCondition>

	TWI_SendSlaveAddressWithWrite(RTC_WriteMode);        // connect to DS1307 by sending its ID on I2c Bus
    3494:	80 ed       	ldi	r24, 0xD0	; 208
    3496:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <TWI_SendSlaveAddressWithWrite>
	TWI_MasterWriteDataByte(RTC_SecondRegAddress); // Request Sec RAM address at 00H
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <TWI_MasterWriteDataByte>

	TWI_SendStopCondition();                                // Stop I2C communication after selecting Sec Register
    34a0:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <TWI_SendStopCondition>

	TWI_SendStartCondition();                            // Start I2C communication
    34a4:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <TWI_SendStartCondition>
	TWI_SendSlaveAddressWithRead(RTC_WriteMode);            // connect to DS1307(Read mode) by sending its ID
    34a8:	80 ed       	ldi	r24, 0xD0	; 208
    34aa:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <TWI_SendSlaveAddressWithRead>

    rtc->RTC_u8Second = TWI_MasterReadDataByte_ACK();// read second and return Positive ACK
    34ae:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <TWI_MasterReadDataByte_ACK>
    34b2:	e9 81       	ldd	r30, Y+1	; 0x01
    34b4:	fa 81       	ldd	r31, Y+2	; 0x02
    34b6:	80 83       	st	Z, r24
    rtc->RTC_u8Minute = TWI_MasterReadDataByte_ACK();                 // read minute and return Positive ACK
    34b8:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <TWI_MasterReadDataByte_ACK>
    34bc:	e9 81       	ldd	r30, Y+1	; 0x01
    34be:	fa 81       	ldd	r31, Y+2	; 0x02
    34c0:	81 83       	std	Z+1, r24	; 0x01
    rtc->RTC_u8Hour= TWI_MasterReadDataByte_ACK();               // read hour and return Negative/No ACK
    34c2:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <TWI_MasterReadDataByte_ACK>
    34c6:	e9 81       	ldd	r30, Y+1	; 0x01
    34c8:	fa 81       	ldd	r31, Y+2	; 0x02
    34ca:	82 83       	std	Z+2, r24	; 0x02
    rtc->RTC_u8Weekday = TWI_MasterReadDataByte_ACK();           // read weekDay and return Positive ACK
    34cc:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <TWI_MasterReadDataByte_ACK>
    34d0:	e9 81       	ldd	r30, Y+1	; 0x01
    34d2:	fa 81       	ldd	r31, Y+2	; 0x02
    34d4:	83 83       	std	Z+3, r24	; 0x03
    rtc->RTC_u8Date= TWI_MasterReadDataByte_ACK();              // read Date and return Positive ACK
    34d6:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <TWI_MasterReadDataByte_ACK>
    34da:	e9 81       	ldd	r30, Y+1	; 0x01
    34dc:	fa 81       	ldd	r31, Y+2	; 0x02
    34de:	84 83       	std	Z+4, r24	; 0x04
    rtc->RTC_u8Month=TWI_MasterReadDataByte_ACK();            // read Month and return Positive ACK
    34e0:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <TWI_MasterReadDataByte_ACK>
    34e4:	e9 81       	ldd	r30, Y+1	; 0x01
    34e6:	fa 81       	ldd	r31, Y+2	; 0x02
    34e8:	85 83       	std	Z+5, r24	; 0x05
    rtc->RTC_u8Year =TWI_MasterReadDataByte_NACK();             // read Year and return Negative/No ACK
    34ea:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <TWI_MasterReadDataByte_NACK>
    34ee:	e9 81       	ldd	r30, Y+1	; 0x01
    34f0:	fa 81       	ldd	r31, Y+2	; 0x02
    34f2:	86 83       	std	Z+6, r24	; 0x06
    TWI_SendStopCondition();         // Stop I2C communication after reading the Date
    34f4:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <TWI_SendStopCondition>
    rtc->RTC_u8Second=((rtc->RTC_u8Second& 0xF0) >> 4)*10 + (rtc->RTC_u8Second& 0x0F);
    34f8:	e9 81       	ldd	r30, Y+1	; 0x01
    34fa:	fa 81       	ldd	r31, Y+2	; 0x02
    34fc:	80 81       	ld	r24, Z
    34fe:	82 95       	swap	r24
    3500:	8f 70       	andi	r24, 0x0F	; 15
    3502:	88 2f       	mov	r24, r24
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	90 70       	andi	r25, 0x00	; 0
    3508:	9c 01       	movw	r18, r24
    350a:	22 0f       	add	r18, r18
    350c:	33 1f       	adc	r19, r19
    350e:	c9 01       	movw	r24, r18
    3510:	88 0f       	add	r24, r24
    3512:	99 1f       	adc	r25, r25
    3514:	88 0f       	add	r24, r24
    3516:	99 1f       	adc	r25, r25
    3518:	82 0f       	add	r24, r18
    351a:	93 1f       	adc	r25, r19
    351c:	98 2f       	mov	r25, r24
    351e:	e9 81       	ldd	r30, Y+1	; 0x01
    3520:	fa 81       	ldd	r31, Y+2	; 0x02
    3522:	80 81       	ld	r24, Z
    3524:	8f 70       	andi	r24, 0x0F	; 15
    3526:	89 0f       	add	r24, r25
    3528:	e9 81       	ldd	r30, Y+1	; 0x01
    352a:	fa 81       	ldd	r31, Y+2	; 0x02
    352c:	80 83       	st	Z, r24
    rtc->RTC_u8Minute=((rtc->RTC_u8Minute& 0xF0) >> 4)*10 + (rtc->RTC_u8Minute& 0x0F);
    352e:	e9 81       	ldd	r30, Y+1	; 0x01
    3530:	fa 81       	ldd	r31, Y+2	; 0x02
    3532:	81 81       	ldd	r24, Z+1	; 0x01
    3534:	82 95       	swap	r24
    3536:	8f 70       	andi	r24, 0x0F	; 15
    3538:	88 2f       	mov	r24, r24
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	90 70       	andi	r25, 0x00	; 0
    353e:	9c 01       	movw	r18, r24
    3540:	22 0f       	add	r18, r18
    3542:	33 1f       	adc	r19, r19
    3544:	c9 01       	movw	r24, r18
    3546:	88 0f       	add	r24, r24
    3548:	99 1f       	adc	r25, r25
    354a:	88 0f       	add	r24, r24
    354c:	99 1f       	adc	r25, r25
    354e:	82 0f       	add	r24, r18
    3550:	93 1f       	adc	r25, r19
    3552:	98 2f       	mov	r25, r24
    3554:	e9 81       	ldd	r30, Y+1	; 0x01
    3556:	fa 81       	ldd	r31, Y+2	; 0x02
    3558:	81 81       	ldd	r24, Z+1	; 0x01
    355a:	8f 70       	andi	r24, 0x0F	; 15
    355c:	89 0f       	add	r24, r25
    355e:	e9 81       	ldd	r30, Y+1	; 0x01
    3560:	fa 81       	ldd	r31, Y+2	; 0x02
    3562:	81 83       	std	Z+1, r24	; 0x01
    rtc->RTC_u8Hour=((rtc->RTC_u8Hour& 0xF0) >> 4)*10 + (rtc->RTC_u8Hour& 0x0F);
    3564:	e9 81       	ldd	r30, Y+1	; 0x01
    3566:	fa 81       	ldd	r31, Y+2	; 0x02
    3568:	82 81       	ldd	r24, Z+2	; 0x02
    356a:	82 95       	swap	r24
    356c:	8f 70       	andi	r24, 0x0F	; 15
    356e:	88 2f       	mov	r24, r24
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	90 70       	andi	r25, 0x00	; 0
    3574:	9c 01       	movw	r18, r24
    3576:	22 0f       	add	r18, r18
    3578:	33 1f       	adc	r19, r19
    357a:	c9 01       	movw	r24, r18
    357c:	88 0f       	add	r24, r24
    357e:	99 1f       	adc	r25, r25
    3580:	88 0f       	add	r24, r24
    3582:	99 1f       	adc	r25, r25
    3584:	82 0f       	add	r24, r18
    3586:	93 1f       	adc	r25, r19
    3588:	98 2f       	mov	r25, r24
    358a:	e9 81       	ldd	r30, Y+1	; 0x01
    358c:	fa 81       	ldd	r31, Y+2	; 0x02
    358e:	82 81       	ldd	r24, Z+2	; 0x02
    3590:	8f 70       	andi	r24, 0x0F	; 15
    3592:	89 0f       	add	r24, r25
    3594:	e9 81       	ldd	r30, Y+1	; 0x01
    3596:	fa 81       	ldd	r31, Y+2	; 0x02
    3598:	82 83       	std	Z+2, r24	; 0x02
    rtc->RTC_u8Weekday=((rtc->RTC_u8Weekday& 0xF0) >> 4)*10 + (rtc->RTC_u8Weekday& 0x0F);
    359a:	e9 81       	ldd	r30, Y+1	; 0x01
    359c:	fa 81       	ldd	r31, Y+2	; 0x02
    359e:	83 81       	ldd	r24, Z+3	; 0x03
    35a0:	82 95       	swap	r24
    35a2:	8f 70       	andi	r24, 0x0F	; 15
    35a4:	88 2f       	mov	r24, r24
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	90 70       	andi	r25, 0x00	; 0
    35aa:	9c 01       	movw	r18, r24
    35ac:	22 0f       	add	r18, r18
    35ae:	33 1f       	adc	r19, r19
    35b0:	c9 01       	movw	r24, r18
    35b2:	88 0f       	add	r24, r24
    35b4:	99 1f       	adc	r25, r25
    35b6:	88 0f       	add	r24, r24
    35b8:	99 1f       	adc	r25, r25
    35ba:	82 0f       	add	r24, r18
    35bc:	93 1f       	adc	r25, r19
    35be:	98 2f       	mov	r25, r24
    35c0:	e9 81       	ldd	r30, Y+1	; 0x01
    35c2:	fa 81       	ldd	r31, Y+2	; 0x02
    35c4:	83 81       	ldd	r24, Z+3	; 0x03
    35c6:	8f 70       	andi	r24, 0x0F	; 15
    35c8:	89 0f       	add	r24, r25
    35ca:	e9 81       	ldd	r30, Y+1	; 0x01
    35cc:	fa 81       	ldd	r31, Y+2	; 0x02
    35ce:	83 83       	std	Z+3, r24	; 0x03
    rtc->RTC_u8Date=((rtc->RTC_u8Date& 0xF0) >> 4)*10 + (rtc->RTC_u8Date& 0x0F);
    35d0:	e9 81       	ldd	r30, Y+1	; 0x01
    35d2:	fa 81       	ldd	r31, Y+2	; 0x02
    35d4:	84 81       	ldd	r24, Z+4	; 0x04
    35d6:	82 95       	swap	r24
    35d8:	8f 70       	andi	r24, 0x0F	; 15
    35da:	88 2f       	mov	r24, r24
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	90 70       	andi	r25, 0x00	; 0
    35e0:	9c 01       	movw	r18, r24
    35e2:	22 0f       	add	r18, r18
    35e4:	33 1f       	adc	r19, r19
    35e6:	c9 01       	movw	r24, r18
    35e8:	88 0f       	add	r24, r24
    35ea:	99 1f       	adc	r25, r25
    35ec:	88 0f       	add	r24, r24
    35ee:	99 1f       	adc	r25, r25
    35f0:	82 0f       	add	r24, r18
    35f2:	93 1f       	adc	r25, r19
    35f4:	98 2f       	mov	r25, r24
    35f6:	e9 81       	ldd	r30, Y+1	; 0x01
    35f8:	fa 81       	ldd	r31, Y+2	; 0x02
    35fa:	84 81       	ldd	r24, Z+4	; 0x04
    35fc:	8f 70       	andi	r24, 0x0F	; 15
    35fe:	89 0f       	add	r24, r25
    3600:	e9 81       	ldd	r30, Y+1	; 0x01
    3602:	fa 81       	ldd	r31, Y+2	; 0x02
    3604:	84 83       	std	Z+4, r24	; 0x04
    rtc->RTC_u8Month=((rtc->RTC_u8Month& 0xF0) >> 4)*10 + (rtc->RTC_u8Month& 0x0F);
    3606:	e9 81       	ldd	r30, Y+1	; 0x01
    3608:	fa 81       	ldd	r31, Y+2	; 0x02
    360a:	85 81       	ldd	r24, Z+5	; 0x05
    360c:	82 95       	swap	r24
    360e:	8f 70       	andi	r24, 0x0F	; 15
    3610:	88 2f       	mov	r24, r24
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	90 70       	andi	r25, 0x00	; 0
    3616:	9c 01       	movw	r18, r24
    3618:	22 0f       	add	r18, r18
    361a:	33 1f       	adc	r19, r19
    361c:	c9 01       	movw	r24, r18
    361e:	88 0f       	add	r24, r24
    3620:	99 1f       	adc	r25, r25
    3622:	88 0f       	add	r24, r24
    3624:	99 1f       	adc	r25, r25
    3626:	82 0f       	add	r24, r18
    3628:	93 1f       	adc	r25, r19
    362a:	98 2f       	mov	r25, r24
    362c:	e9 81       	ldd	r30, Y+1	; 0x01
    362e:	fa 81       	ldd	r31, Y+2	; 0x02
    3630:	85 81       	ldd	r24, Z+5	; 0x05
    3632:	8f 70       	andi	r24, 0x0F	; 15
    3634:	89 0f       	add	r24, r25
    3636:	e9 81       	ldd	r30, Y+1	; 0x01
    3638:	fa 81       	ldd	r31, Y+2	; 0x02
    363a:	85 83       	std	Z+5, r24	; 0x05
    rtc->RTC_u8Year=((rtc->RTC_u8Year& 0xF0) >> 4)*10 + (rtc->RTC_u8Year& 0x0F);
    363c:	e9 81       	ldd	r30, Y+1	; 0x01
    363e:	fa 81       	ldd	r31, Y+2	; 0x02
    3640:	86 81       	ldd	r24, Z+6	; 0x06
    3642:	82 95       	swap	r24
    3644:	8f 70       	andi	r24, 0x0F	; 15
    3646:	88 2f       	mov	r24, r24
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	90 70       	andi	r25, 0x00	; 0
    364c:	9c 01       	movw	r18, r24
    364e:	22 0f       	add	r18, r18
    3650:	33 1f       	adc	r19, r19
    3652:	c9 01       	movw	r24, r18
    3654:	88 0f       	add	r24, r24
    3656:	99 1f       	adc	r25, r25
    3658:	88 0f       	add	r24, r24
    365a:	99 1f       	adc	r25, r25
    365c:	82 0f       	add	r24, r18
    365e:	93 1f       	adc	r25, r19
    3660:	98 2f       	mov	r25, r24
    3662:	e9 81       	ldd	r30, Y+1	; 0x01
    3664:	fa 81       	ldd	r31, Y+2	; 0x02
    3666:	86 81       	ldd	r24, Z+6	; 0x06
    3668:	8f 70       	andi	r24, 0x0F	; 15
    366a:	89 0f       	add	r24, r25
    366c:	e9 81       	ldd	r30, Y+1	; 0x01
    366e:	fa 81       	ldd	r31, Y+2	; 0x02
    3670:	86 83       	std	Z+6, r24	; 0x06

}
    3672:	0f 90       	pop	r0
    3674:	0f 90       	pop	r0
    3676:	cf 91       	pop	r28
    3678:	df 91       	pop	r29
    367a:	08 95       	ret

0000367c <TIMER0_voidInitialization>:
#endif

void (*(TIMER0_CompareMatchCallBack_PF))(void) = NULL;
void (*(TIMER0_OverFlowCallBack_PF))(void) = NULL;

void TIMER0_voidInitialization(){
    367c:	df 93       	push	r29
    367e:	cf 93       	push	r28
    3680:	cd b7       	in	r28, 0x3d	; 61
    3682:	de b7       	in	r29, 0x3e	; 62
			SET_BIT(TCCRO ,TCCR0_COM01);
		#else
			#error 	"WRONG CHOICE OF TIMER0 CTC COMPARE OUTPUT MODE!"
		#endif
	#elif 	TIMER0_WAVEFORM_GENERATION_MODE == FAST_PWM_MODE
		SET_BIT(TCCRO ,TCCR0_WGM00);
    3684:	a3 e5       	ldi	r26, 0x53	; 83
    3686:	b0 e0       	ldi	r27, 0x00	; 0
    3688:	e3 e5       	ldi	r30, 0x53	; 83
    368a:	f0 e0       	ldi	r31, 0x00	; 0
    368c:	80 81       	ld	r24, Z
    368e:	80 64       	ori	r24, 0x40	; 64
    3690:	8c 93       	st	X, r24
		SET_BIT(TCCRO ,TCCR0_WGM01);
    3692:	a3 e5       	ldi	r26, 0x53	; 83
    3694:	b0 e0       	ldi	r27, 0x00	; 0
    3696:	e3 e5       	ldi	r30, 0x53	; 83
    3698:	f0 e0       	ldi	r31, 0x00	; 0
    369a:	80 81       	ld	r24, Z
    369c:	88 60       	ori	r24, 0x08	; 8
    369e:	8c 93       	st	X, r24
			CLR_BIT(TCCRO ,TCCR0_COM01);
		#elif TIMER0_COMPARE_OUTPUT_MODE == RESERVED
			SET_BIT(TCCRO ,TCCR0_COM00);
			CLR_BIT(TCCRO ,TCCR0_COM01);
		#elif TIMER0_COMPARE_OUTPUT_MODE == NON_INVERTING_MODE
			CLR_BIT(TCCRO ,TCCR0_COM00);
    36a0:	a3 e5       	ldi	r26, 0x53	; 83
    36a2:	b0 e0       	ldi	r27, 0x00	; 0
    36a4:	e3 e5       	ldi	r30, 0x53	; 83
    36a6:	f0 e0       	ldi	r31, 0x00	; 0
    36a8:	80 81       	ld	r24, Z
    36aa:	8f 7e       	andi	r24, 0xEF	; 239
    36ac:	8c 93       	st	X, r24
			SET_BIT(TCCRO ,TCCR0_COM01);
    36ae:	a3 e5       	ldi	r26, 0x53	; 83
    36b0:	b0 e0       	ldi	r27, 0x00	; 0
    36b2:	e3 e5       	ldi	r30, 0x53	; 83
    36b4:	f0 e0       	ldi	r31, 0x00	; 0
    36b6:	80 81       	ld	r24, Z
    36b8:	80 62       	ori	r24, 0x20	; 32
    36ba:	8c 93       	st	X, r24
	#elif 	TIMER0_Prescaller == CLKIO256_FROM_PRESCALLER
		CLR_BIT(TCCRO ,TCCR0_CS00);
		CLR_BIT(TCCRO ,TCCR0_CS01);
		SET_BIT(TCCRO ,TCCR0_CS02);
	#elif 	TIMER0_Prescaller == CLKIO1024_FROM_PRESCALLER
		SET_BIT(TCCRO ,TCCR0_CS00);
    36bc:	a3 e5       	ldi	r26, 0x53	; 83
    36be:	b0 e0       	ldi	r27, 0x00	; 0
    36c0:	e3 e5       	ldi	r30, 0x53	; 83
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	80 81       	ld	r24, Z
    36c6:	81 60       	ori	r24, 0x01	; 1
    36c8:	8c 93       	st	X, r24
		CLR_BIT(TCCRO ,TCCR0_CS01);
    36ca:	a3 e5       	ldi	r26, 0x53	; 83
    36cc:	b0 e0       	ldi	r27, 0x00	; 0
    36ce:	e3 e5       	ldi	r30, 0x53	; 83
    36d0:	f0 e0       	ldi	r31, 0x00	; 0
    36d2:	80 81       	ld	r24, Z
    36d4:	8d 7f       	andi	r24, 0xFD	; 253
    36d6:	8c 93       	st	X, r24
		SET_BIT(TCCRO ,TCCR0_CS02);
    36d8:	a3 e5       	ldi	r26, 0x53	; 83
    36da:	b0 e0       	ldi	r27, 0x00	; 0
    36dc:	e3 e5       	ldi	r30, 0x53	; 83
    36de:	f0 e0       	ldi	r31, 0x00	; 0
    36e0:	80 81       	ld	r24, Z
    36e2:	84 60       	ori	r24, 0x04	; 4
    36e4:	8c 93       	st	X, r24
		SET_BIT(TCCRO ,TCCR0_CS01);
		SET_BIT(TCCRO ,TCCR0_CS02);
	#else
		#error 	"Wrong Choice of TIMER0 Prescaller!"
	#endif
}
    36e6:	cf 91       	pop	r28
    36e8:	df 91       	pop	r29
    36ea:	08 95       	ret

000036ec <TIMER0_voidOverFlowInterruptEnable>:

void TIMER0_voidOverFlowInterruptEnable(void){
    36ec:	df 93       	push	r29
    36ee:	cf 93       	push	r28
    36f0:	cd b7       	in	r28, 0x3d	; 61
    36f2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK ,TIMSK_TOIE0);
    36f4:	a9 e5       	ldi	r26, 0x59	; 89
    36f6:	b0 e0       	ldi	r27, 0x00	; 0
    36f8:	e9 e5       	ldi	r30, 0x59	; 89
    36fa:	f0 e0       	ldi	r31, 0x00	; 0
    36fc:	80 81       	ld	r24, Z
    36fe:	81 60       	ori	r24, 0x01	; 1
    3700:	8c 93       	st	X, r24
}
    3702:	cf 91       	pop	r28
    3704:	df 91       	pop	r29
    3706:	08 95       	ret

00003708 <TIMER0_voidOverFlowInterruptDisable>:


void TIMER0_voidOverFlowInterruptDisable(void){
    3708:	df 93       	push	r29
    370a:	cf 93       	push	r28
    370c:	cd b7       	in	r28, 0x3d	; 61
    370e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK ,TIMSK_TOIE0);
    3710:	a9 e5       	ldi	r26, 0x59	; 89
    3712:	b0 e0       	ldi	r27, 0x00	; 0
    3714:	e9 e5       	ldi	r30, 0x59	; 89
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	80 81       	ld	r24, Z
    371a:	8e 7f       	andi	r24, 0xFE	; 254
    371c:	8c 93       	st	X, r24
}
    371e:	cf 91       	pop	r28
    3720:	df 91       	pop	r29
    3722:	08 95       	ret

00003724 <TIMER0_voidCompareMatchInterruptEnable>:

void TIMER0_voidCompareMatchInterruptEnable(void){
    3724:	df 93       	push	r29
    3726:	cf 93       	push	r28
    3728:	cd b7       	in	r28, 0x3d	; 61
    372a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK ,TIMSK_OCIE0);
    372c:	a9 e5       	ldi	r26, 0x59	; 89
    372e:	b0 e0       	ldi	r27, 0x00	; 0
    3730:	e9 e5       	ldi	r30, 0x59	; 89
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	80 81       	ld	r24, Z
    3736:	82 60       	ori	r24, 0x02	; 2
    3738:	8c 93       	st	X, r24
}
    373a:	cf 91       	pop	r28
    373c:	df 91       	pop	r29
    373e:	08 95       	ret

00003740 <TIMER0_voidCompareMatchInterruptDisable>:


void TIMER0_voidCompareMatchInterruptDisable(void){
    3740:	df 93       	push	r29
    3742:	cf 93       	push	r28
    3744:	cd b7       	in	r28, 0x3d	; 61
    3746:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK ,TIMSK_OCIE0);
    3748:	a9 e5       	ldi	r26, 0x59	; 89
    374a:	b0 e0       	ldi	r27, 0x00	; 0
    374c:	e9 e5       	ldi	r30, 0x59	; 89
    374e:	f0 e0       	ldi	r31, 0x00	; 0
    3750:	80 81       	ld	r24, Z
    3752:	8d 7f       	andi	r24, 0xFD	; 253
    3754:	8c 93       	st	X, r24
}
    3756:	cf 91       	pop	r28
    3758:	df 91       	pop	r29
    375a:	08 95       	ret

0000375c <TIMER0_voidSetTCNT0>:

void TIMER0_voidSetTCNT0(u8 val){
    375c:	df 93       	push	r29
    375e:	cf 93       	push	r28
    3760:	0f 92       	push	r0
    3762:	cd b7       	in	r28, 0x3d	; 61
    3764:	de b7       	in	r29, 0x3e	; 62
    3766:	89 83       	std	Y+1, r24	; 0x01
	TCNTO = val;
    3768:	e2 e5       	ldi	r30, 0x52	; 82
    376a:	f0 e0       	ldi	r31, 0x00	; 0
    376c:	89 81       	ldd	r24, Y+1	; 0x01
    376e:	80 83       	st	Z, r24
}
    3770:	0f 90       	pop	r0
    3772:	cf 91       	pop	r28
    3774:	df 91       	pop	r29
    3776:	08 95       	ret

00003778 <TIMER0_voidSetOCR0>:

void TIMER0_voidSetOCR0(u8 val){
    3778:	df 93       	push	r29
    377a:	cf 93       	push	r28
    377c:	0f 92       	push	r0
    377e:	cd b7       	in	r28, 0x3d	; 61
    3780:	de b7       	in	r29, 0x3e	; 62
    3782:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = val;
    3784:	ec e5       	ldi	r30, 0x5C	; 92
    3786:	f0 e0       	ldi	r31, 0x00	; 0
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	80 83       	st	Z, r24
}
    378c:	0f 90       	pop	r0
    378e:	cf 91       	pop	r28
    3790:	df 91       	pop	r29
    3792:	08 95       	ret

00003794 <TIMER0_voidSetCallBackCompareMatch>:

void TIMER0_voidSetCallBackCompareMatch(void (*Copy_PF)(void)){
    3794:	df 93       	push	r29
    3796:	cf 93       	push	r28
    3798:	00 d0       	rcall	.+0      	; 0x379a <TIMER0_voidSetCallBackCompareMatch+0x6>
    379a:	cd b7       	in	r28, 0x3d	; 61
    379c:	de b7       	in	r29, 0x3e	; 62
    379e:	9a 83       	std	Y+2, r25	; 0x02
    37a0:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CompareMatchCallBack_PF = Copy_PF;
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
    37a4:	9a 81       	ldd	r25, Y+2	; 0x02
    37a6:	90 93 9f 03 	sts	0x039F, r25
    37aa:	80 93 9e 03 	sts	0x039E, r24
}
    37ae:	0f 90       	pop	r0
    37b0:	0f 90       	pop	r0
    37b2:	cf 91       	pop	r28
    37b4:	df 91       	pop	r29
    37b6:	08 95       	ret

000037b8 <__vector_10>:

void __vector_10 (void) __attribute__((signal ,used));       //Timer/Counter0 Compare Match
void __vector_10(void){
    37b8:	1f 92       	push	r1
    37ba:	0f 92       	push	r0
    37bc:	0f b6       	in	r0, 0x3f	; 63
    37be:	0f 92       	push	r0
    37c0:	11 24       	eor	r1, r1
    37c2:	2f 93       	push	r18
    37c4:	3f 93       	push	r19
    37c6:	4f 93       	push	r20
    37c8:	5f 93       	push	r21
    37ca:	6f 93       	push	r22
    37cc:	7f 93       	push	r23
    37ce:	8f 93       	push	r24
    37d0:	9f 93       	push	r25
    37d2:	af 93       	push	r26
    37d4:	bf 93       	push	r27
    37d6:	ef 93       	push	r30
    37d8:	ff 93       	push	r31
    37da:	df 93       	push	r29
    37dc:	cf 93       	push	r28
    37de:	cd b7       	in	r28, 0x3d	; 61
    37e0:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CompareMatchCallBack_PF();
    37e2:	e0 91 9e 03 	lds	r30, 0x039E
    37e6:	f0 91 9f 03 	lds	r31, 0x039F
    37ea:	09 95       	icall
}
    37ec:	cf 91       	pop	r28
    37ee:	df 91       	pop	r29
    37f0:	ff 91       	pop	r31
    37f2:	ef 91       	pop	r30
    37f4:	bf 91       	pop	r27
    37f6:	af 91       	pop	r26
    37f8:	9f 91       	pop	r25
    37fa:	8f 91       	pop	r24
    37fc:	7f 91       	pop	r23
    37fe:	6f 91       	pop	r22
    3800:	5f 91       	pop	r21
    3802:	4f 91       	pop	r20
    3804:	3f 91       	pop	r19
    3806:	2f 91       	pop	r18
    3808:	0f 90       	pop	r0
    380a:	0f be       	out	0x3f, r0	; 63
    380c:	0f 90       	pop	r0
    380e:	1f 90       	pop	r1
    3810:	18 95       	reti

00003812 <TIMER0_voidSetCallBackOverFlow>:

void TIMER0_voidSetCallBackOverFlow(void (*Copy_PF)(void)){
    3812:	df 93       	push	r29
    3814:	cf 93       	push	r28
    3816:	00 d0       	rcall	.+0      	; 0x3818 <TIMER0_voidSetCallBackOverFlow+0x6>
    3818:	cd b7       	in	r28, 0x3d	; 61
    381a:	de b7       	in	r29, 0x3e	; 62
    381c:	9a 83       	std	Y+2, r25	; 0x02
    381e:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OverFlowCallBack_PF = Copy_PF;
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	9a 81       	ldd	r25, Y+2	; 0x02
    3824:	90 93 a1 03 	sts	0x03A1, r25
    3828:	80 93 a0 03 	sts	0x03A0, r24
}
    382c:	0f 90       	pop	r0
    382e:	0f 90       	pop	r0
    3830:	cf 91       	pop	r28
    3832:	df 91       	pop	r29
    3834:	08 95       	ret

00003836 <__vector_11>:

void __vector_11 (void) __attribute__((signal ,used));		//Timer/Counter0 Overflow
void __vector_11(void){
    3836:	1f 92       	push	r1
    3838:	0f 92       	push	r0
    383a:	0f b6       	in	r0, 0x3f	; 63
    383c:	0f 92       	push	r0
    383e:	11 24       	eor	r1, r1
    3840:	2f 93       	push	r18
    3842:	3f 93       	push	r19
    3844:	4f 93       	push	r20
    3846:	5f 93       	push	r21
    3848:	6f 93       	push	r22
    384a:	7f 93       	push	r23
    384c:	8f 93       	push	r24
    384e:	9f 93       	push	r25
    3850:	af 93       	push	r26
    3852:	bf 93       	push	r27
    3854:	ef 93       	push	r30
    3856:	ff 93       	push	r31
    3858:	df 93       	push	r29
    385a:	cf 93       	push	r28
    385c:	cd b7       	in	r28, 0x3d	; 61
    385e:	de b7       	in	r29, 0x3e	; 62
	TIMER0_OverFlowCallBack_PF();
    3860:	e0 91 a0 03 	lds	r30, 0x03A0
    3864:	f0 91 a1 03 	lds	r31, 0x03A1
    3868:	09 95       	icall
}
    386a:	cf 91       	pop	r28
    386c:	df 91       	pop	r29
    386e:	ff 91       	pop	r31
    3870:	ef 91       	pop	r30
    3872:	bf 91       	pop	r27
    3874:	af 91       	pop	r26
    3876:	9f 91       	pop	r25
    3878:	8f 91       	pop	r24
    387a:	7f 91       	pop	r23
    387c:	6f 91       	pop	r22
    387e:	5f 91       	pop	r21
    3880:	4f 91       	pop	r20
    3882:	3f 91       	pop	r19
    3884:	2f 91       	pop	r18
    3886:	0f 90       	pop	r0
    3888:	0f be       	out	0x3f, r0	; 63
    388a:	0f 90       	pop	r0
    388c:	1f 90       	pop	r1
    388e:	18 95       	reti

00003890 <TIMER1_voidInitialization>:
void (*(TIMER1_OCR1ACallBack_PF))(void) = NULL;
void (*(TIMER1_OCR1BCallBack_PF))(void) = NULL;
void (*(TIMER1_ICR1CallBack_PF))(void)  = NULL;

/******************** INITIALZE TIMER1 ********************/
void TIMER1_voidInitialization(){
    3890:	df 93       	push	r29
    3892:	cf 93       	push	r28
    3894:	cd b7       	in	r28, 0x3d	; 61
    3896:	de b7       	in	r29, 0x3e	; 62
			SET_BIT(TCCR1A ,TCCR1A_COM1B1);
		#else
			#error 	"WRONG CHOICE OF CTC ICR1 COMPARE OUTPUT MODE!"
		#endif
	#elif 	TIMER1_WAVEFORM_GENERATION_MODE == FAST_PWM_ICR1_MODE
		CLR_BIT(TCCR1A ,TCCR1A_WGM10);
    3898:	af e4       	ldi	r26, 0x4F	; 79
    389a:	b0 e0       	ldi	r27, 0x00	; 0
    389c:	ef e4       	ldi	r30, 0x4F	; 79
    389e:	f0 e0       	ldi	r31, 0x00	; 0
    38a0:	80 81       	ld	r24, Z
    38a2:	8e 7f       	andi	r24, 0xFE	; 254
    38a4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A ,TCCR1A_WGM11);
    38a6:	af e4       	ldi	r26, 0x4F	; 79
    38a8:	b0 e0       	ldi	r27, 0x00	; 0
    38aa:	ef e4       	ldi	r30, 0x4F	; 79
    38ac:	f0 e0       	ldi	r31, 0x00	; 0
    38ae:	80 81       	ld	r24, Z
    38b0:	82 60       	ori	r24, 0x02	; 2
    38b2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B ,TCCR1B_WGM12);
    38b4:	ae e4       	ldi	r26, 0x4E	; 78
    38b6:	b0 e0       	ldi	r27, 0x00	; 0
    38b8:	ee e4       	ldi	r30, 0x4E	; 78
    38ba:	f0 e0       	ldi	r31, 0x00	; 0
    38bc:	80 81       	ld	r24, Z
    38be:	88 60       	ori	r24, 0x08	; 8
    38c0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B ,TCCR1B_WGM13);
    38c2:	ae e4       	ldi	r26, 0x4E	; 78
    38c4:	b0 e0       	ldi	r27, 0x00	; 0
    38c6:	ee e4       	ldi	r30, 0x4E	; 78
    38c8:	f0 e0       	ldi	r31, 0x00	; 0
    38ca:	80 81       	ld	r24, Z
    38cc:	80 61       	ori	r24, 0x10	; 16
    38ce:	8c 93       	st	X, r24
			SET_BIT(TCCR1A ,TCCR1A_COM1A0);
			SET_BIT(TCCR1A ,TCCR1A_COM1B0);
			CLR_BIT(TCCR1A ,TCCR1A_COM1A1);
			CLR_BIT(TCCR1A ,TCCR1A_COM1B1);
		#elif TIMER1_COMPARE_OUTPUT_MODE == NON_INVERTING_MODE
			CLR_BIT(TCCR1A ,TCCR1A_COM1A0);
    38d0:	af e4       	ldi	r26, 0x4F	; 79
    38d2:	b0 e0       	ldi	r27, 0x00	; 0
    38d4:	ef e4       	ldi	r30, 0x4F	; 79
    38d6:	f0 e0       	ldi	r31, 0x00	; 0
    38d8:	80 81       	ld	r24, Z
    38da:	8f 7b       	andi	r24, 0xBF	; 191
    38dc:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A ,TCCR1A_COM1B0);
    38de:	af e4       	ldi	r26, 0x4F	; 79
    38e0:	b0 e0       	ldi	r27, 0x00	; 0
    38e2:	ef e4       	ldi	r30, 0x4F	; 79
    38e4:	f0 e0       	ldi	r31, 0x00	; 0
    38e6:	80 81       	ld	r24, Z
    38e8:	8f 7e       	andi	r24, 0xEF	; 239
    38ea:	8c 93       	st	X, r24
			SET_BIT(TCCR1A ,TCCR1A_COM1A1);
    38ec:	af e4       	ldi	r26, 0x4F	; 79
    38ee:	b0 e0       	ldi	r27, 0x00	; 0
    38f0:	ef e4       	ldi	r30, 0x4F	; 79
    38f2:	f0 e0       	ldi	r31, 0x00	; 0
    38f4:	80 81       	ld	r24, Z
    38f6:	80 68       	ori	r24, 0x80	; 128
    38f8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A ,TCCR1A_COM1B1);
    38fa:	af e4       	ldi	r26, 0x4F	; 79
    38fc:	b0 e0       	ldi	r27, 0x00	; 0
    38fe:	ef e4       	ldi	r30, 0x4F	; 79
    3900:	f0 e0       	ldi	r31, 0x00	; 0
    3902:	80 81       	ld	r24, Z
    3904:	80 62       	ori	r24, 0x20	; 32
    3906:	8c 93       	st	X, r24
	#elif 	TIMER0_Prescaller == CLKIO8_FROM_PRESCALLER
		CLR_BIT(TCCR1B ,TCCR1B_CS10);
		SET_BIT(TCCR1B ,TCCR1B_CS11);
		CLR_BIT(TCCR1B ,TCCR1B_CS12);
	#elif 	TIMER0_Prescaller == CLKIO64_FROM_PRESCALLER
		SET_BIT(TCCR1B ,TCCR1B_CS10);
    3908:	ae e4       	ldi	r26, 0x4E	; 78
    390a:	b0 e0       	ldi	r27, 0x00	; 0
    390c:	ee e4       	ldi	r30, 0x4E	; 78
    390e:	f0 e0       	ldi	r31, 0x00	; 0
    3910:	80 81       	ld	r24, Z
    3912:	81 60       	ori	r24, 0x01	; 1
    3914:	8c 93       	st	X, r24
		SET_BIT(TCCR1B ,TCCR1B_CS11);
    3916:	ae e4       	ldi	r26, 0x4E	; 78
    3918:	b0 e0       	ldi	r27, 0x00	; 0
    391a:	ee e4       	ldi	r30, 0x4E	; 78
    391c:	f0 e0       	ldi	r31, 0x00	; 0
    391e:	80 81       	ld	r24, Z
    3920:	82 60       	ori	r24, 0x02	; 2
    3922:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B ,TCCR1B_CS12);
    3924:	ae e4       	ldi	r26, 0x4E	; 78
    3926:	b0 e0       	ldi	r27, 0x00	; 0
    3928:	ee e4       	ldi	r30, 0x4E	; 78
    392a:	f0 e0       	ldi	r31, 0x00	; 0
    392c:	80 81       	ld	r24, Z
    392e:	8b 7f       	andi	r24, 0xFB	; 251
    3930:	8c 93       	st	X, r24
		SET_BIT(TCCR1B ,TCCR1B_CS11);
		SET_BIT(TCCR1B ,TCCR1B_CS12);
	#else
		#error 	"WRONG CHOICE OF TIMER1 PRESCALLER!"
	#endif
}
    3932:	cf 91       	pop	r28
    3934:	df 91       	pop	r29
    3936:	08 95       	ret

00003938 <TIMER1_voidOverFlowInterruptEnable>:

/******************** ENABLE TIMER1 OVERFLOW INTERRUPT *************/
void TIMER1_voidOverFlowInterruptEnable(void){
    3938:	df 93       	push	r29
    393a:	cf 93       	push	r28
    393c:	cd b7       	in	r28, 0x3d	; 61
    393e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK ,TIMSK_TOIE1);
    3940:	a9 e5       	ldi	r26, 0x59	; 89
    3942:	b0 e0       	ldi	r27, 0x00	; 0
    3944:	e9 e5       	ldi	r30, 0x59	; 89
    3946:	f0 e0       	ldi	r31, 0x00	; 0
    3948:	80 81       	ld	r24, Z
    394a:	84 60       	ori	r24, 0x04	; 4
    394c:	8c 93       	st	X, r24
}
    394e:	cf 91       	pop	r28
    3950:	df 91       	pop	r29
    3952:	08 95       	ret

00003954 <TIMER1_voidOverFlowInterruptDisable>:

/******************** DISABLE TIMER1 OVERFLOW INTERRUPT ************/
void TIMER1_voidOverFlowInterruptDisable(void){
    3954:	df 93       	push	r29
    3956:	cf 93       	push	r28
    3958:	cd b7       	in	r28, 0x3d	; 61
    395a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK ,TIMSK_TOIE1);
    395c:	a9 e5       	ldi	r26, 0x59	; 89
    395e:	b0 e0       	ldi	r27, 0x00	; 0
    3960:	e9 e5       	ldi	r30, 0x59	; 89
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	80 81       	ld	r24, Z
    3966:	8b 7f       	andi	r24, 0xFB	; 251
    3968:	8c 93       	st	X, r24
}
    396a:	cf 91       	pop	r28
    396c:	df 91       	pop	r29
    396e:	08 95       	ret

00003970 <TIMER1_voidCompare_B_MatchInterruptEnable>:

/******************** ENABLE TIMER1 COMPARE B MATCH INTERRUPT *************/
void TIMER1_voidCompare_B_MatchInterruptEnable(void){
    3970:	df 93       	push	r29
    3972:	cf 93       	push	r28
    3974:	cd b7       	in	r28, 0x3d	; 61
    3976:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK ,TIMSK_OCIE1B);
    3978:	a9 e5       	ldi	r26, 0x59	; 89
    397a:	b0 e0       	ldi	r27, 0x00	; 0
    397c:	e9 e5       	ldi	r30, 0x59	; 89
    397e:	f0 e0       	ldi	r31, 0x00	; 0
    3980:	80 81       	ld	r24, Z
    3982:	88 60       	ori	r24, 0x08	; 8
    3984:	8c 93       	st	X, r24
}
    3986:	cf 91       	pop	r28
    3988:	df 91       	pop	r29
    398a:	08 95       	ret

0000398c <TIMER1_voidCompare_B_MatchInterruptDisable>:

/******************** DISABLE TIMER1 COMPARE B MATCH INTERRUPT *************/
void TIMER1_voidCompare_B_MatchInterruptDisable(void){
    398c:	df 93       	push	r29
    398e:	cf 93       	push	r28
    3990:	cd b7       	in	r28, 0x3d	; 61
    3992:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK ,TIMSK_OCIE1B);
    3994:	a9 e5       	ldi	r26, 0x59	; 89
    3996:	b0 e0       	ldi	r27, 0x00	; 0
    3998:	e9 e5       	ldi	r30, 0x59	; 89
    399a:	f0 e0       	ldi	r31, 0x00	; 0
    399c:	80 81       	ld	r24, Z
    399e:	87 7f       	andi	r24, 0xF7	; 247
    39a0:	8c 93       	st	X, r24
}
    39a2:	cf 91       	pop	r28
    39a4:	df 91       	pop	r29
    39a6:	08 95       	ret

000039a8 <TIMER1_voidCompare_A_MatchInterruptEnable>:

/******************** ENABLE TIMER1 COMPARE A MATCH INTERRUPT *************/
void TIMER1_voidCompare_A_MatchInterruptEnable(void){
    39a8:	df 93       	push	r29
    39aa:	cf 93       	push	r28
    39ac:	cd b7       	in	r28, 0x3d	; 61
    39ae:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK ,TIMSK_OCIE1A);
    39b0:	a9 e5       	ldi	r26, 0x59	; 89
    39b2:	b0 e0       	ldi	r27, 0x00	; 0
    39b4:	e9 e5       	ldi	r30, 0x59	; 89
    39b6:	f0 e0       	ldi	r31, 0x00	; 0
    39b8:	80 81       	ld	r24, Z
    39ba:	80 61       	ori	r24, 0x10	; 16
    39bc:	8c 93       	st	X, r24
}
    39be:	cf 91       	pop	r28
    39c0:	df 91       	pop	r29
    39c2:	08 95       	ret

000039c4 <TIMER1_voidCompare_A_MatchInterruptDisable>:

/******************** DISABLE TIMER1 COMPARE A MATCH INTERRUPT *************/
void TIMER1_voidCompare_A_MatchInterruptDisable(void){
    39c4:	df 93       	push	r29
    39c6:	cf 93       	push	r28
    39c8:	cd b7       	in	r28, 0x3d	; 61
    39ca:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK ,TIMSK_OCIE1A);
    39cc:	a9 e5       	ldi	r26, 0x59	; 89
    39ce:	b0 e0       	ldi	r27, 0x00	; 0
    39d0:	e9 e5       	ldi	r30, 0x59	; 89
    39d2:	f0 e0       	ldi	r31, 0x00	; 0
    39d4:	80 81       	ld	r24, Z
    39d6:	8f 7e       	andi	r24, 0xEF	; 239
    39d8:	8c 93       	st	X, r24
}
    39da:	cf 91       	pop	r28
    39dc:	df 91       	pop	r29
    39de:	08 95       	ret

000039e0 <TIMER1_void_ICU_InterruptEnable>:

/******************** ENABLE TIMER1 INPUT CAPTURE UNIT *************/
void TIMER1_void_ICU_InterruptEnable(void){
    39e0:	df 93       	push	r29
    39e2:	cf 93       	push	r28
    39e4:	cd b7       	in	r28, 0x3d	; 61
    39e6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK ,TIMSK_TICIE1);
    39e8:	a9 e5       	ldi	r26, 0x59	; 89
    39ea:	b0 e0       	ldi	r27, 0x00	; 0
    39ec:	e9 e5       	ldi	r30, 0x59	; 89
    39ee:	f0 e0       	ldi	r31, 0x00	; 0
    39f0:	80 81       	ld	r24, Z
    39f2:	80 62       	ori	r24, 0x20	; 32
    39f4:	8c 93       	st	X, r24
}
    39f6:	cf 91       	pop	r28
    39f8:	df 91       	pop	r29
    39fa:	08 95       	ret

000039fc <TIMER1_void_ICU_InterruptDisable>:

/******************** DISABLE TIMER1 INPUT CAPTURE UNIT *************/
void TIMER1_void_ICU_InterruptDisable(void){
    39fc:	df 93       	push	r29
    39fe:	cf 93       	push	r28
    3a00:	cd b7       	in	r28, 0x3d	; 61
    3a02:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK ,TIMSK_TICIE1);
    3a04:	a9 e5       	ldi	r26, 0x59	; 89
    3a06:	b0 e0       	ldi	r27, 0x00	; 0
    3a08:	e9 e5       	ldi	r30, 0x59	; 89
    3a0a:	f0 e0       	ldi	r31, 0x00	; 0
    3a0c:	80 81       	ld	r24, Z
    3a0e:	8f 7d       	andi	r24, 0xDF	; 223
    3a10:	8c 93       	st	X, r24
}
    3a12:	cf 91       	pop	r28
    3a14:	df 91       	pop	r29
    3a16:	08 95       	ret

00003a18 <TIMER1_voidSetTCNT1>:

/******************** SET TCNT1 REGISTER  ********************/
void TIMER1_voidSetTCNT1(u16 val){
    3a18:	df 93       	push	r29
    3a1a:	cf 93       	push	r28
    3a1c:	00 d0       	rcall	.+0      	; 0x3a1e <TIMER1_voidSetTCNT1+0x6>
    3a1e:	cd b7       	in	r28, 0x3d	; 61
    3a20:	de b7       	in	r29, 0x3e	; 62
    3a22:	9a 83       	std	Y+2, r25	; 0x02
    3a24:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = val;
    3a26:	ec e4       	ldi	r30, 0x4C	; 76
    3a28:	f0 e0       	ldi	r31, 0x00	; 0
    3a2a:	89 81       	ldd	r24, Y+1	; 0x01
    3a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a2e:	91 83       	std	Z+1, r25	; 0x01
    3a30:	80 83       	st	Z, r24
}
    3a32:	0f 90       	pop	r0
    3a34:	0f 90       	pop	r0
    3a36:	cf 91       	pop	r28
    3a38:	df 91       	pop	r29
    3a3a:	08 95       	ret

00003a3c <TIMER1_voidSetOCR1A>:

/******************** SET OCR1A REGISTER  ********************/
void TIMER1_voidSetOCR1A(u16 val){
    3a3c:	df 93       	push	r29
    3a3e:	cf 93       	push	r28
    3a40:	00 d0       	rcall	.+0      	; 0x3a42 <TIMER1_voidSetOCR1A+0x6>
    3a42:	cd b7       	in	r28, 0x3d	; 61
    3a44:	de b7       	in	r29, 0x3e	; 62
    3a46:	9a 83       	std	Y+2, r25	; 0x02
    3a48:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = val;
    3a4a:	ea e4       	ldi	r30, 0x4A	; 74
    3a4c:	f0 e0       	ldi	r31, 0x00	; 0
    3a4e:	89 81       	ldd	r24, Y+1	; 0x01
    3a50:	9a 81       	ldd	r25, Y+2	; 0x02
    3a52:	91 83       	std	Z+1, r25	; 0x01
    3a54:	80 83       	st	Z, r24
}
    3a56:	0f 90       	pop	r0
    3a58:	0f 90       	pop	r0
    3a5a:	cf 91       	pop	r28
    3a5c:	df 91       	pop	r29
    3a5e:	08 95       	ret

00003a60 <TIMER1_voidSetOCR1B>:

/******************** SET OCR1B REGISTER  ********************/
void TIMER1_voidSetOCR1B(u16 val){
    3a60:	df 93       	push	r29
    3a62:	cf 93       	push	r28
    3a64:	00 d0       	rcall	.+0      	; 0x3a66 <TIMER1_voidSetOCR1B+0x6>
    3a66:	cd b7       	in	r28, 0x3d	; 61
    3a68:	de b7       	in	r29, 0x3e	; 62
    3a6a:	9a 83       	std	Y+2, r25	; 0x02
    3a6c:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = val;
    3a6e:	e8 e4       	ldi	r30, 0x48	; 72
    3a70:	f0 e0       	ldi	r31, 0x00	; 0
    3a72:	89 81       	ldd	r24, Y+1	; 0x01
    3a74:	9a 81       	ldd	r25, Y+2	; 0x02
    3a76:	91 83       	std	Z+1, r25	; 0x01
    3a78:	80 83       	st	Z, r24
}
    3a7a:	0f 90       	pop	r0
    3a7c:	0f 90       	pop	r0
    3a7e:	cf 91       	pop	r28
    3a80:	df 91       	pop	r29
    3a82:	08 95       	ret

00003a84 <TIMER1_u16SetICR1>:

/******************** SET ICR1 REGISTER *************/
void TIMER1_u16SetICR1(u16 val){
    3a84:	df 93       	push	r29
    3a86:	cf 93       	push	r28
    3a88:	00 d0       	rcall	.+0      	; 0x3a8a <TIMER1_u16SetICR1+0x6>
    3a8a:	cd b7       	in	r28, 0x3d	; 61
    3a8c:	de b7       	in	r29, 0x3e	; 62
    3a8e:	9a 83       	std	Y+2, r25	; 0x02
    3a90:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = val;
    3a92:	e6 e4       	ldi	r30, 0x46	; 70
    3a94:	f0 e0       	ldi	r31, 0x00	; 0
    3a96:	89 81       	ldd	r24, Y+1	; 0x01
    3a98:	9a 81       	ldd	r25, Y+2	; 0x02
    3a9a:	91 83       	std	Z+1, r25	; 0x01
    3a9c:	80 83       	st	Z, r24
}
    3a9e:	0f 90       	pop	r0
    3aa0:	0f 90       	pop	r0
    3aa2:	cf 91       	pop	r28
    3aa4:	df 91       	pop	r29
    3aa6:	08 95       	ret

00003aa8 <TIMER1_u16ReadICR1>:

/******************** READ ICR1 REGISTER *************/
u16 TIMER1_u16ReadICR1(void){
    3aa8:	df 93       	push	r29
    3aaa:	cf 93       	push	r28
    3aac:	cd b7       	in	r28, 0x3d	; 61
    3aae:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    3ab0:	e6 e4       	ldi	r30, 0x46	; 70
    3ab2:	f0 e0       	ldi	r31, 0x00	; 0
    3ab4:	80 81       	ld	r24, Z
    3ab6:	91 81       	ldd	r25, Z+1	; 0x01
}
    3ab8:	cf 91       	pop	r28
    3aba:	df 91       	pop	r29
    3abc:	08 95       	ret

00003abe <TIMER1_voidSetCallBackTCNT1>:
/********* CALL BACK FUNCTION FOR TIMER1 INPUT CAPTURE INTERRUPT *********/
void TIMER1_voidSetCallBackICR1(void (*Copy_PF)(void));


/********************* CALL BACK FUNCTION FOR TIMER1 OVERFLOW INTERRUPT *********************/
void TIMER1_voidSetCallBackTCNT1(void (*Copy_PF)(void)){
    3abe:	df 93       	push	r29
    3ac0:	cf 93       	push	r28
    3ac2:	00 d0       	rcall	.+0      	; 0x3ac4 <TIMER1_voidSetCallBackTCNT1+0x6>
    3ac4:	cd b7       	in	r28, 0x3d	; 61
    3ac6:	de b7       	in	r29, 0x3e	; 62
    3ac8:	9a 83       	std	Y+2, r25	; 0x02
    3aca:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_TCNT1CallBack_PF = Copy_PF;
    3acc:	89 81       	ldd	r24, Y+1	; 0x01
    3ace:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad0:	90 93 a3 03 	sts	0x03A3, r25
    3ad4:	80 93 a2 03 	sts	0x03A2, r24
}
    3ad8:	0f 90       	pop	r0
    3ada:	0f 90       	pop	r0
    3adc:	cf 91       	pop	r28
    3ade:	df 91       	pop	r29
    3ae0:	08 95       	ret

00003ae2 <__vector_9>:

void __vector_9 (void) __attribute__((signal ,used));       // TIMER/COUNTER1 OVERFLOW
void __vector_9(void){
    3ae2:	1f 92       	push	r1
    3ae4:	0f 92       	push	r0
    3ae6:	0f b6       	in	r0, 0x3f	; 63
    3ae8:	0f 92       	push	r0
    3aea:	11 24       	eor	r1, r1
    3aec:	2f 93       	push	r18
    3aee:	3f 93       	push	r19
    3af0:	4f 93       	push	r20
    3af2:	5f 93       	push	r21
    3af4:	6f 93       	push	r22
    3af6:	7f 93       	push	r23
    3af8:	8f 93       	push	r24
    3afa:	9f 93       	push	r25
    3afc:	af 93       	push	r26
    3afe:	bf 93       	push	r27
    3b00:	ef 93       	push	r30
    3b02:	ff 93       	push	r31
    3b04:	df 93       	push	r29
    3b06:	cf 93       	push	r28
    3b08:	cd b7       	in	r28, 0x3d	; 61
    3b0a:	de b7       	in	r29, 0x3e	; 62
	TIMER1_TCNT1CallBack_PF();
    3b0c:	e0 91 a2 03 	lds	r30, 0x03A2
    3b10:	f0 91 a3 03 	lds	r31, 0x03A3
    3b14:	09 95       	icall
}
    3b16:	cf 91       	pop	r28
    3b18:	df 91       	pop	r29
    3b1a:	ff 91       	pop	r31
    3b1c:	ef 91       	pop	r30
    3b1e:	bf 91       	pop	r27
    3b20:	af 91       	pop	r26
    3b22:	9f 91       	pop	r25
    3b24:	8f 91       	pop	r24
    3b26:	7f 91       	pop	r23
    3b28:	6f 91       	pop	r22
    3b2a:	5f 91       	pop	r21
    3b2c:	4f 91       	pop	r20
    3b2e:	3f 91       	pop	r19
    3b30:	2f 91       	pop	r18
    3b32:	0f 90       	pop	r0
    3b34:	0f be       	out	0x3f, r0	; 63
    3b36:	0f 90       	pop	r0
    3b38:	1f 90       	pop	r1
    3b3a:	18 95       	reti

00003b3c <TIMER1_voidSetCallBackOCR1A>:
/*********************************************************************************************/

/****************** CALL BACK FUNCTION FOR TIMER1 COMPARE MATCH A INTERRUPT ******************/
void TIMER1_voidSetCallBackOCR1A(void (*Copy_PF)(void)){
    3b3c:	df 93       	push	r29
    3b3e:	cf 93       	push	r28
    3b40:	00 d0       	rcall	.+0      	; 0x3b42 <TIMER1_voidSetCallBackOCR1A+0x6>
    3b42:	cd b7       	in	r28, 0x3d	; 61
    3b44:	de b7       	in	r29, 0x3e	; 62
    3b46:	9a 83       	std	Y+2, r25	; 0x02
    3b48:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_OCR1ACallBack_PF = Copy_PF;
    3b4a:	89 81       	ldd	r24, Y+1	; 0x01
    3b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b4e:	90 93 a5 03 	sts	0x03A5, r25
    3b52:	80 93 a4 03 	sts	0x03A4, r24
}
    3b56:	0f 90       	pop	r0
    3b58:	0f 90       	pop	r0
    3b5a:	cf 91       	pop	r28
    3b5c:	df 91       	pop	r29
    3b5e:	08 95       	ret

00003b60 <__vector_7>:

void __vector_7 (void) __attribute__((signal ,used));		// TIMER/COUNTER1 COMPARE MATCH A
void __vector_7(void){
    3b60:	1f 92       	push	r1
    3b62:	0f 92       	push	r0
    3b64:	0f b6       	in	r0, 0x3f	; 63
    3b66:	0f 92       	push	r0
    3b68:	11 24       	eor	r1, r1
    3b6a:	2f 93       	push	r18
    3b6c:	3f 93       	push	r19
    3b6e:	4f 93       	push	r20
    3b70:	5f 93       	push	r21
    3b72:	6f 93       	push	r22
    3b74:	7f 93       	push	r23
    3b76:	8f 93       	push	r24
    3b78:	9f 93       	push	r25
    3b7a:	af 93       	push	r26
    3b7c:	bf 93       	push	r27
    3b7e:	ef 93       	push	r30
    3b80:	ff 93       	push	r31
    3b82:	df 93       	push	r29
    3b84:	cf 93       	push	r28
    3b86:	cd b7       	in	r28, 0x3d	; 61
    3b88:	de b7       	in	r29, 0x3e	; 62
	TIMER1_OCR1ACallBack_PF();
    3b8a:	e0 91 a4 03 	lds	r30, 0x03A4
    3b8e:	f0 91 a5 03 	lds	r31, 0x03A5
    3b92:	09 95       	icall
}
    3b94:	cf 91       	pop	r28
    3b96:	df 91       	pop	r29
    3b98:	ff 91       	pop	r31
    3b9a:	ef 91       	pop	r30
    3b9c:	bf 91       	pop	r27
    3b9e:	af 91       	pop	r26
    3ba0:	9f 91       	pop	r25
    3ba2:	8f 91       	pop	r24
    3ba4:	7f 91       	pop	r23
    3ba6:	6f 91       	pop	r22
    3ba8:	5f 91       	pop	r21
    3baa:	4f 91       	pop	r20
    3bac:	3f 91       	pop	r19
    3bae:	2f 91       	pop	r18
    3bb0:	0f 90       	pop	r0
    3bb2:	0f be       	out	0x3f, r0	; 63
    3bb4:	0f 90       	pop	r0
    3bb6:	1f 90       	pop	r1
    3bb8:	18 95       	reti

00003bba <TIMER1_voidSetCallBackOCR1B>:
/*********************************************************************************************/

/****************** CALL BACK FUNCTION FOR TIMER1 COMPARE MATCH B INTERRUPT ******************/
void TIMER1_voidSetCallBackOCR1B(void (*Copy_PF)(void)){
    3bba:	df 93       	push	r29
    3bbc:	cf 93       	push	r28
    3bbe:	00 d0       	rcall	.+0      	; 0x3bc0 <TIMER1_voidSetCallBackOCR1B+0x6>
    3bc0:	cd b7       	in	r28, 0x3d	; 61
    3bc2:	de b7       	in	r29, 0x3e	; 62
    3bc4:	9a 83       	std	Y+2, r25	; 0x02
    3bc6:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_OCR1BCallBack_PF = Copy_PF;
    3bc8:	89 81       	ldd	r24, Y+1	; 0x01
    3bca:	9a 81       	ldd	r25, Y+2	; 0x02
    3bcc:	90 93 a7 03 	sts	0x03A7, r25
    3bd0:	80 93 a6 03 	sts	0x03A6, r24
}
    3bd4:	0f 90       	pop	r0
    3bd6:	0f 90       	pop	r0
    3bd8:	cf 91       	pop	r28
    3bda:	df 91       	pop	r29
    3bdc:	08 95       	ret

00003bde <__vector_8>:

void __vector_8 (void) __attribute__((signal ,used));		// TIMER/COUNTER1 COMPARE MATCH B
void __vector_8(void){
    3bde:	1f 92       	push	r1
    3be0:	0f 92       	push	r0
    3be2:	0f b6       	in	r0, 0x3f	; 63
    3be4:	0f 92       	push	r0
    3be6:	11 24       	eor	r1, r1
    3be8:	2f 93       	push	r18
    3bea:	3f 93       	push	r19
    3bec:	4f 93       	push	r20
    3bee:	5f 93       	push	r21
    3bf0:	6f 93       	push	r22
    3bf2:	7f 93       	push	r23
    3bf4:	8f 93       	push	r24
    3bf6:	9f 93       	push	r25
    3bf8:	af 93       	push	r26
    3bfa:	bf 93       	push	r27
    3bfc:	ef 93       	push	r30
    3bfe:	ff 93       	push	r31
    3c00:	df 93       	push	r29
    3c02:	cf 93       	push	r28
    3c04:	cd b7       	in	r28, 0x3d	; 61
    3c06:	de b7       	in	r29, 0x3e	; 62
	TIMER1_OCR1BCallBack_PF();
    3c08:	e0 91 a6 03 	lds	r30, 0x03A6
    3c0c:	f0 91 a7 03 	lds	r31, 0x03A7
    3c10:	09 95       	icall
}
    3c12:	cf 91       	pop	r28
    3c14:	df 91       	pop	r29
    3c16:	ff 91       	pop	r31
    3c18:	ef 91       	pop	r30
    3c1a:	bf 91       	pop	r27
    3c1c:	af 91       	pop	r26
    3c1e:	9f 91       	pop	r25
    3c20:	8f 91       	pop	r24
    3c22:	7f 91       	pop	r23
    3c24:	6f 91       	pop	r22
    3c26:	5f 91       	pop	r21
    3c28:	4f 91       	pop	r20
    3c2a:	3f 91       	pop	r19
    3c2c:	2f 91       	pop	r18
    3c2e:	0f 90       	pop	r0
    3c30:	0f be       	out	0x3f, r0	; 63
    3c32:	0f 90       	pop	r0
    3c34:	1f 90       	pop	r1
    3c36:	18 95       	reti

00003c38 <TIMER1_voidSetCallBackICR1>:
/*********************************************************************************************/

/******************* CALL BACK FUNCTION FOR TIMER1 INPUT CAPTURE INTERRUPT *******************/
void TIMER1_voidSetCallBackICR1(void (*Copy_PF)(void)){
    3c38:	df 93       	push	r29
    3c3a:	cf 93       	push	r28
    3c3c:	00 d0       	rcall	.+0      	; 0x3c3e <TIMER1_voidSetCallBackICR1+0x6>
    3c3e:	cd b7       	in	r28, 0x3d	; 61
    3c40:	de b7       	in	r29, 0x3e	; 62
    3c42:	9a 83       	std	Y+2, r25	; 0x02
    3c44:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_ICR1CallBack_PF = Copy_PF;
    3c46:	89 81       	ldd	r24, Y+1	; 0x01
    3c48:	9a 81       	ldd	r25, Y+2	; 0x02
    3c4a:	90 93 a9 03 	sts	0x03A9, r25
    3c4e:	80 93 a8 03 	sts	0x03A8, r24
}
    3c52:	0f 90       	pop	r0
    3c54:	0f 90       	pop	r0
    3c56:	cf 91       	pop	r28
    3c58:	df 91       	pop	r29
    3c5a:	08 95       	ret

00003c5c <__vector_6>:

void __vector_6 (void) __attribute__((signal ,used));		// TIMER/COUNTER1 INPUT CAPTURE UNIT
void __vector_6(void){
    3c5c:	1f 92       	push	r1
    3c5e:	0f 92       	push	r0
    3c60:	0f b6       	in	r0, 0x3f	; 63
    3c62:	0f 92       	push	r0
    3c64:	11 24       	eor	r1, r1
    3c66:	2f 93       	push	r18
    3c68:	3f 93       	push	r19
    3c6a:	4f 93       	push	r20
    3c6c:	5f 93       	push	r21
    3c6e:	6f 93       	push	r22
    3c70:	7f 93       	push	r23
    3c72:	8f 93       	push	r24
    3c74:	9f 93       	push	r25
    3c76:	af 93       	push	r26
    3c78:	bf 93       	push	r27
    3c7a:	ef 93       	push	r30
    3c7c:	ff 93       	push	r31
    3c7e:	df 93       	push	r29
    3c80:	cf 93       	push	r28
    3c82:	cd b7       	in	r28, 0x3d	; 61
    3c84:	de b7       	in	r29, 0x3e	; 62
	TIMER1_ICR1CallBack_PF();
    3c86:	e0 91 a8 03 	lds	r30, 0x03A8
    3c8a:	f0 91 a9 03 	lds	r31, 0x03A9
    3c8e:	09 95       	icall
}
    3c90:	cf 91       	pop	r28
    3c92:	df 91       	pop	r29
    3c94:	ff 91       	pop	r31
    3c96:	ef 91       	pop	r30
    3c98:	bf 91       	pop	r27
    3c9a:	af 91       	pop	r26
    3c9c:	9f 91       	pop	r25
    3c9e:	8f 91       	pop	r24
    3ca0:	7f 91       	pop	r23
    3ca2:	6f 91       	pop	r22
    3ca4:	5f 91       	pop	r21
    3ca6:	4f 91       	pop	r20
    3ca8:	3f 91       	pop	r19
    3caa:	2f 91       	pop	r18
    3cac:	0f 90       	pop	r0
    3cae:	0f be       	out	0x3f, r0	; 63
    3cb0:	0f 90       	pop	r0
    3cb2:	1f 90       	pop	r1
    3cb4:	18 95       	reti

00003cb6 <TWI_voidMasterInitialization>:
#include "TWI_config.h"
#include "TWI_interface.h"
#include <util/delay.h>

/* INITIALIZATION OF TWI MASTER MODE */
void TWI_voidMasterInitialization(void){
    3cb6:	df 93       	push	r29
    3cb8:	cf 93       	push	r28
    3cba:	cd b7       	in	r28, 0x3d	; 61
    3cbc:	de b7       	in	r29, 0x3e	; 62
	
	/* SET CLOCK FREQUENCY TO 400kbps */
	TWBR = TWBR_VALUE;
    3cbe:	e4 e1       	ldi	r30, 0x14	; 20
    3cc0:	f0 e0       	ldi	r31, 0x00	; 0
    3cc2:	8c e0       	ldi	r24, 0x0C	; 12
    3cc4:	80 83       	st	Z, r24
	
	/* SET TWPS[1:0] PRESCALLER VALUE */ 
	#if	PRESCALLER_VALUE == 1
		CLR_BIT(TWSR ,TWSR_TWPS0);
    3cc6:	a5 e1       	ldi	r26, 0x15	; 21
    3cc8:	b0 e0       	ldi	r27, 0x00	; 0
    3cca:	e5 e1       	ldi	r30, 0x15	; 21
    3ccc:	f0 e0       	ldi	r31, 0x00	; 0
    3cce:	80 81       	ld	r24, Z
    3cd0:	8e 7f       	andi	r24, 0xFE	; 254
    3cd2:	8c 93       	st	X, r24
		CLR_BIT(TWSR ,TWSR_TWPS1);
    3cd4:	a5 e1       	ldi	r26, 0x15	; 21
    3cd6:	b0 e0       	ldi	r27, 0x00	; 0
    3cd8:	e5 e1       	ldi	r30, 0x15	; 21
    3cda:	f0 e0       	ldi	r31, 0x00	; 0
    3cdc:	80 81       	ld	r24, Z
    3cde:	8d 7f       	andi	r24, 0xFD	; 253
    3ce0:	8c 93       	st	X, r24
	#else
		#error "WRONG CHOICE OF PRESCALLER VALUE!"
	#endif
	
	/* ENABLE TWI PROTOCOL */
	SET_BIT(TWCR ,TWCR_TWEN);
    3ce2:	a6 e5       	ldi	r26, 0x56	; 86
    3ce4:	b0 e0       	ldi	r27, 0x00	; 0
    3ce6:	e6 e5       	ldi	r30, 0x56	; 86
    3ce8:	f0 e0       	ldi	r31, 0x00	; 0
    3cea:	80 81       	ld	r24, Z
    3cec:	84 60       	ori	r24, 0x04	; 4
    3cee:	8c 93       	st	X, r24
}
    3cf0:	cf 91       	pop	r28
    3cf2:	df 91       	pop	r29
    3cf4:	08 95       	ret

00003cf6 <TWI_voidSlaveInitialization>:

/* INITIALIZATION OF TWI SLAVE MODE */
void TWI_voidSlaveInitialization(u8 Copy_u8SlaveAddress){
    3cf6:	df 93       	push	r29
    3cf8:	cf 93       	push	r28
    3cfa:	0f 92       	push	r0
    3cfc:	cd b7       	in	r28, 0x3d	; 61
    3cfe:	de b7       	in	r29, 0x3e	; 62
    3d00:	89 83       	std	Y+1, r24	; 0x01
	/* Initialize the node address */
	TWAR = (Copy_u8SlaveAddress << 1);
    3d02:	e2 e2       	ldi	r30, 0x22	; 34
    3d04:	f0 e0       	ldi	r31, 0x00	; 0
    3d06:	89 81       	ldd	r24, Y+1	; 0x01
    3d08:	88 0f       	add	r24, r24
    3d0a:	80 83       	st	Z, r24
	
	/* ENABLE TWI PROTOCOL */
	SET_BIT(TWCR ,TWCR_TWEN);
    3d0c:	a6 e5       	ldi	r26, 0x56	; 86
    3d0e:	b0 e0       	ldi	r27, 0x00	; 0
    3d10:	e6 e5       	ldi	r30, 0x56	; 86
    3d12:	f0 e0       	ldi	r31, 0x00	; 0
    3d14:	80 81       	ld	r24, Z
    3d16:	84 60       	ori	r24, 0x04	; 4
    3d18:	8c 93       	st	X, r24
}
    3d1a:	0f 90       	pop	r0
    3d1c:	cf 91       	pop	r28
    3d1e:	df 91       	pop	r29
    3d20:	08 95       	ret

00003d22 <TWI_SendStartCondition>:

/* TWI SEND START CONDITION */
void TWI_SendStartCondition(void){
    3d22:	df 93       	push	r29
    3d24:	cf 93       	push	r28
    3d26:	cd b7       	in	r28, 0x3d	; 61
    3d28:	de b7       	in	r29, 0x3e	; 62
	
	/* CLEAR INTERRUPT FLAG TO START THE PREVIOUS OPERATION ,ENABLE TWI PROTOCOL ,SET START CONDITION BIT IN TWCR REGISTER */
	TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWEN) | (1 << TWCR_TWSTA);
    3d2a:	e6 e5       	ldi	r30, 0x56	; 86
    3d2c:	f0 e0       	ldi	r31, 0x00	; 0
    3d2e:	84 ea       	ldi	r24, 0xA4	; 164
    3d30:	80 83       	st	Z, r24
	
	/* WAIT UNTIL INTERRUPT FLAG IS RAISED AGAIN AND THE PREVIOUS OPERATION IS COMPLETE */
	while((GET_BIT(TWCR ,TWCR_TWINT)) == 0);
    3d32:	e6 e5       	ldi	r30, 0x56	; 86
    3d34:	f0 e0       	ldi	r31, 0x00	; 0
    3d36:	80 81       	ld	r24, Z
    3d38:	88 23       	and	r24, r24
    3d3a:	dc f7       	brge	.-10     	; 0x3d32 <TWI_SendStartCondition+0x10>
}
    3d3c:	cf 91       	pop	r28
    3d3e:	df 91       	pop	r29
    3d40:	08 95       	ret

00003d42 <TWI_SendRepeatedStartCondition>:

/* TWI SEND REPEATED START CONDITION */
void TWI_SendRepeatedStartCondition(void){
    3d42:	df 93       	push	r29
    3d44:	cf 93       	push	r28
    3d46:	cd b7       	in	r28, 0x3d	; 61
    3d48:	de b7       	in	r29, 0x3e	; 62

	/* CLEAR INTERRUPT FLAG TO START THE PREVIOUS OPERATION ,ENABLE TWI PROTOCOL ,SET START CONDITION BIT IN TWCR REGISTER */
	TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWEN) | (1 << TWCR_TWSTA);
    3d4a:	e6 e5       	ldi	r30, 0x56	; 86
    3d4c:	f0 e0       	ldi	r31, 0x00	; 0
    3d4e:	84 ea       	ldi	r24, 0xA4	; 164
    3d50:	80 83       	st	Z, r24
	
	/* WAIT UNTIL INTERRUPT FLAG IS RAISED AGAIN AND THE PREVIOUS OPERATION IS COMPLETE */
	while((GET_BIT(TWCR ,TWCR_TWINT)) == 0);
    3d52:	e6 e5       	ldi	r30, 0x56	; 86
    3d54:	f0 e0       	ldi	r31, 0x00	; 0
    3d56:	80 81       	ld	r24, Z
    3d58:	88 23       	and	r24, r24
    3d5a:	dc f7       	brge	.-10     	; 0x3d52 <TWI_SendRepeatedStartCondition+0x10>
}
    3d5c:	cf 91       	pop	r28
    3d5e:	df 91       	pop	r29
    3d60:	08 95       	ret

00003d62 <TWI_SendSlaveAddressWithWrite>:

/* TWI SEND SLAVE ADDRESS WITH WRITE ACKNOWLEDGEMENT */
void TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress){
    3d62:	df 93       	push	r29
    3d64:	cf 93       	push	r28
    3d66:	0f 92       	push	r0
    3d68:	cd b7       	in	r28, 0x3d	; 61
    3d6a:	de b7       	in	r29, 0x3e	; 62
    3d6c:	89 83       	std	Y+1, r24	; 0x01
	
	/* SET SLAVE ADDRESS IN THE 7 MSB OF DATA REGISTER */
	TWDR = Copy_u8SlaveAddress;
    3d6e:	e3 e2       	ldi	r30, 0x23	; 35
    3d70:	f0 e0       	ldi	r31, 0x00	; 0
    3d72:	89 81       	ldd	r24, Y+1	; 0x01
    3d74:	80 83       	st	Z, r24
	
	/* FOR WRITE REQUEST */
	CLR_BIT(TWDR ,0);
    3d76:	a3 e2       	ldi	r26, 0x23	; 35
    3d78:	b0 e0       	ldi	r27, 0x00	; 0
    3d7a:	e3 e2       	ldi	r30, 0x23	; 35
    3d7c:	f0 e0       	ldi	r31, 0x00	; 0
    3d7e:	80 81       	ld	r24, Z
    3d80:	8e 7f       	andi	r24, 0xFE	; 254
    3d82:	8c 93       	st	X, r24
	
	/* CLEAR INTERRUPT FLAG TO START THE PREVIOUS OPERATION ,ENABLE TWI PROTOCOL */
	TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    3d84:	e6 e5       	ldi	r30, 0x56	; 86
    3d86:	f0 e0       	ldi	r31, 0x00	; 0
    3d88:	84 e8       	ldi	r24, 0x84	; 132
    3d8a:	80 83       	st	Z, r24
	
	/* WAIT UNTIL INTERRUPT FLAG IS RAISED AGAIN AND THE PREVIOUS OPERATION IS COMPLETE */
	while((GET_BIT(TWCR ,TWCR_TWINT)) == 0);
    3d8c:	e6 e5       	ldi	r30, 0x56	; 86
    3d8e:	f0 e0       	ldi	r31, 0x00	; 0
    3d90:	80 81       	ld	r24, Z
    3d92:	88 23       	and	r24, r24
    3d94:	dc f7       	brge	.-10     	; 0x3d8c <TWI_SendSlaveAddressWithWrite+0x2a>
	
}
    3d96:	0f 90       	pop	r0
    3d98:	cf 91       	pop	r28
    3d9a:	df 91       	pop	r29
    3d9c:	08 95       	ret

00003d9e <TWI_SendSlaveAddressWithRead>:

/* TWI SEND SLAVE ADDRESS WITH READ ACKNOWLEDGEMENT */
void TWI_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress){
    3d9e:	df 93       	push	r29
    3da0:	cf 93       	push	r28
    3da2:	0f 92       	push	r0
    3da4:	cd b7       	in	r28, 0x3d	; 61
    3da6:	de b7       	in	r29, 0x3e	; 62
    3da8:	89 83       	std	Y+1, r24	; 0x01
	
	/* SET SLAVE ADDRESS IN THE 7 MSB OF DATA REGISTER */
	TWDR = Copy_u8SlaveAddress;
    3daa:	e3 e2       	ldi	r30, 0x23	; 35
    3dac:	f0 e0       	ldi	r31, 0x00	; 0
    3dae:	89 81       	ldd	r24, Y+1	; 0x01
    3db0:	80 83       	st	Z, r24
	
	/* FOR READ REQUEST */
	SET_BIT(TWDR ,0);
    3db2:	a3 e2       	ldi	r26, 0x23	; 35
    3db4:	b0 e0       	ldi	r27, 0x00	; 0
    3db6:	e3 e2       	ldi	r30, 0x23	; 35
    3db8:	f0 e0       	ldi	r31, 0x00	; 0
    3dba:	80 81       	ld	r24, Z
    3dbc:	81 60       	ori	r24, 0x01	; 1
    3dbe:	8c 93       	st	X, r24
	
	/* CLEAR INTERRUPT FLAG TO START THE PREVIOUS OPERATION ,ENABLE TWI PROTOCOL */
	TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    3dc0:	e6 e5       	ldi	r30, 0x56	; 86
    3dc2:	f0 e0       	ldi	r31, 0x00	; 0
    3dc4:	84 e8       	ldi	r24, 0x84	; 132
    3dc6:	80 83       	st	Z, r24
	
	/* WAIT UNTIL INTERRUPT FLAG IS RAISED AGAIN AND THE PREVIOUS OPERATION IS COMPLETE */
	while((GET_BIT(TWCR ,TWCR_TWINT)) == 0);
    3dc8:	e6 e5       	ldi	r30, 0x56	; 86
    3dca:	f0 e0       	ldi	r31, 0x00	; 0
    3dcc:	80 81       	ld	r24, Z
    3dce:	88 23       	and	r24, r24
    3dd0:	dc f7       	brge	.-10     	; 0x3dc8 <TWI_SendSlaveAddressWithRead+0x2a>
}
    3dd2:	0f 90       	pop	r0
    3dd4:	cf 91       	pop	r28
    3dd6:	df 91       	pop	r29
    3dd8:	08 95       	ret

00003dda <TWI_MasterWriteDataByte>:

/* TWI MASTER WRITE DATA BYTE */
void TWI_MasterWriteDataByte(u8 Copy_u8DataByte){
    3dda:	df 93       	push	r29
    3ddc:	cf 93       	push	r28
    3dde:	0f 92       	push	r0
    3de0:	cd b7       	in	r28, 0x3d	; 61
    3de2:	de b7       	in	r29, 0x3e	; 62
    3de4:	89 83       	std	Y+1, r24	; 0x01
	
	/* WRITE THE DATA BYTE */
	TWDR = Copy_u8DataByte;
    3de6:	e3 e2       	ldi	r30, 0x23	; 35
    3de8:	f0 e0       	ldi	r31, 0x00	; 0
    3dea:	89 81       	ldd	r24, Y+1	; 0x01
    3dec:	80 83       	st	Z, r24
	
	/* CLEAR INTERRUPT FLAG TO START THE PREVIOUS OPERATION ,ENABLE TWI PROTOCOL */
	TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    3dee:	e6 e5       	ldi	r30, 0x56	; 86
    3df0:	f0 e0       	ldi	r31, 0x00	; 0
    3df2:	84 e8       	ldi	r24, 0x84	; 132
    3df4:	80 83       	st	Z, r24
	
	/* WAIT UNTIL INTERRUPT FLAG IS RAISED AGAIN AND THE PREVIOUS OPERATION IS COMPLETE */
	while(GET_BIT(TWCR ,TWCR_TWINT) == 0);
    3df6:	e6 e5       	ldi	r30, 0x56	; 86
    3df8:	f0 e0       	ldi	r31, 0x00	; 0
    3dfa:	80 81       	ld	r24, Z
    3dfc:	88 23       	and	r24, r24
    3dfe:	dc f7       	brge	.-10     	; 0x3df6 <TWI_MasterWriteDataByte+0x1c>
}
    3e00:	0f 90       	pop	r0
    3e02:	cf 91       	pop	r28
    3e04:	df 91       	pop	r29
    3e06:	08 95       	ret

00003e08 <TWI_MasterReadDataByte_ACK>:

/* TWI MASTER READ DATA BYTE */
u8 TWI_MasterReadDataByte_ACK(void){
    3e08:	df 93       	push	r29
    3e0a:	cf 93       	push	r28
    3e0c:	cd b7       	in	r28, 0x3d	; 61
    3e0e:	de b7       	in	r29, 0x3e	; 62
	
	/*	 CLEAR INTERRUPT FLAG TO START THE PREVIOUS OPERATION ,ENABLE TWI PROTOCOL ,ENABLE MASTER GENERATING ACKNOWLEDGE BIT AFTER RECEIVING THE DATA */
	TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWEN) | (1 << TWCR_TWEA);
    3e10:	e6 e5       	ldi	r30, 0x56	; 86
    3e12:	f0 e0       	ldi	r31, 0x00	; 0
    3e14:	84 ec       	ldi	r24, 0xC4	; 196
    3e16:	80 83       	st	Z, r24

	/* WAIT UNTIL INTERRUPT FLAG IS RAISED AGAIN AND THE PREVIOUS OPERATION IS COMPLETE */
	while(GET_BIT(TWCR ,TWCR_TWINT) == 0);
    3e18:	e6 e5       	ldi	r30, 0x56	; 86
    3e1a:	f0 e0       	ldi	r31, 0x00	; 0
    3e1c:	80 81       	ld	r24, Z
    3e1e:	88 23       	and	r24, r24
    3e20:	dc f7       	brge	.-10     	; 0x3e18 <TWI_MasterReadDataByte_ACK+0x10>
	
	/* RETURN READED VALUE IN TWDR REGISTER */
	return TWDR;
    3e22:	e3 e2       	ldi	r30, 0x23	; 35
    3e24:	f0 e0       	ldi	r31, 0x00	; 0
    3e26:	80 81       	ld	r24, Z
}
    3e28:	cf 91       	pop	r28
    3e2a:	df 91       	pop	r29
    3e2c:	08 95       	ret

00003e2e <TWI_MasterReadDataByte_NACK>:

/* TWI MASTER READ DATA BYTE WITHOUT ACKNOWLEDGEMENT */
u8 TWI_MasterReadDataByte_NACK(void){
    3e2e:	df 93       	push	r29
    3e30:	cf 93       	push	r28
    3e32:	cd b7       	in	r28, 0x3d	; 61
    3e34:	de b7       	in	r29, 0x3e	; 62
	
	/* CLEAR INTERRUPT FLAG TO START THE PREVIOUS OPERATION ,ENABLE TWI PROTOCOL */
	TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    3e36:	e6 e5       	ldi	r30, 0x56	; 86
    3e38:	f0 e0       	ldi	r31, 0x00	; 0
    3e3a:	84 e8       	ldi	r24, 0x84	; 132
    3e3c:	80 83       	st	Z, r24
	
	/* WAIT UNTIL INTERRUPT FLAG IS RAISED AGAIN AND THE PREVIOUS OPERATION IS COMPLETE */
	while(GET_BIT(TWCR ,TWCR_TWINT) == 0);
    3e3e:	e6 e5       	ldi	r30, 0x56	; 86
    3e40:	f0 e0       	ldi	r31, 0x00	; 0
    3e42:	80 81       	ld	r24, Z
    3e44:	88 23       	and	r24, r24
    3e46:	dc f7       	brge	.-10     	; 0x3e3e <TWI_MasterReadDataByte_NACK+0x10>
	
	/* RETURN READED VALUE IN TWDR REGISTER */
	return TWDR;
    3e48:	e3 e2       	ldi	r30, 0x23	; 35
    3e4a:	f0 e0       	ldi	r31, 0x00	; 0
    3e4c:	80 81       	ld	r24, Z
}
    3e4e:	cf 91       	pop	r28
    3e50:	df 91       	pop	r29
    3e52:	08 95       	ret

00003e54 <TWI_SendStopCondition>:

/* TWI SEND STOP CONDITION */
void TWI_SendStopCondition(void){
    3e54:	df 93       	push	r29
    3e56:	cf 93       	push	r28
    3e58:	cd b7       	in	r28, 0x3d	; 61
    3e5a:	de b7       	in	r29, 0x3e	; 62
	
	/* CLEAR INTERRUPT FLAG TO START THE PREVIOUS OPERATION ,ENABLE TWI PROTOCOL ,GENERATE STOP CONDITION ON THE BUS */
	TWCR = (1 << TWCR_TWINT) | (1 << TWCR_TWEN) | (1 << TWCR_TWSTO);
    3e5c:	e6 e5       	ldi	r30, 0x56	; 86
    3e5e:	f0 e0       	ldi	r31, 0x00	; 0
    3e60:	84 e9       	ldi	r24, 0x94	; 148
    3e62:	80 83       	st	Z, r24
}
    3e64:	cf 91       	pop	r28
    3e66:	df 91       	pop	r29
    3e68:	08 95       	ret

00003e6a <main>:
void EXTI0_FUNC(void);

/* CALL BACK FUNCTION OF EXTERNAL INTERRUPT 1 */
void EXTI1_FUNC(void);

int main(void){
    3e6a:	0f 93       	push	r16
    3e6c:	1f 93       	push	r17
    3e6e:	df 93       	push	r29
    3e70:	cf 93       	push	r28
    3e72:	cd b7       	in	r28, 0x3d	; 61
    3e74:	de b7       	in	r29, 0x3e	; 62
    3e76:	c0 50       	subi	r28, 0x00	; 0
    3e78:	d1 40       	sbci	r29, 0x01	; 1
    3e7a:	0f b6       	in	r0, 0x3f	; 63
    3e7c:	f8 94       	cli
    3e7e:	de bf       	out	0x3e, r29	; 62
    3e80:	0f be       	out	0x3f, r0	; 63
    3e82:	cd bf       	out	0x3d, r28	; 61
	/*************************************** Configuration ***************************************/

	/* SET PORTC DIRECTION ACCORDING TO HEX NUMBER 0xFC FOR LCD */
	//DIO_voidSetPortDirection(PORTC, 0xfc);
	DIO_voidSetPinDirection(PORTC, PIN2, HIGH);
    3e84:	82 e0       	ldi	r24, 0x02	; 2
    3e86:	62 e0       	ldi	r22, 0x02	; 2
    3e88:	41 e0       	ldi	r20, 0x01	; 1
    3e8a:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC, PIN3, HIGH);
    3e8e:	82 e0       	ldi	r24, 0x02	; 2
    3e90:	63 e0       	ldi	r22, 0x03	; 3
    3e92:	41 e0       	ldi	r20, 0x01	; 1
    3e94:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC, PIN4, HIGH);
    3e98:	82 e0       	ldi	r24, 0x02	; 2
    3e9a:	64 e0       	ldi	r22, 0x04	; 4
    3e9c:	41 e0       	ldi	r20, 0x01	; 1
    3e9e:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC, PIN5, HIGH);
    3ea2:	82 e0       	ldi	r24, 0x02	; 2
    3ea4:	65 e0       	ldi	r22, 0x05	; 5
    3ea6:	41 e0       	ldi	r20, 0x01	; 1
    3ea8:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC, PIN6, HIGH);
    3eac:	82 e0       	ldi	r24, 0x02	; 2
    3eae:	66 e0       	ldi	r22, 0x06	; 6
    3eb0:	41 e0       	ldi	r20, 0x01	; 1
    3eb2:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC, PIN7, HIGH);
    3eb6:	82 e0       	ldi	r24, 0x02	; 2
    3eb8:	67 e0       	ldi	r22, 0x07	; 7
    3eba:	41 e0       	ldi	r20, 0x01	; 1
    3ebc:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>


	/* MAKE PIN0 ON PORTB OUTPUT FOR THE RED LED */
	DIO_voidSetPinDirection(PORTB, PIN0, OUTPUT);
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	60 e0       	ldi	r22, 0x00	; 0
    3ec4:	41 e0       	ldi	r20, 0x01	; 1
    3ec6:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>

	/* MAKE PIN1 ON PORTB OUTPUT FOR THE GREEN LED */
	DIO_voidSetPinDirection(PORTB, PIN1, OUTPUT);
    3eca:	81 e0       	ldi	r24, 0x01	; 1
    3ecc:	61 e0       	ldi	r22, 0x01	; 1
    3ece:	41 e0       	ldi	r20, 0x01	; 1
    3ed0:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>

	/* MAKE PIN3 ON PORTB OUTPUT FOR THE OCRO OF TIMER0 */
	DIO_voidSetPinDirection(PORTB, PIN3, OUTPUT);
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	63 e0       	ldi	r22, 0x03	; 3
    3ed8:	41 e0       	ldi	r20, 0x01	; 1
    3eda:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>

	/* MAKE PIN5 ON PORTD OUTPUT FOR OCR1A OF TIMER1 WHICH CONTROL SERVO MOTOR ANGLE */
	DIO_voidSetPinDirection(PORTD, PIN5, OUTPUT);
    3ede:	83 e0       	ldi	r24, 0x03	; 3
    3ee0:	65 e0       	ldi	r22, 0x05	; 5
    3ee2:	41 e0       	ldi	r20, 0x01	; 1
    3ee4:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>

	/* MAKE PIN0 ON PORTA INPUT FOR TEMPERATURE SENSOR */
	DIO_voidSetPinDirection(PORTA, PIN0, INPUT);
    3ee8:	80 e0       	ldi	r24, 0x00	; 0
    3eea:	60 e0       	ldi	r22, 0x00	; 0
    3eec:	40 e0       	ldi	r20, 0x00	; 0
    3eee:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>

	/* MAKE PIN1 ON PORTA INPUT FOR GAS SENSOR */
	DIO_voidSetPinDirection(PORTA, PIN1, INPUT);
    3ef2:	80 e0       	ldi	r24, 0x00	; 0
    3ef4:	61 e0       	ldi	r22, 0x01	; 1
    3ef6:	40 e0       	ldi	r20, 0x00	; 0
    3ef8:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>

	/* MAKE PIN4 ON PORTD AND PIN7 ON PORTA OUTPUT TO IDENTICATE THE DIRECTION OF DC-MOTOR */
	DIO_voidSetPinDirection(PORTD, PIN4, OUTPUT);
    3efc:	83 e0       	ldi	r24, 0x03	; 3
    3efe:	64 e0       	ldi	r22, 0x04	; 4
    3f00:	41 e0       	ldi	r20, 0x01	; 1
    3f02:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA, PIN7, OUTPUT);
    3f06:	80 e0       	ldi	r24, 0x00	; 0
    3f08:	67 e0       	ldi	r22, 0x07	; 7
    3f0a:	41 e0       	ldi	r20, 0x01	; 1
    3f0c:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>

	/* MAKE PIN7 ON PORTD OUTPUT FOR EMERGENCY TEMPERATURE SENSOR LED */
	DIO_voidSetPinDirection(PORTD, PIN7, OUTPUT);
    3f10:	83 e0       	ldi	r24, 0x03	; 3
    3f12:	67 e0       	ldi	r22, 0x07	; 7
    3f14:	41 e0       	ldi	r20, 0x01	; 1
    3f16:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>

	/* MAKE PIN6 ON PORTA OUTPUT FOR EMERGENCY GAS SENSOR LED */
	DIO_voidSetPinDirection(PORTA, PIN6, OUTPUT);
    3f1a:	80 e0       	ldi	r24, 0x00	; 0
    3f1c:	66 e0       	ldi	r22, 0x06	; 6
    3f1e:	41 e0       	ldi	r20, 0x01	; 1
    3f20:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>

	/* MAKE PIN2 ON PORTA INPUT FOR PIR SENSOR */
	DIO_voidSetPinDirection(PORTA, PIN2, INPUT);
    3f24:	80 e0       	ldi	r24, 0x00	; 0
    3f26:	62 e0       	ldi	r22, 0x02	; 2
    3f28:	40 e0       	ldi	r20, 0x00	; 0
    3f2a:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>

	/* MAKE PIN3 ON PORTA INPUT FOR LDR SENSOR */
	DIO_voidSetPinDirection(PORTA, PIN3, INPUT);
    3f2e:	80 e0       	ldi	r24, 0x00	; 0
    3f30:	63 e0       	ldi	r22, 0x03	; 3
    3f32:	40 e0       	ldi	r20, 0x00	; 0
    3f34:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>

	/* MAKE PIN4 ,5 ON PORTA AND PIN2 ON PORTB OUTPUT FOR LIGHT SYSTEM */
	DIO_voidSetPinDirection(PORTA, PIN4, OUTPUT);
    3f38:	80 e0       	ldi	r24, 0x00	; 0
    3f3a:	64 e0       	ldi	r22, 0x04	; 4
    3f3c:	41 e0       	ldi	r20, 0x01	; 1
    3f3e:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTA, PIN5, OUTPUT);
    3f42:	80 e0       	ldi	r24, 0x00	; 0
    3f44:	65 e0       	ldi	r22, 0x05	; 5
    3f46:	41 e0       	ldi	r20, 0x01	; 1
    3f48:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB, PIN2, OUTPUT);
    3f4c:	81 e0       	ldi	r24, 0x01	; 1
    3f4e:	62 e0       	ldi	r22, 0x02	; 2
    3f50:	41 e0       	ldi	r20, 0x01	; 1
    3f52:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>

	/* MAKE PIN2 ON PORTD INPUT FOR EXTERNAL INTERRUPT 0 TO GO TO THE TEMPERATURE SENSOR AREA */
	DIO_voidSetPinDirection(PORTD, PIN2, INPUT);
    3f56:	83 e0       	ldi	r24, 0x03	; 3
    3f58:	62 e0       	ldi	r22, 0x02	; 2
    3f5a:	40 e0       	ldi	r20, 0x00	; 0
    3f5c:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>

	/* ENABLE PULL-UP RESISTOR FOR PIN2 ON PORTD */
	DIO_voidSetPinValue(PORTD, PIN2, HIGH);
    3f60:	83 e0       	ldi	r24, 0x03	; 3
    3f62:	62 e0       	ldi	r22, 0x02	; 2
    3f64:	41 e0       	ldi	r20, 0x01	; 1
    3f66:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

	/* MAKE PIN3 ON PORTD INPUT FOR EXTERNAL INTERRUPT 1 TO GO TO THE LIGHT SYSTEM AREA */
	DIO_voidSetPinDirection(PORTD, PIN3, INPUT);
    3f6a:	83 e0       	ldi	r24, 0x03	; 3
    3f6c:	63 e0       	ldi	r22, 0x03	; 3
    3f6e:	40 e0       	ldi	r20, 0x00	; 0
    3f70:	0e 94 05 0a 	call	0x140a	; 0x140a <DIO_voidSetPinDirection>

	/* ENABLE PULL-UP RESISTOR FOR PIN3 ON PORTD */
	DIO_voidSetPinValue(PORTD, PIN3, HIGH);
    3f74:	83 e0       	ldi	r24, 0x03	; 3
    3f76:	63 e0       	ldi	r22, 0x03	; 3
    3f78:	41 e0       	ldi	r20, 0x01	; 1
    3f7a:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

	/* LOCAL VARIABLE TO HOLD PRESSED KEY FROM KEYPAD */
	u8 Local_u8PressedKey = 0;
    3f7e:	fe 01       	movw	r30, r28
    3f80:	ee 53       	subi	r30, 0x3E	; 62
    3f82:	ff 4f       	sbci	r31, 0xFF	; 255
    3f84:	10 82       	st	Z, r1

	/* DEFAULT PASSWORD FOR SMART HOME */
	u32 const Default_u8Password = 4862;
    3f86:	fe 01       	movw	r30, r28
    3f88:	e2 54       	subi	r30, 0x42	; 66
    3f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8c:	8e ef       	ldi	r24, 0xFE	; 254
    3f8e:	92 e1       	ldi	r25, 0x12	; 18
    3f90:	a0 e0       	ldi	r26, 0x00	; 0
    3f92:	b0 e0       	ldi	r27, 0x00	; 0
    3f94:	80 83       	st	Z, r24
    3f96:	91 83       	std	Z+1, r25	; 0x01
    3f98:	a2 83       	std	Z+2, r26	; 0x02
    3f9a:	b3 83       	std	Z+3, r27	; 0x03

	/* DEFAULT DELAY BETWEEN TEXTS DISPLAYED ON THE LCD */
	u32 const Default_u8Delay = 500;
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	e6 54       	subi	r30, 0x46	; 70
    3fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa2:	84 ef       	ldi	r24, 0xF4	; 244
    3fa4:	91 e0       	ldi	r25, 0x01	; 1
    3fa6:	a0 e0       	ldi	r26, 0x00	; 0
    3fa8:	b0 e0       	ldi	r27, 0x00	; 0
    3faa:	80 83       	st	Z, r24
    3fac:	91 83       	std	Z+1, r25	; 0x01
    3fae:	a2 83       	std	Z+2, r26	; 0x02
    3fb0:	b3 83       	std	Z+3, r27	; 0x03

	/* ARRAY OF SIZE 4 (THE SIZE OF SYSTEM PASSWORD) TO HOLD THE ENTERED PASSWORD FROM KEYPAD */
	u32 Login_u8Password[4];

	/* VARIABLE USED AS A COUNTER WHILE ENTER THE PASSWORD TO TAKE 4 NUMBERS OF PASSWORD ONLy */
	u8 Password_u8Counter = 0;
    3fb2:	fe 01       	movw	r30, r28
    3fb4:	e7 54       	subi	r30, 0x47	; 71
    3fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb8:	10 82       	st	Z, r1

	/* VARIABLE USED AS A COUNTER WHILE ENTER THE PASSWORD INCORRECTLY WHICH ALLOW ENTER THE PASSWORD INCORRECTLY 3 TIMES ONLY */
	u8 INCORRECT_u8Password = 1;
    3fba:	fe 01       	movw	r30, r28
    3fbc:	e8 54       	subi	r30, 0x48	; 72
    3fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	80 83       	st	Z, r24
	static u8 RTC_u8Flag = 0;
	/* DEFINE A VARIABLE FROM THE TYPE OF E_RTC STRUCT TO HOLD THE VALUES OF DATE AND TIME */
	E_RTC rtc;

	/* 8-BYTES EXPRESS LOCKED ICON */
	u8 ICON_u8Locked[8] = {0x0E ,0x0A ,0x1F ,0x11 ,0x15 ,0x11 , 0x1F ,0x00};
    3fc4:	ce 01       	movw	r24, r28
    3fc6:	86 52       	subi	r24, 0x26	; 38
    3fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    3fca:	ce 50       	subi	r28, 0x0E	; 14
    3fcc:	df 4f       	sbci	r29, 0xFF	; 255
    3fce:	99 83       	std	Y+1, r25	; 0x01
    3fd0:	88 83       	st	Y, r24
    3fd2:	c2 5f       	subi	r28, 0xF2	; 242
    3fd4:	d0 40       	sbci	r29, 0x00	; 0
    3fd6:	8d e8       	ldi	r24, 0x8D	; 141
    3fd8:	93 e0       	ldi	r25, 0x03	; 3
    3fda:	cc 50       	subi	r28, 0x0C	; 12
    3fdc:	df 4f       	sbci	r29, 0xFF	; 255
    3fde:	99 83       	std	Y+1, r25	; 0x01
    3fe0:	88 83       	st	Y, r24
    3fe2:	c4 5f       	subi	r28, 0xF4	; 244
    3fe4:	d0 40       	sbci	r29, 0x00	; 0
    3fe6:	98 e0       	ldi	r25, 0x08	; 8
    3fe8:	ca 50       	subi	r28, 0x0A	; 10
    3fea:	df 4f       	sbci	r29, 0xFF	; 255
    3fec:	98 83       	st	Y, r25
    3fee:	c6 5f       	subi	r28, 0xF6	; 246
    3ff0:	d0 40       	sbci	r29, 0x00	; 0
    3ff2:	cc 50       	subi	r28, 0x0C	; 12
    3ff4:	df 4f       	sbci	r29, 0xFF	; 255
    3ff6:	e8 81       	ld	r30, Y
    3ff8:	f9 81       	ldd	r31, Y+1	; 0x01
    3ffa:	c4 5f       	subi	r28, 0xF4	; 244
    3ffc:	d0 40       	sbci	r29, 0x00	; 0
    3ffe:	00 80       	ld	r0, Z
    4000:	cc 50       	subi	r28, 0x0C	; 12
    4002:	df 4f       	sbci	r29, 0xFF	; 255
    4004:	88 81       	ld	r24, Y
    4006:	99 81       	ldd	r25, Y+1	; 0x01
    4008:	c4 5f       	subi	r28, 0xF4	; 244
    400a:	d0 40       	sbci	r29, 0x00	; 0
    400c:	01 96       	adiw	r24, 0x01	; 1
    400e:	cc 50       	subi	r28, 0x0C	; 12
    4010:	df 4f       	sbci	r29, 0xFF	; 255
    4012:	99 83       	std	Y+1, r25	; 0x01
    4014:	88 83       	st	Y, r24
    4016:	c4 5f       	subi	r28, 0xF4	; 244
    4018:	d0 40       	sbci	r29, 0x00	; 0
    401a:	ce 50       	subi	r28, 0x0E	; 14
    401c:	df 4f       	sbci	r29, 0xFF	; 255
    401e:	e8 81       	ld	r30, Y
    4020:	f9 81       	ldd	r31, Y+1	; 0x01
    4022:	c2 5f       	subi	r28, 0xF2	; 242
    4024:	d0 40       	sbci	r29, 0x00	; 0
    4026:	00 82       	st	Z, r0
    4028:	ce 50       	subi	r28, 0x0E	; 14
    402a:	df 4f       	sbci	r29, 0xFF	; 255
    402c:	88 81       	ld	r24, Y
    402e:	99 81       	ldd	r25, Y+1	; 0x01
    4030:	c2 5f       	subi	r28, 0xF2	; 242
    4032:	d0 40       	sbci	r29, 0x00	; 0
    4034:	01 96       	adiw	r24, 0x01	; 1
    4036:	ce 50       	subi	r28, 0x0E	; 14
    4038:	df 4f       	sbci	r29, 0xFF	; 255
    403a:	99 83       	std	Y+1, r25	; 0x01
    403c:	88 83       	st	Y, r24
    403e:	c2 5f       	subi	r28, 0xF2	; 242
    4040:	d0 40       	sbci	r29, 0x00	; 0
    4042:	ca 50       	subi	r28, 0x0A	; 10
    4044:	df 4f       	sbci	r29, 0xFF	; 255
    4046:	98 81       	ld	r25, Y
    4048:	c6 5f       	subi	r28, 0xF6	; 246
    404a:	d0 40       	sbci	r29, 0x00	; 0
    404c:	91 50       	subi	r25, 0x01	; 1
    404e:	ca 50       	subi	r28, 0x0A	; 10
    4050:	df 4f       	sbci	r29, 0xFF	; 255
    4052:	98 83       	st	Y, r25
    4054:	c6 5f       	subi	r28, 0xF6	; 246
    4056:	d0 40       	sbci	r29, 0x00	; 0
    4058:	ca 50       	subi	r28, 0x0A	; 10
    405a:	df 4f       	sbci	r29, 0xFF	; 255
    405c:	e8 81       	ld	r30, Y
    405e:	c6 5f       	subi	r28, 0xF6	; 246
    4060:	d0 40       	sbci	r29, 0x00	; 0
    4062:	ee 23       	and	r30, r30
    4064:	31 f6       	brne	.-116    	; 0x3ff2 <main+0x188>

	/* 8-BYTES EXPRESS WRONG ICON */
	u8 ICON_u8Wrong[8] = {0x1F ,0x0E ,0x15 ,0x1B ,0x15 ,0x0E ,0x1F ,0x00};
    4066:	ce 01       	movw	r24, r28
    4068:	8e 51       	subi	r24, 0x1E	; 30
    406a:	9f 4f       	sbci	r25, 0xFF	; 255
    406c:	c9 50       	subi	r28, 0x09	; 9
    406e:	df 4f       	sbci	r29, 0xFF	; 255
    4070:	99 83       	std	Y+1, r25	; 0x01
    4072:	88 83       	st	Y, r24
    4074:	c7 5f       	subi	r28, 0xF7	; 247
    4076:	d0 40       	sbci	r29, 0x00	; 0
    4078:	85 e8       	ldi	r24, 0x85	; 133
    407a:	93 e0       	ldi	r25, 0x03	; 3
    407c:	c7 50       	subi	r28, 0x07	; 7
    407e:	df 4f       	sbci	r29, 0xFF	; 255
    4080:	99 83       	std	Y+1, r25	; 0x01
    4082:	88 83       	st	Y, r24
    4084:	c9 5f       	subi	r28, 0xF9	; 249
    4086:	d0 40       	sbci	r29, 0x00	; 0
    4088:	98 e0       	ldi	r25, 0x08	; 8
    408a:	c5 50       	subi	r28, 0x05	; 5
    408c:	df 4f       	sbci	r29, 0xFF	; 255
    408e:	98 83       	st	Y, r25
    4090:	cb 5f       	subi	r28, 0xFB	; 251
    4092:	d0 40       	sbci	r29, 0x00	; 0
    4094:	c7 50       	subi	r28, 0x07	; 7
    4096:	df 4f       	sbci	r29, 0xFF	; 255
    4098:	e8 81       	ld	r30, Y
    409a:	f9 81       	ldd	r31, Y+1	; 0x01
    409c:	c9 5f       	subi	r28, 0xF9	; 249
    409e:	d0 40       	sbci	r29, 0x00	; 0
    40a0:	00 80       	ld	r0, Z
    40a2:	c7 50       	subi	r28, 0x07	; 7
    40a4:	df 4f       	sbci	r29, 0xFF	; 255
    40a6:	88 81       	ld	r24, Y
    40a8:	99 81       	ldd	r25, Y+1	; 0x01
    40aa:	c9 5f       	subi	r28, 0xF9	; 249
    40ac:	d0 40       	sbci	r29, 0x00	; 0
    40ae:	01 96       	adiw	r24, 0x01	; 1
    40b0:	c7 50       	subi	r28, 0x07	; 7
    40b2:	df 4f       	sbci	r29, 0xFF	; 255
    40b4:	99 83       	std	Y+1, r25	; 0x01
    40b6:	88 83       	st	Y, r24
    40b8:	c9 5f       	subi	r28, 0xF9	; 249
    40ba:	d0 40       	sbci	r29, 0x00	; 0
    40bc:	c9 50       	subi	r28, 0x09	; 9
    40be:	df 4f       	sbci	r29, 0xFF	; 255
    40c0:	e8 81       	ld	r30, Y
    40c2:	f9 81       	ldd	r31, Y+1	; 0x01
    40c4:	c7 5f       	subi	r28, 0xF7	; 247
    40c6:	d0 40       	sbci	r29, 0x00	; 0
    40c8:	00 82       	st	Z, r0
    40ca:	c9 50       	subi	r28, 0x09	; 9
    40cc:	df 4f       	sbci	r29, 0xFF	; 255
    40ce:	88 81       	ld	r24, Y
    40d0:	99 81       	ldd	r25, Y+1	; 0x01
    40d2:	c7 5f       	subi	r28, 0xF7	; 247
    40d4:	d0 40       	sbci	r29, 0x00	; 0
    40d6:	01 96       	adiw	r24, 0x01	; 1
    40d8:	c9 50       	subi	r28, 0x09	; 9
    40da:	df 4f       	sbci	r29, 0xFF	; 255
    40dc:	99 83       	std	Y+1, r25	; 0x01
    40de:	88 83       	st	Y, r24
    40e0:	c7 5f       	subi	r28, 0xF7	; 247
    40e2:	d0 40       	sbci	r29, 0x00	; 0
    40e4:	c5 50       	subi	r28, 0x05	; 5
    40e6:	df 4f       	sbci	r29, 0xFF	; 255
    40e8:	98 81       	ld	r25, Y
    40ea:	cb 5f       	subi	r28, 0xFB	; 251
    40ec:	d0 40       	sbci	r29, 0x00	; 0
    40ee:	91 50       	subi	r25, 0x01	; 1
    40f0:	c5 50       	subi	r28, 0x05	; 5
    40f2:	df 4f       	sbci	r29, 0xFF	; 255
    40f4:	98 83       	st	Y, r25
    40f6:	cb 5f       	subi	r28, 0xFB	; 251
    40f8:	d0 40       	sbci	r29, 0x00	; 0
    40fa:	c5 50       	subi	r28, 0x05	; 5
    40fc:	df 4f       	sbci	r29, 0xFF	; 255
    40fe:	e8 81       	ld	r30, Y
    4100:	cb 5f       	subi	r28, 0xFB	; 251
    4102:	d0 40       	sbci	r29, 0x00	; 0
    4104:	ee 23       	and	r30, r30
    4106:	31 f6       	brne	.-116    	; 0x4094 <main+0x22a>

	/* 8-BYTES EXPRESS CORRECT ICON */
	u8 ICON_u8Correct[8] = {0x00 ,0x00 ,0x01 ,0x03 ,0x16 ,0x1C ,0x08 ,0x00};
    4108:	ce 01       	movw	r24, r28
    410a:	86 51       	subi	r24, 0x16	; 22
    410c:	9f 4f       	sbci	r25, 0xFF	; 255
    410e:	c4 50       	subi	r28, 0x04	; 4
    4110:	df 4f       	sbci	r29, 0xFF	; 255
    4112:	99 83       	std	Y+1, r25	; 0x01
    4114:	88 83       	st	Y, r24
    4116:	cc 5f       	subi	r28, 0xFC	; 252
    4118:	d0 40       	sbci	r29, 0x00	; 0
    411a:	8d e7       	ldi	r24, 0x7D	; 125
    411c:	93 e0       	ldi	r25, 0x03	; 3
    411e:	c2 50       	subi	r28, 0x02	; 2
    4120:	df 4f       	sbci	r29, 0xFF	; 255
    4122:	99 83       	std	Y+1, r25	; 0x01
    4124:	88 83       	st	Y, r24
    4126:	ce 5f       	subi	r28, 0xFE	; 254
    4128:	d0 40       	sbci	r29, 0x00	; 0
    412a:	98 e0       	ldi	r25, 0x08	; 8
    412c:	c0 50       	subi	r28, 0x00	; 0
    412e:	df 4f       	sbci	r29, 0xFF	; 255
    4130:	98 83       	st	Y, r25
    4132:	c0 50       	subi	r28, 0x00	; 0
    4134:	d1 40       	sbci	r29, 0x01	; 1
    4136:	c2 50       	subi	r28, 0x02	; 2
    4138:	df 4f       	sbci	r29, 0xFF	; 255
    413a:	e8 81       	ld	r30, Y
    413c:	f9 81       	ldd	r31, Y+1	; 0x01
    413e:	ce 5f       	subi	r28, 0xFE	; 254
    4140:	d0 40       	sbci	r29, 0x00	; 0
    4142:	00 80       	ld	r0, Z
    4144:	c2 50       	subi	r28, 0x02	; 2
    4146:	df 4f       	sbci	r29, 0xFF	; 255
    4148:	88 81       	ld	r24, Y
    414a:	99 81       	ldd	r25, Y+1	; 0x01
    414c:	ce 5f       	subi	r28, 0xFE	; 254
    414e:	d0 40       	sbci	r29, 0x00	; 0
    4150:	01 96       	adiw	r24, 0x01	; 1
    4152:	c2 50       	subi	r28, 0x02	; 2
    4154:	df 4f       	sbci	r29, 0xFF	; 255
    4156:	99 83       	std	Y+1, r25	; 0x01
    4158:	88 83       	st	Y, r24
    415a:	ce 5f       	subi	r28, 0xFE	; 254
    415c:	d0 40       	sbci	r29, 0x00	; 0
    415e:	c4 50       	subi	r28, 0x04	; 4
    4160:	df 4f       	sbci	r29, 0xFF	; 255
    4162:	e8 81       	ld	r30, Y
    4164:	f9 81       	ldd	r31, Y+1	; 0x01
    4166:	cc 5f       	subi	r28, 0xFC	; 252
    4168:	d0 40       	sbci	r29, 0x00	; 0
    416a:	00 82       	st	Z, r0
    416c:	c4 50       	subi	r28, 0x04	; 4
    416e:	df 4f       	sbci	r29, 0xFF	; 255
    4170:	88 81       	ld	r24, Y
    4172:	99 81       	ldd	r25, Y+1	; 0x01
    4174:	cc 5f       	subi	r28, 0xFC	; 252
    4176:	d0 40       	sbci	r29, 0x00	; 0
    4178:	01 96       	adiw	r24, 0x01	; 1
    417a:	c4 50       	subi	r28, 0x04	; 4
    417c:	df 4f       	sbci	r29, 0xFF	; 255
    417e:	99 83       	std	Y+1, r25	; 0x01
    4180:	88 83       	st	Y, r24
    4182:	cc 5f       	subi	r28, 0xFC	; 252
    4184:	d0 40       	sbci	r29, 0x00	; 0
    4186:	c0 50       	subi	r28, 0x00	; 0
    4188:	df 4f       	sbci	r29, 0xFF	; 255
    418a:	98 81       	ld	r25, Y
    418c:	c0 50       	subi	r28, 0x00	; 0
    418e:	d1 40       	sbci	r29, 0x01	; 1
    4190:	91 50       	subi	r25, 0x01	; 1
    4192:	c0 50       	subi	r28, 0x00	; 0
    4194:	df 4f       	sbci	r29, 0xFF	; 255
    4196:	98 83       	st	Y, r25
    4198:	c0 50       	subi	r28, 0x00	; 0
    419a:	d1 40       	sbci	r29, 0x01	; 1
    419c:	c0 50       	subi	r28, 0x00	; 0
    419e:	df 4f       	sbci	r29, 0xFF	; 255
    41a0:	e8 81       	ld	r30, Y
    41a2:	c0 50       	subi	r28, 0x00	; 0
    41a4:	d1 40       	sbci	r29, 0x01	; 1
    41a6:	ee 23       	and	r30, r30
    41a8:	31 f6       	brne	.-116    	; 0x4136 <main+0x2cc>

	/* CALL BACK FUNCTION TO IMPLEMENT ADC_FUNC WHEN INTERRUPT FLAG REAISED */
	ADC_voidSetCallBack(ADC_FUNC);
    41aa:	8e e5       	ldi	r24, 0x5E	; 94
    41ac:	9d e2       	ldi	r25, 0x2D	; 45
    41ae:	0e 94 c6 09 	call	0x138c	; 0x138c <ADC_voidSetCallBack>

	/* CALL BACK FUNCTION TO IMPLEMENT EXTI0_FUNC WHEN EXTERNAL INTERRUPT 0 TAKE PLACE */
	EXTIO_voidSetCallBack(EXTI0_FUNC);
    41b2:	82 e0       	ldi	r24, 0x02	; 2
    41b4:	92 e3       	ldi	r25, 0x32	; 50
    41b6:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <EXTIO_voidSetCallBack>

	/* CALL BACK FUNCTION TO IMPLEMENT EXTI1_FUNC WHEN EXTERNAL INTERRUPT 1 TAKE PLACE */
	EXTI1_voidSetCallBack(EXTI1_FUNC);
    41ba:	80 e1       	ldi	r24, 0x10	; 16
    41bc:	92 e3       	ldi	r25, 0x32	; 50
    41be:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <EXTI1_voidSetCallBack>

	// INITIALIZE ADC
	ADC_voidInitialization();
    41c2:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <ADC_voidInitialization>

	// ENABLE GLOBAL INTERRUPT
	GIE_voidEnable();
    41c6:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <GIE_voidEnable>

	/* INITIALIZE KEYPAD */
	KPD_voidInitialization();
    41ca:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <KPD_voidInitialization>

	/* INITIALIZE LCD */
	LCD_voidInitialization4();
    41ce:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_voidInitialization4>

	/* INITIALIZE TIMER1 FOR PWM OF SERVO MOTOR */
	TIMER1_voidInitialization();
    41d2:	0e 94 48 1c 	call	0x3890	; 0x3890 <TIMER1_voidInitialization>

	/* INITIALIZE TIMER0 FOR PWM OF DC-MOTOR */
	TIMER0_voidInitialization();
    41d6:	0e 94 3e 1b 	call	0x367c	; 0x367c <TIMER0_voidInitialization>

	/* SET TIMER0 OCR0 VALUE */
	TIMER0_voidSetOCR0(0);
    41da:	80 e0       	ldi	r24, 0x00	; 0
    41dc:	0e 94 bc 1b 	call	0x3778	; 0x3778 <TIMER0_voidSetOCR0>

	/* SET OVERFLOW VALUE IN ICR1 REGISTER */
	TIMER1_u16SetICR1(5000);
    41e0:	88 e8       	ldi	r24, 0x88	; 136
    41e2:	93 e1       	ldi	r25, 0x13	; 19
    41e4:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <TIMER1_u16SetICR1>

	/* INITIALIZE EXTERNAL INTERRUPT 0 TO DEAL WITH TEMPERATURE SENSOR AREA */
	EXTI0_voidInitialization();
    41e8:	0e 94 66 0d 	call	0x1acc	; 0x1acc <EXTI0_voidInitialization>

	/* INITIALIZE EXTERNAL INTERRUPT 1 TO DEAl WITH LIGHT SYSTEM AREA */
	EXTI1_voidInitialization();
    41ec:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <EXTI1_voidInitialization>

	/* ENABLE EXTERNAL INTERRUPT 0 */
	EXTI0_voidEnable();
    41f0:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <EXTI0_voidEnable>

	/* ENABLE EXTERNAL INTERRUPT 1 */
	EXTI1_voidEnable();
    41f4:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <EXTI1_voidEnable>

	/* INITIALIZE RTC MODULE */
	RTC_voidInitialization();
    41f8:	0e 94 82 19 	call	0x3304	; 0x3304 <RTC_voidInitialization>
	while(1){
		/************************************* Real-time *************************************/


		/* UPDATE THE STATUS OF GAS SENSOR ALL OF THE TIME IF END_u8Flag VARIABLE IS SET TO ONE */
		if(END_u8Flag == 1){
    41fc:	80 91 c1 03 	lds	r24, 0x03C1
    4200:	81 30       	cpi	r24, 0x01	; 1
    4202:	b9 f4       	brne	.+46     	; 0x4232 <main+0x3c8>

			/* CHECK IF GAS SENSOR DETECT ANY TYPE OF GAS IN THE ATMOSPHERE */
			if(DIO_u8GetPinValue(PORTA, PIN1) == 1){
    4204:	80 e0       	ldi	r24, 0x00	; 0
    4206:	61 e0       	ldi	r22, 0x01	; 1
    4208:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8GetPinValue>
    420c:	81 30       	cpi	r24, 0x01	; 1
    420e:	31 f4       	brne	.+12     	; 0x421c <main+0x3b2>
				/* TURN-ON GAS EMERGENCY LED ON PORTA PIN6 */
				DIO_voidSetPinValue(PORTA, PIN6, HIGH);
    4210:	80 e0       	ldi	r24, 0x00	; 0
    4212:	66 e0       	ldi	r22, 0x06	; 6
    4214:	41 e0       	ldi	r20, 0x01	; 1
    4216:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
    421a:	0b c0       	rjmp	.+22     	; 0x4232 <main+0x3c8>
			}
			/* CHECK IF GAS SENSOR NOT DETECT ANY TYPE OF GAS IN THE ATMOSPHERE */
			else if(DIO_u8GetPinValue(PORTA, PIN1) == 0){
    421c:	80 e0       	ldi	r24, 0x00	; 0
    421e:	61 e0       	ldi	r22, 0x01	; 1
    4220:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8GetPinValue>
    4224:	88 23       	and	r24, r24
    4226:	29 f4       	brne	.+10     	; 0x4232 <main+0x3c8>
				/* TURN-OFF GAS EMERGENCY LED ON PORTA PIN6 */
				DIO_voidSetPinValue(PORTA, PIN6, LOW);
    4228:	80 e0       	ldi	r24, 0x00	; 0
    422a:	66 e0       	ldi	r22, 0x06	; 6
    422c:	40 e0       	ldi	r20, 0x00	; 0
    422e:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
			}
		}

		/* WELCOME MESSAGE AREA */
		if(Global_u8Control == 0){
    4232:	80 91 c2 03 	lds	r24, 0x03C2
    4236:	88 23       	and	r24, r24
    4238:	09 f0       	breq	.+2      	; 0x423c <main+0x3d2>
    423a:	d1 c0       	rjmp	.+418    	; 0x43de <main+0x574>

			/* CLEAR THE DISPLAY ,THEN WRITE THE STRING "WELCOME YOU IN OUR SMART HOME" */
			LCD_voidClearDisplay();
    423c:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_voidClearDisplay>
			LCD_voidGOTOXY(0, 1);
    4240:	80 e0       	ldi	r24, 0x00	; 0
    4242:	61 e0       	ldi	r22, 0x01	; 1
    4244:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
			LCD_voidWriteString((u8*)"WELCOME YOU IN");
    4248:	80 e6       	ldi	r24, 0x60	; 96
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
			LCD_voidGOTOXY(1, 1);
    4250:	81 e0       	ldi	r24, 0x01	; 1
    4252:	61 e0       	ldi	r22, 0x01	; 1
    4254:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
			LCD_voidWriteString((u8*)"OUR SMART HOME");
    4258:	8f e6       	ldi	r24, 0x6F	; 111
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>

			/* WAIT FOR Default_u8Delay SPECIFIED TIME */
			_delay_ms(Default_u8Delay);
    4260:	fe 01       	movw	r30, r28
    4262:	e6 54       	subi	r30, 0x46	; 70
    4264:	ff 4f       	sbci	r31, 0xFF	; 255
    4266:	60 81       	ld	r22, Z
    4268:	71 81       	ldd	r23, Z+1	; 0x01
    426a:	82 81       	ldd	r24, Z+2	; 0x02
    426c:	93 81       	ldd	r25, Z+3	; 0x03
    426e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    4272:	dc 01       	movw	r26, r24
    4274:	cb 01       	movw	r24, r22
    4276:	fe 01       	movw	r30, r28
    4278:	ed 54       	subi	r30, 0x4D	; 77
    427a:	ff 4f       	sbci	r31, 0xFF	; 255
    427c:	80 83       	st	Z, r24
    427e:	91 83       	std	Z+1, r25	; 0x01
    4280:	a2 83       	std	Z+2, r26	; 0x02
    4282:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4284:	8e 01       	movw	r16, r28
    4286:	01 55       	subi	r16, 0x51	; 81
    4288:	1f 4f       	sbci	r17, 0xFF	; 255
    428a:	fe 01       	movw	r30, r28
    428c:	ed 54       	subi	r30, 0x4D	; 77
    428e:	ff 4f       	sbci	r31, 0xFF	; 255
    4290:	60 81       	ld	r22, Z
    4292:	71 81       	ldd	r23, Z+1	; 0x01
    4294:	82 81       	ldd	r24, Z+2	; 0x02
    4296:	93 81       	ldd	r25, Z+3	; 0x03
    4298:	20 e0       	ldi	r18, 0x00	; 0
    429a:	30 e0       	ldi	r19, 0x00	; 0
    429c:	4a e7       	ldi	r20, 0x7A	; 122
    429e:	55 e4       	ldi	r21, 0x45	; 69
    42a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42a4:	dc 01       	movw	r26, r24
    42a6:	cb 01       	movw	r24, r22
    42a8:	f8 01       	movw	r30, r16
    42aa:	80 83       	st	Z, r24
    42ac:	91 83       	std	Z+1, r25	; 0x01
    42ae:	a2 83       	std	Z+2, r26	; 0x02
    42b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42b2:	fe 01       	movw	r30, r28
    42b4:	e1 55       	subi	r30, 0x51	; 81
    42b6:	ff 4f       	sbci	r31, 0xFF	; 255
    42b8:	60 81       	ld	r22, Z
    42ba:	71 81       	ldd	r23, Z+1	; 0x01
    42bc:	82 81       	ldd	r24, Z+2	; 0x02
    42be:	93 81       	ldd	r25, Z+3	; 0x03
    42c0:	20 e0       	ldi	r18, 0x00	; 0
    42c2:	30 e0       	ldi	r19, 0x00	; 0
    42c4:	40 e8       	ldi	r20, 0x80	; 128
    42c6:	5f e3       	ldi	r21, 0x3F	; 63
    42c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42cc:	88 23       	and	r24, r24
    42ce:	44 f4       	brge	.+16     	; 0x42e0 <main+0x476>
		__ticks = 1;
    42d0:	fe 01       	movw	r30, r28
    42d2:	e3 55       	subi	r30, 0x53	; 83
    42d4:	ff 4f       	sbci	r31, 0xFF	; 255
    42d6:	81 e0       	ldi	r24, 0x01	; 1
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	91 83       	std	Z+1, r25	; 0x01
    42dc:	80 83       	st	Z, r24
    42de:	64 c0       	rjmp	.+200    	; 0x43a8 <main+0x53e>
	else if (__tmp > 65535)
    42e0:	fe 01       	movw	r30, r28
    42e2:	e1 55       	subi	r30, 0x51	; 81
    42e4:	ff 4f       	sbci	r31, 0xFF	; 255
    42e6:	60 81       	ld	r22, Z
    42e8:	71 81       	ldd	r23, Z+1	; 0x01
    42ea:	82 81       	ldd	r24, Z+2	; 0x02
    42ec:	93 81       	ldd	r25, Z+3	; 0x03
    42ee:	20 e0       	ldi	r18, 0x00	; 0
    42f0:	3f ef       	ldi	r19, 0xFF	; 255
    42f2:	4f e7       	ldi	r20, 0x7F	; 127
    42f4:	57 e4       	ldi	r21, 0x47	; 71
    42f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42fa:	18 16       	cp	r1, r24
    42fc:	0c f0       	brlt	.+2      	; 0x4300 <main+0x496>
    42fe:	43 c0       	rjmp	.+134    	; 0x4386 <main+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4300:	fe 01       	movw	r30, r28
    4302:	ed 54       	subi	r30, 0x4D	; 77
    4304:	ff 4f       	sbci	r31, 0xFF	; 255
    4306:	60 81       	ld	r22, Z
    4308:	71 81       	ldd	r23, Z+1	; 0x01
    430a:	82 81       	ldd	r24, Z+2	; 0x02
    430c:	93 81       	ldd	r25, Z+3	; 0x03
    430e:	20 e0       	ldi	r18, 0x00	; 0
    4310:	30 e0       	ldi	r19, 0x00	; 0
    4312:	40 e2       	ldi	r20, 0x20	; 32
    4314:	51 e4       	ldi	r21, 0x41	; 65
    4316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    431a:	dc 01       	movw	r26, r24
    431c:	cb 01       	movw	r24, r22
    431e:	8e 01       	movw	r16, r28
    4320:	03 55       	subi	r16, 0x53	; 83
    4322:	1f 4f       	sbci	r17, 0xFF	; 255
    4324:	bc 01       	movw	r22, r24
    4326:	cd 01       	movw	r24, r26
    4328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    432c:	dc 01       	movw	r26, r24
    432e:	cb 01       	movw	r24, r22
    4330:	f8 01       	movw	r30, r16
    4332:	91 83       	std	Z+1, r25	; 0x01
    4334:	80 83       	st	Z, r24
    4336:	1f c0       	rjmp	.+62     	; 0x4376 <main+0x50c>
    4338:	fe 01       	movw	r30, r28
    433a:	e5 55       	subi	r30, 0x55	; 85
    433c:	ff 4f       	sbci	r31, 0xFF	; 255
    433e:	80 e9       	ldi	r24, 0x90	; 144
    4340:	91 e0       	ldi	r25, 0x01	; 1
    4342:	91 83       	std	Z+1, r25	; 0x01
    4344:	80 83       	st	Z, r24
    4346:	fe 01       	movw	r30, r28
    4348:	e5 55       	subi	r30, 0x55	; 85
    434a:	ff 4f       	sbci	r31, 0xFF	; 255
    434c:	80 81       	ld	r24, Z
    434e:	91 81       	ldd	r25, Z+1	; 0x01
    4350:	01 97       	sbiw	r24, 0x01	; 1
    4352:	f1 f7       	brne	.-4      	; 0x4350 <main+0x4e6>
    4354:	fe 01       	movw	r30, r28
    4356:	e5 55       	subi	r30, 0x55	; 85
    4358:	ff 4f       	sbci	r31, 0xFF	; 255
    435a:	91 83       	std	Z+1, r25	; 0x01
    435c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    435e:	de 01       	movw	r26, r28
    4360:	a3 55       	subi	r26, 0x53	; 83
    4362:	bf 4f       	sbci	r27, 0xFF	; 255
    4364:	fe 01       	movw	r30, r28
    4366:	e3 55       	subi	r30, 0x53	; 83
    4368:	ff 4f       	sbci	r31, 0xFF	; 255
    436a:	80 81       	ld	r24, Z
    436c:	91 81       	ldd	r25, Z+1	; 0x01
    436e:	01 97       	sbiw	r24, 0x01	; 1
    4370:	11 96       	adiw	r26, 0x01	; 1
    4372:	9c 93       	st	X, r25
    4374:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4376:	fe 01       	movw	r30, r28
    4378:	e3 55       	subi	r30, 0x53	; 83
    437a:	ff 4f       	sbci	r31, 0xFF	; 255
    437c:	80 81       	ld	r24, Z
    437e:	91 81       	ldd	r25, Z+1	; 0x01
    4380:	00 97       	sbiw	r24, 0x00	; 0
    4382:	d1 f6       	brne	.-76     	; 0x4338 <main+0x4ce>
    4384:	28 c0       	rjmp	.+80     	; 0x43d6 <main+0x56c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4386:	8e 01       	movw	r16, r28
    4388:	03 55       	subi	r16, 0x53	; 83
    438a:	1f 4f       	sbci	r17, 0xFF	; 255
    438c:	fe 01       	movw	r30, r28
    438e:	e1 55       	subi	r30, 0x51	; 81
    4390:	ff 4f       	sbci	r31, 0xFF	; 255
    4392:	60 81       	ld	r22, Z
    4394:	71 81       	ldd	r23, Z+1	; 0x01
    4396:	82 81       	ldd	r24, Z+2	; 0x02
    4398:	93 81       	ldd	r25, Z+3	; 0x03
    439a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    439e:	dc 01       	movw	r26, r24
    43a0:	cb 01       	movw	r24, r22
    43a2:	f8 01       	movw	r30, r16
    43a4:	91 83       	std	Z+1, r25	; 0x01
    43a6:	80 83       	st	Z, r24
    43a8:	de 01       	movw	r26, r28
    43aa:	a7 55       	subi	r26, 0x57	; 87
    43ac:	bf 4f       	sbci	r27, 0xFF	; 255
    43ae:	fe 01       	movw	r30, r28
    43b0:	e3 55       	subi	r30, 0x53	; 83
    43b2:	ff 4f       	sbci	r31, 0xFF	; 255
    43b4:	80 81       	ld	r24, Z
    43b6:	91 81       	ldd	r25, Z+1	; 0x01
    43b8:	11 96       	adiw	r26, 0x01	; 1
    43ba:	9c 93       	st	X, r25
    43bc:	8e 93       	st	-X, r24
    43be:	fe 01       	movw	r30, r28
    43c0:	e7 55       	subi	r30, 0x57	; 87
    43c2:	ff 4f       	sbci	r31, 0xFF	; 255
    43c4:	80 81       	ld	r24, Z
    43c6:	91 81       	ldd	r25, Z+1	; 0x01
    43c8:	01 97       	sbiw	r24, 0x01	; 1
    43ca:	f1 f7       	brne	.-4      	; 0x43c8 <main+0x55e>
    43cc:	fe 01       	movw	r30, r28
    43ce:	e7 55       	subi	r30, 0x57	; 87
    43d0:	ff 4f       	sbci	r31, 0xFF	; 255
    43d2:	91 83       	std	Z+1, r25	; 0x01
    43d4:	80 83       	st	Z, r24

			/* GO TO ENTER SMART HOME PASSWORD AREA */
			Global_u8Control = 1;
    43d6:	81 e0       	ldi	r24, 0x01	; 1
    43d8:	80 93 c2 03 	sts	0x03C2, r24
    43dc:	0f cf       	rjmp	.-482    	; 0x41fc <main+0x392>
		}

		/*SMART HOME PASSWORD AREA */
		else if(Global_u8Control == 1){
    43de:	80 91 c2 03 	lds	r24, 0x03C2
    43e2:	81 30       	cpi	r24, 0x01	; 1
    43e4:	09 f0       	breq	.+2      	; 0x43e8 <main+0x57e>
    43e6:	e8 c0       	rjmp	.+464    	; 0x45b8 <main+0x74e>

			/* TURN-ON RED LED ON PIN0 OF PORTB */
			DIO_voidSetPinValue(PORTB, PIN0, HIGH);
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	60 e0       	ldi	r22, 0x00	; 0
    43ec:	41 e0       	ldi	r20, 0x01	; 1
    43ee:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

			/* TURN-OFF GREEN LED ON PIN1 OF PORTB */
			DIO_voidSetPinValue(PORTB, PIN1, LOW);
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	61 e0       	ldi	r22, 0x01	; 1
    43f6:	40 e0       	ldi	r20, 0x00	; 0
    43f8:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

			/* SET COMPARE MATCH VALUE IN OCR1A */
			TIMER1_voidSetOCR1A(0);
    43fc:	80 e0       	ldi	r24, 0x00	; 0
    43fe:	90 e0       	ldi	r25, 0x00	; 0
    4400:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <TIMER1_voidSetOCR1A>

			/* CLEAR LCD ,THEN WRITE 8-BYTES WHICH EXPRESSED LOCKED ICON IN ADDRESS 0 IN CGRAM AND PRINT IT IN LINE 0 AT POSITION 0 ON LCD ,then
			   WRITE THE STRING "ENTER HOMES'S PASSWORD AT THE SPECIFIC LOCATION ON THE LCD USING LCD_voidGOTOXY() METHOD"
			*/
			LCD_voidClearDisplay();
    4404:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_voidClearDisplay>
			LCD_voidWriteSpecialChar4(ICON_u8Locked, 0, 0, 0);
    4408:	ce 01       	movw	r24, r28
    440a:	86 52       	subi	r24, 0x26	; 38
    440c:	9f 4f       	sbci	r25, 0xFF	; 255
    440e:	60 e0       	ldi	r22, 0x00	; 0
    4410:	40 e0       	ldi	r20, 0x00	; 0
    4412:	20 e0       	ldi	r18, 0x00	; 0
    4414:	0e 94 d5 14 	call	0x29aa	; 0x29aa <LCD_voidWriteSpecialChar4>
			LCD_voidWriteString((u8*)" ENTER HOMES'S");
    4418:	8e e7       	ldi	r24, 0x7E	; 126
    441a:	90 e0       	ldi	r25, 0x00	; 0
    441c:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
			LCD_voidGOTOXY(1, 2);
    4420:	81 e0       	ldi	r24, 0x01	; 1
    4422:	62 e0       	ldi	r22, 0x02	; 2
    4424:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
			LCD_voidWriteString((u8*)"PASSWORD:");
    4428:	8d e8       	ldi	r24, 0x8D	; 141
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
    4430:	b4 c0       	rjmp	.+360    	; 0x459a <main+0x730>

			/*CHECK IF YOU ENTERED 4 NUMBERS OF PASSWORD OR NOT */
			while(Password_u8Counter < 5){

				/* GET PRESSED KEY FROM KEYPAD AND STORE IT IN THE VARIABLE Local_u8PressedKey */
				Local_u8PressedKey = KPD_u8GETPressedKey();
    4432:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <KPD_u8GETPressedKey>
    4436:	fe 01       	movw	r30, r28
    4438:	ee 53       	subi	r30, 0x3E	; 62
    443a:	ff 4f       	sbci	r31, 0xFF	; 255
    443c:	80 83       	st	Z, r24
    443e:	06 c0       	rjmp	.+12     	; 0x444c <main+0x5e2>

				/* CHECK IF PRESSED KEY == 0xFF ,IT MEANS YOU DOESN'T PRESSED ANY KEY */
				while(Local_u8PressedKey == 0xff){

					/* IF YOU DOESN'T PRESSED ANY KEY ,REREAD PRESSED KEY */
					Local_u8PressedKey = KPD_u8GETPressedKey();
    4440:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <KPD_u8GETPressedKey>
    4444:	fe 01       	movw	r30, r28
    4446:	ee 53       	subi	r30, 0x3E	; 62
    4448:	ff 4f       	sbci	r31, 0xFF	; 255
    444a:	80 83       	st	Z, r24

				/* GET PRESSED KEY FROM KEYPAD AND STORE IT IN THE VARIABLE Local_u8PressedKey */
				Local_u8PressedKey = KPD_u8GETPressedKey();

				/* CHECK IF PRESSED KEY == 0xFF ,IT MEANS YOU DOESN'T PRESSED ANY KEY */
				while(Local_u8PressedKey == 0xff){
    444c:	fe 01       	movw	r30, r28
    444e:	ee 53       	subi	r30, 0x3E	; 62
    4450:	ff 4f       	sbci	r31, 0xFF	; 255
    4452:	80 81       	ld	r24, Z
    4454:	8f 3f       	cpi	r24, 0xFF	; 255
    4456:	a1 f3       	breq	.-24     	; 0x4440 <main+0x5d6>

				/* CLEAR KEY(%) => MEANS YOU WANT TO CLEAR PRESSED KEY ON THE LCD TO REENTER ANOTHER ONE
				   ,SO YOU CHECK IF YOU ALREADY PRESSED KEYS (Password_u8Counter != 0) AND CURRENT
				   PRESSED KEY IS % SYMBOL SO CLEAR THE LAST ENTERD NUMBER
				*/
				if((Local_u8PressedKey == '%') && (Password_u8Counter > 0)){
    4458:	fe 01       	movw	r30, r28
    445a:	ee 53       	subi	r30, 0x3E	; 62
    445c:	ff 4f       	sbci	r31, 0xFF	; 255
    445e:	80 81       	ld	r24, Z
    4460:	85 32       	cpi	r24, 0x25	; 37
    4462:	39 f5       	brne	.+78     	; 0x44b2 <main+0x648>
    4464:	fe 01       	movw	r30, r28
    4466:	e7 54       	subi	r30, 0x47	; 71
    4468:	ff 4f       	sbci	r31, 0xFF	; 255
    446a:	80 81       	ld	r24, Z
    446c:	88 23       	and	r24, r24
    446e:	09 f1       	breq	.+66     	; 0x44b2 <main+0x648>
					LCD_voidGOTOXY(1, 11 + (Password_u8Counter-1));
    4470:	fe 01       	movw	r30, r28
    4472:	e7 54       	subi	r30, 0x47	; 71
    4474:	ff 4f       	sbci	r31, 0xFF	; 255
    4476:	80 81       	ld	r24, Z
    4478:	98 2f       	mov	r25, r24
    447a:	96 5f       	subi	r25, 0xF6	; 246
    447c:	81 e0       	ldi	r24, 0x01	; 1
    447e:	69 2f       	mov	r22, r25
    4480:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
					LCD_voidWritecChar4(' ');
    4484:	80 e2       	ldi	r24, 0x20	; 32
    4486:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
					LCD_voidGOTOXY(1, 11 + (Password_u8Counter-1));
    448a:	fe 01       	movw	r30, r28
    448c:	e7 54       	subi	r30, 0x47	; 71
    448e:	ff 4f       	sbci	r31, 0xFF	; 255
    4490:	80 81       	ld	r24, Z
    4492:	98 2f       	mov	r25, r24
    4494:	96 5f       	subi	r25, 0xF6	; 246
    4496:	81 e0       	ldi	r24, 0x01	; 1
    4498:	69 2f       	mov	r22, r25
    449a:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>

					/* DECREMENT Password_u8Counter BY ONE TO CAN ENTER OTHER NUMBER FROM THE 4-NUMBERS PASSWORD */
					Password_u8Counter--;
    449e:	de 01       	movw	r26, r28
    44a0:	a7 54       	subi	r26, 0x47	; 71
    44a2:	bf 4f       	sbci	r27, 0xFF	; 255
    44a4:	fe 01       	movw	r30, r28
    44a6:	e7 54       	subi	r30, 0x47	; 71
    44a8:	ff 4f       	sbci	r31, 0xFF	; 255
    44aa:	80 81       	ld	r24, Z
    44ac:	81 50       	subi	r24, 0x01	; 1
    44ae:	8c 93       	st	X, r24
    44b0:	74 c0       	rjmp	.+232    	; 0x459a <main+0x730>
				}

				/* CHECK IF THE PRESSED KEY == CLEAR KEY(%) AND YOU DIDN'T PRESSED ANY NUMBER BEFORE THIS MOMENT
				   i.e, NO PASSWORD HAS BEEN ENTERD YET ,SO DON'T CLEAR ANY THING AND CONTINUE)
				*/
				else if((Local_u8PressedKey == '%') && (Password_u8Counter == 0)){
    44b2:	fe 01       	movw	r30, r28
    44b4:	ee 53       	subi	r30, 0x3E	; 62
    44b6:	ff 4f       	sbci	r31, 0xFF	; 255
    44b8:	80 81       	ld	r24, Z
    44ba:	85 32       	cpi	r24, 0x25	; 37
    44bc:	39 f4       	brne	.+14     	; 0x44cc <main+0x662>
    44be:	fe 01       	movw	r30, r28
    44c0:	e7 54       	subi	r30, 0x47	; 71
    44c2:	ff 4f       	sbci	r31, 0xFF	; 255
    44c4:	80 81       	ld	r24, Z
    44c6:	88 23       	and	r24, r24
    44c8:	09 f4       	brne	.+2      	; 0x44cc <main+0x662>
    44ca:	67 c0       	rjmp	.+206    	; 0x459a <main+0x730>
					continue;
				}

				/* CHECK IF THE PRESSED KEY IS LESS THAN THE FOURTH ENTERD NUMBER AND ALSO THIS PRESSED KEY IS NOT THE CLEAR KEY(%) OR THE ENTER KEY(=) */
				else if((Password_u8Counter < 4) && (Local_u8PressedKey != '=') && (Local_u8PressedKey != '%')){
    44cc:	fe 01       	movw	r30, r28
    44ce:	e7 54       	subi	r30, 0x47	; 71
    44d0:	ff 4f       	sbci	r31, 0xFF	; 255
    44d2:	80 81       	ld	r24, Z
    44d4:	84 30       	cpi	r24, 0x04	; 4
    44d6:	b0 f5       	brcc	.+108    	; 0x4544 <main+0x6da>
    44d8:	fe 01       	movw	r30, r28
    44da:	ee 53       	subi	r30, 0x3E	; 62
    44dc:	ff 4f       	sbci	r31, 0xFF	; 255
    44de:	80 81       	ld	r24, Z
    44e0:	8d 33       	cpi	r24, 0x3D	; 61
    44e2:	81 f1       	breq	.+96     	; 0x4544 <main+0x6da>
    44e4:	fe 01       	movw	r30, r28
    44e6:	ee 53       	subi	r30, 0x3E	; 62
    44e8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ea:	80 81       	ld	r24, Z
    44ec:	85 32       	cpi	r24, 0x25	; 37
    44ee:	51 f1       	breq	.+84     	; 0x4544 <main+0x6da>

					/* STORE PRESSED NUMBER KEY IN THE PASSWORD ARRAY */
					Login_u8Password[Password_u8Counter] = Local_u8PressedKey;
    44f0:	fe 01       	movw	r30, r28
    44f2:	e7 54       	subi	r30, 0x47	; 71
    44f4:	ff 4f       	sbci	r31, 0xFF	; 255
    44f6:	80 81       	ld	r24, Z
    44f8:	a8 2f       	mov	r26, r24
    44fa:	b0 e0       	ldi	r27, 0x00	; 0
    44fc:	fe 01       	movw	r30, r28
    44fe:	ee 53       	subi	r30, 0x3E	; 62
    4500:	ff 4f       	sbci	r31, 0xFF	; 255
    4502:	80 81       	ld	r24, Z
    4504:	28 2f       	mov	r18, r24
    4506:	30 e0       	ldi	r19, 0x00	; 0
    4508:	40 e0       	ldi	r20, 0x00	; 0
    450a:	50 e0       	ldi	r21, 0x00	; 0
    450c:	be 01       	movw	r22, r28
    450e:	6d 53       	subi	r22, 0x3D	; 61
    4510:	7f 4f       	sbci	r23, 0xFF	; 255
    4512:	cd 01       	movw	r24, r26
    4514:	88 0f       	add	r24, r24
    4516:	99 1f       	adc	r25, r25
    4518:	88 0f       	add	r24, r24
    451a:	99 1f       	adc	r25, r25
    451c:	fb 01       	movw	r30, r22
    451e:	e8 0f       	add	r30, r24
    4520:	f9 1f       	adc	r31, r25
    4522:	20 83       	st	Z, r18
    4524:	31 83       	std	Z+1, r19	; 0x01
    4526:	42 83       	std	Z+2, r20	; 0x02
    4528:	53 83       	std	Z+3, r21	; 0x03

					/* REPLACE PRESSED NUMBER WITH (*) KEY ON THE LCD FOR SECURITY */
					LCD_voidWritecChar4('*');
    452a:	8a e2       	ldi	r24, 0x2A	; 42
    452c:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>

					/* INCREMENT Password_u8Counter BY ONE TO KEEP ON GET 4 NUMBERS ONLY AS A PASSWORD FOR THE SYSTEM */
					Password_u8Counter++;
    4530:	de 01       	movw	r26, r28
    4532:	a7 54       	subi	r26, 0x47	; 71
    4534:	bf 4f       	sbci	r27, 0xFF	; 255
    4536:	fe 01       	movw	r30, r28
    4538:	e7 54       	subi	r30, 0x47	; 71
    453a:	ff 4f       	sbci	r31, 0xFF	; 255
    453c:	80 81       	ld	r24, Z
    453e:	8f 5f       	subi	r24, 0xFF	; 255
    4540:	8c 93       	st	X, r24
    4542:	2b c0       	rjmp	.+86     	; 0x459a <main+0x730>
				}

				/* CHECK IF THE PRESSED KEY IS ENTER KEY(=) AND Password_u8Counter < 4 ,DOESN'T MAKE ANY THING AND CONTINUE */
				else if((Password_u8Counter < 4) && (Local_u8PressedKey == '=')){
    4544:	fe 01       	movw	r30, r28
    4546:	e7 54       	subi	r30, 0x47	; 71
    4548:	ff 4f       	sbci	r31, 0xFF	; 255
    454a:	80 81       	ld	r24, Z
    454c:	84 30       	cpi	r24, 0x04	; 4
    454e:	30 f4       	brcc	.+12     	; 0x455c <main+0x6f2>
    4550:	fe 01       	movw	r30, r28
    4552:	ee 53       	subi	r30, 0x3E	; 62
    4554:	ff 4f       	sbci	r31, 0xFF	; 255
    4556:	80 81       	ld	r24, Z
    4558:	8d 33       	cpi	r24, 0x3D	; 61
    455a:	f9 f0       	breq	.+62     	; 0x459a <main+0x730>
					continue;
				}

				/* CHECK  IF YOU ALREADY ENTER THE 4-NUMBERS PASSWORD ,AND THE FIFTH PRESSED KEY NOT ENTER KEY(=) ,DOESN'T MAKE ANYTHING AND CONTINUE */
				else if((Password_u8Counter = 4) && (Local_u8PressedKey != '=')){
    455c:	fe 01       	movw	r30, r28
    455e:	e7 54       	subi	r30, 0x47	; 71
    4560:	ff 4f       	sbci	r31, 0xFF	; 255
    4562:	84 e0       	ldi	r24, 0x04	; 4
    4564:	80 83       	st	Z, r24
    4566:	fe 01       	movw	r30, r28
    4568:	ee 53       	subi	r30, 0x3E	; 62
    456a:	ff 4f       	sbci	r31, 0xFF	; 255
    456c:	80 81       	ld	r24, Z
    456e:	8d 33       	cpi	r24, 0x3D	; 61
    4570:	a1 f4       	brne	.+40     	; 0x459a <main+0x730>
					continue;
				}

				/* CHECK IF YOU ALREADY ENTER THE 4-NUMBERS PASSWORD ,AND THE FIFTH PRESSED KEY IS THE ENTERED KEY(=) */
				else if((Password_u8Counter = 4) && (Local_u8PressedKey == '=')){
    4572:	fe 01       	movw	r30, r28
    4574:	e7 54       	subi	r30, 0x47	; 71
    4576:	ff 4f       	sbci	r31, 0xFF	; 255
    4578:	84 e0       	ldi	r24, 0x04	; 4
    457a:	80 83       	st	Z, r24
    457c:	fe 01       	movw	r30, r28
    457e:	ee 53       	subi	r30, 0x3E	; 62
    4580:	ff 4f       	sbci	r31, 0xFF	; 255
    4582:	80 81       	ld	r24, Z
    4584:	8d 33       	cpi	r24, 0x3D	; 61
    4586:	49 f4       	brne	.+18     	; 0x459a <main+0x730>

					/* INCREMENT Password_u8Counter BY ONE TO EXIT FROM THE PASSWORD LOOP */
					Password_u8Counter++;
    4588:	de 01       	movw	r26, r28
    458a:	a7 54       	subi	r26, 0x47	; 71
    458c:	bf 4f       	sbci	r27, 0xFF	; 255
    458e:	fe 01       	movw	r30, r28
    4590:	e7 54       	subi	r30, 0x47	; 71
    4592:	ff 4f       	sbci	r31, 0xFF	; 255
    4594:	80 81       	ld	r24, Z
    4596:	8f 5f       	subi	r24, 0xFF	; 255
    4598:	8c 93       	st	X, r24
			LCD_voidWriteString((u8*)" ENTER HOMES'S");
			LCD_voidGOTOXY(1, 2);
			LCD_voidWriteString((u8*)"PASSWORD:");

			/*CHECK IF YOU ENTERED 4 NUMBERS OF PASSWORD OR NOT */
			while(Password_u8Counter < 5){
    459a:	fe 01       	movw	r30, r28
    459c:	e7 54       	subi	r30, 0x47	; 71
    459e:	ff 4f       	sbci	r31, 0xFF	; 255
    45a0:	80 81       	ld	r24, Z
    45a2:	85 30       	cpi	r24, 0x05	; 5
    45a4:	08 f4       	brcc	.+2      	; 0x45a8 <main+0x73e>
    45a6:	45 cf       	rjmp	.-374    	; 0x4432 <main+0x5c8>
					Password_u8Counter++;
				}
			}

			/* ZEROS THE Password_u8Counter */
			Password_u8Counter = 0;
    45a8:	fe 01       	movw	r30, r28
    45aa:	e7 54       	subi	r30, 0x47	; 71
    45ac:	ff 4f       	sbci	r31, 0xFF	; 255
    45ae:	10 82       	st	Z, r1

			/* MAKE GLOBAL VARIABLE CONTROL = 1 TO GO TO THE ENTERED PASSWORD CHECKER PART OF THE SYSTEM */
			Global_u8Control = 2;
    45b0:	82 e0       	ldi	r24, 0x02	; 2
    45b2:	80 93 c2 03 	sts	0x03C2, r24
    45b6:	22 ce       	rjmp	.-956    	; 0x41fc <main+0x392>
		}

		/* CHECKER PASSWORD PART OF THE SYSTEM PASSWORD */
		else if(Global_u8Control == 2){
    45b8:	80 91 c2 03 	lds	r24, 0x03C2
    45bc:	82 30       	cpi	r24, 0x02	; 2
    45be:	09 f0       	breq	.+2      	; 0x45c2 <main+0x758>
    45c0:	32 c5       	rjmp	.+2660   	; 0x5026 <main+0x11bc>

			/* CHECK IF THE ENTERD PASSWORD IS EQUAL TO THE DEFAULT PASSWORD THROUGHOUT ArrayToInt() FUNCTION
			   WHICH RETURN THE ELEMENT OF THE ARRAY AS A u32 NUMBER
			*/
			if((ArrayToInt(Login_u8Password, 4)) == Default_u8Password){
    45c2:	ce 01       	movw	r24, r28
    45c4:	8d 53       	subi	r24, 0x3D	; 61
    45c6:	9f 4f       	sbci	r25, 0xFF	; 255
    45c8:	64 e0       	ldi	r22, 0x04	; 4
    45ca:	0e 94 9e 31 	call	0x633c	; 0x633c <ArrayToInt>
    45ce:	9b 01       	movw	r18, r22
    45d0:	ac 01       	movw	r20, r24
    45d2:	fe 01       	movw	r30, r28
    45d4:	e2 54       	subi	r30, 0x42	; 66
    45d6:	ff 4f       	sbci	r31, 0xFF	; 255
    45d8:	80 81       	ld	r24, Z
    45da:	91 81       	ldd	r25, Z+1	; 0x01
    45dc:	a2 81       	ldd	r26, Z+2	; 0x02
    45de:	b3 81       	ldd	r27, Z+3	; 0x03
    45e0:	28 17       	cp	r18, r24
    45e2:	39 07       	cpc	r19, r25
    45e4:	4a 07       	cpc	r20, r26
    45e6:	5b 07       	cpc	r21, r27
    45e8:	09 f0       	breq	.+2      	; 0x45ec <main+0x782>
    45ea:	e3 c0       	rjmp	.+454    	; 0x47b2 <main+0x948>

				/* TURN-OFF RED LED ON PORTB PIN0 */
				DIO_voidSetPinValue(PORTB, PIN0, LOW);
    45ec:	81 e0       	ldi	r24, 0x01	; 1
    45ee:	60 e0       	ldi	r22, 0x00	; 0
    45f0:	40 e0       	ldi	r20, 0x00	; 0
    45f2:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

				/* TURN-ON GREEN LED ON PORTB PIN1 */
				DIO_voidSetPinValue(PORTB, PIN1, HIGH);
    45f6:	81 e0       	ldi	r24, 0x01	; 1
    45f8:	61 e0       	ldi	r22, 0x01	; 1
    45fa:	41 e0       	ldi	r20, 0x01	; 1
    45fc:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

				/* SET COMPARE MATCH VALUE IN OCR1A TO THE SPECIFIED NUMBER TO TURN SERVO MOTOR WITH 90 DEGREE CELISIUS */
				TIMER1_voidSetOCR1A(375);
    4600:	87 e7       	ldi	r24, 0x77	; 119
    4602:	91 e0       	ldi	r25, 0x01	; 1
    4604:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <TIMER1_voidSetOCR1A>

				/* CLEAR THE LCD ,THEN GO TO LINE 0 AT POSITION 0 AND WRITE CORRECT ICON THEN THE STRING "CORRECT PASSWORD THE DOOR IS OPEN" */
				LCD_voidClearDisplay();
    4608:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_voidClearDisplay>
				LCD_voidWriteSpecialChar4(ICON_u8Correct, 2, 0, 0);
    460c:	ce 01       	movw	r24, r28
    460e:	86 51       	subi	r24, 0x16	; 22
    4610:	9f 4f       	sbci	r25, 0xFF	; 255
    4612:	62 e0       	ldi	r22, 0x02	; 2
    4614:	40 e0       	ldi	r20, 0x00	; 0
    4616:	20 e0       	ldi	r18, 0x00	; 0
    4618:	0e 94 d5 14 	call	0x29aa	; 0x29aa <LCD_voidWriteSpecialChar4>
				LCD_voidWriteString((u8*)" CORECT PASWORD");
    461c:	87 e9       	ldi	r24, 0x97	; 151
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
				LCD_voidGOTOXY(1, 0);
    4624:	81 e0       	ldi	r24, 0x01	; 1
    4626:	60 e0       	ldi	r22, 0x00	; 0
    4628:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"THE DOOR IS OPEN");
    462c:	87 ea       	ldi	r24, 0xA7	; 167
    462e:	90 e0       	ldi	r25, 0x00	; 0
    4630:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>

				/* WAIT FOR Default_u8Delay SPECIFIED TIME */
				_delay_ms(Default_u8Delay);
    4634:	fe 01       	movw	r30, r28
    4636:	e6 54       	subi	r30, 0x46	; 70
    4638:	ff 4f       	sbci	r31, 0xFF	; 255
    463a:	60 81       	ld	r22, Z
    463c:	71 81       	ldd	r23, Z+1	; 0x01
    463e:	82 81       	ldd	r24, Z+2	; 0x02
    4640:	93 81       	ldd	r25, Z+3	; 0x03
    4642:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    4646:	dc 01       	movw	r26, r24
    4648:	cb 01       	movw	r24, r22
    464a:	fe 01       	movw	r30, r28
    464c:	eb 55       	subi	r30, 0x5B	; 91
    464e:	ff 4f       	sbci	r31, 0xFF	; 255
    4650:	80 83       	st	Z, r24
    4652:	91 83       	std	Z+1, r25	; 0x01
    4654:	a2 83       	std	Z+2, r26	; 0x02
    4656:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4658:	8e 01       	movw	r16, r28
    465a:	0f 55       	subi	r16, 0x5F	; 95
    465c:	1f 4f       	sbci	r17, 0xFF	; 255
    465e:	fe 01       	movw	r30, r28
    4660:	eb 55       	subi	r30, 0x5B	; 91
    4662:	ff 4f       	sbci	r31, 0xFF	; 255
    4664:	60 81       	ld	r22, Z
    4666:	71 81       	ldd	r23, Z+1	; 0x01
    4668:	82 81       	ldd	r24, Z+2	; 0x02
    466a:	93 81       	ldd	r25, Z+3	; 0x03
    466c:	20 e0       	ldi	r18, 0x00	; 0
    466e:	30 e0       	ldi	r19, 0x00	; 0
    4670:	4a e7       	ldi	r20, 0x7A	; 122
    4672:	55 e4       	ldi	r21, 0x45	; 69
    4674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4678:	dc 01       	movw	r26, r24
    467a:	cb 01       	movw	r24, r22
    467c:	f8 01       	movw	r30, r16
    467e:	80 83       	st	Z, r24
    4680:	91 83       	std	Z+1, r25	; 0x01
    4682:	a2 83       	std	Z+2, r26	; 0x02
    4684:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4686:	fe 01       	movw	r30, r28
    4688:	ef 55       	subi	r30, 0x5F	; 95
    468a:	ff 4f       	sbci	r31, 0xFF	; 255
    468c:	60 81       	ld	r22, Z
    468e:	71 81       	ldd	r23, Z+1	; 0x01
    4690:	82 81       	ldd	r24, Z+2	; 0x02
    4692:	93 81       	ldd	r25, Z+3	; 0x03
    4694:	20 e0       	ldi	r18, 0x00	; 0
    4696:	30 e0       	ldi	r19, 0x00	; 0
    4698:	40 e8       	ldi	r20, 0x80	; 128
    469a:	5f e3       	ldi	r21, 0x3F	; 63
    469c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46a0:	88 23       	and	r24, r24
    46a2:	44 f4       	brge	.+16     	; 0x46b4 <main+0x84a>
		__ticks = 1;
    46a4:	fe 01       	movw	r30, r28
    46a6:	e1 56       	subi	r30, 0x61	; 97
    46a8:	ff 4f       	sbci	r31, 0xFF	; 255
    46aa:	81 e0       	ldi	r24, 0x01	; 1
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	91 83       	std	Z+1, r25	; 0x01
    46b0:	80 83       	st	Z, r24
    46b2:	64 c0       	rjmp	.+200    	; 0x477c <main+0x912>
	else if (__tmp > 65535)
    46b4:	fe 01       	movw	r30, r28
    46b6:	ef 55       	subi	r30, 0x5F	; 95
    46b8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ba:	60 81       	ld	r22, Z
    46bc:	71 81       	ldd	r23, Z+1	; 0x01
    46be:	82 81       	ldd	r24, Z+2	; 0x02
    46c0:	93 81       	ldd	r25, Z+3	; 0x03
    46c2:	20 e0       	ldi	r18, 0x00	; 0
    46c4:	3f ef       	ldi	r19, 0xFF	; 255
    46c6:	4f e7       	ldi	r20, 0x7F	; 127
    46c8:	57 e4       	ldi	r21, 0x47	; 71
    46ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46ce:	18 16       	cp	r1, r24
    46d0:	0c f0       	brlt	.+2      	; 0x46d4 <main+0x86a>
    46d2:	43 c0       	rjmp	.+134    	; 0x475a <main+0x8f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46d4:	fe 01       	movw	r30, r28
    46d6:	eb 55       	subi	r30, 0x5B	; 91
    46d8:	ff 4f       	sbci	r31, 0xFF	; 255
    46da:	60 81       	ld	r22, Z
    46dc:	71 81       	ldd	r23, Z+1	; 0x01
    46de:	82 81       	ldd	r24, Z+2	; 0x02
    46e0:	93 81       	ldd	r25, Z+3	; 0x03
    46e2:	20 e0       	ldi	r18, 0x00	; 0
    46e4:	30 e0       	ldi	r19, 0x00	; 0
    46e6:	40 e2       	ldi	r20, 0x20	; 32
    46e8:	51 e4       	ldi	r21, 0x41	; 65
    46ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46ee:	dc 01       	movw	r26, r24
    46f0:	cb 01       	movw	r24, r22
    46f2:	8e 01       	movw	r16, r28
    46f4:	01 56       	subi	r16, 0x61	; 97
    46f6:	1f 4f       	sbci	r17, 0xFF	; 255
    46f8:	bc 01       	movw	r22, r24
    46fa:	cd 01       	movw	r24, r26
    46fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4700:	dc 01       	movw	r26, r24
    4702:	cb 01       	movw	r24, r22
    4704:	f8 01       	movw	r30, r16
    4706:	91 83       	std	Z+1, r25	; 0x01
    4708:	80 83       	st	Z, r24
    470a:	1f c0       	rjmp	.+62     	; 0x474a <main+0x8e0>
    470c:	fe 01       	movw	r30, r28
    470e:	e3 56       	subi	r30, 0x63	; 99
    4710:	ff 4f       	sbci	r31, 0xFF	; 255
    4712:	80 e9       	ldi	r24, 0x90	; 144
    4714:	91 e0       	ldi	r25, 0x01	; 1
    4716:	91 83       	std	Z+1, r25	; 0x01
    4718:	80 83       	st	Z, r24
    471a:	fe 01       	movw	r30, r28
    471c:	e3 56       	subi	r30, 0x63	; 99
    471e:	ff 4f       	sbci	r31, 0xFF	; 255
    4720:	80 81       	ld	r24, Z
    4722:	91 81       	ldd	r25, Z+1	; 0x01
    4724:	01 97       	sbiw	r24, 0x01	; 1
    4726:	f1 f7       	brne	.-4      	; 0x4724 <main+0x8ba>
    4728:	fe 01       	movw	r30, r28
    472a:	e3 56       	subi	r30, 0x63	; 99
    472c:	ff 4f       	sbci	r31, 0xFF	; 255
    472e:	91 83       	std	Z+1, r25	; 0x01
    4730:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4732:	de 01       	movw	r26, r28
    4734:	a1 56       	subi	r26, 0x61	; 97
    4736:	bf 4f       	sbci	r27, 0xFF	; 255
    4738:	fe 01       	movw	r30, r28
    473a:	e1 56       	subi	r30, 0x61	; 97
    473c:	ff 4f       	sbci	r31, 0xFF	; 255
    473e:	80 81       	ld	r24, Z
    4740:	91 81       	ldd	r25, Z+1	; 0x01
    4742:	01 97       	sbiw	r24, 0x01	; 1
    4744:	11 96       	adiw	r26, 0x01	; 1
    4746:	9c 93       	st	X, r25
    4748:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    474a:	fe 01       	movw	r30, r28
    474c:	e1 56       	subi	r30, 0x61	; 97
    474e:	ff 4f       	sbci	r31, 0xFF	; 255
    4750:	80 81       	ld	r24, Z
    4752:	91 81       	ldd	r25, Z+1	; 0x01
    4754:	00 97       	sbiw	r24, 0x00	; 0
    4756:	d1 f6       	brne	.-76     	; 0x470c <main+0x8a2>
    4758:	28 c0       	rjmp	.+80     	; 0x47aa <main+0x940>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    475a:	8e 01       	movw	r16, r28
    475c:	01 56       	subi	r16, 0x61	; 97
    475e:	1f 4f       	sbci	r17, 0xFF	; 255
    4760:	fe 01       	movw	r30, r28
    4762:	ef 55       	subi	r30, 0x5F	; 95
    4764:	ff 4f       	sbci	r31, 0xFF	; 255
    4766:	60 81       	ld	r22, Z
    4768:	71 81       	ldd	r23, Z+1	; 0x01
    476a:	82 81       	ldd	r24, Z+2	; 0x02
    476c:	93 81       	ldd	r25, Z+3	; 0x03
    476e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4772:	dc 01       	movw	r26, r24
    4774:	cb 01       	movw	r24, r22
    4776:	f8 01       	movw	r30, r16
    4778:	91 83       	std	Z+1, r25	; 0x01
    477a:	80 83       	st	Z, r24
    477c:	de 01       	movw	r26, r28
    477e:	a5 56       	subi	r26, 0x65	; 101
    4780:	bf 4f       	sbci	r27, 0xFF	; 255
    4782:	fe 01       	movw	r30, r28
    4784:	e1 56       	subi	r30, 0x61	; 97
    4786:	ff 4f       	sbci	r31, 0xFF	; 255
    4788:	80 81       	ld	r24, Z
    478a:	91 81       	ldd	r25, Z+1	; 0x01
    478c:	11 96       	adiw	r26, 0x01	; 1
    478e:	9c 93       	st	X, r25
    4790:	8e 93       	st	-X, r24
    4792:	fe 01       	movw	r30, r28
    4794:	e5 56       	subi	r30, 0x65	; 101
    4796:	ff 4f       	sbci	r31, 0xFF	; 255
    4798:	80 81       	ld	r24, Z
    479a:	91 81       	ldd	r25, Z+1	; 0x01
    479c:	01 97       	sbiw	r24, 0x01	; 1
    479e:	f1 f7       	brne	.-4      	; 0x479c <main+0x932>
    47a0:	fe 01       	movw	r30, r28
    47a2:	e5 56       	subi	r30, 0x65	; 101
    47a4:	ff 4f       	sbci	r31, 0xFF	; 255
    47a6:	91 83       	std	Z+1, r25	; 0x01
    47a8:	80 83       	st	Z, r24

				/* GO TO TEMPERATURE SENSOR AREA */
				Global_u8Control = 3;
    47aa:	83 e0       	ldi	r24, 0x03	; 3
    47ac:	80 93 c2 03 	sts	0x03C2, r24
    47b0:	25 cd       	rjmp	.-1462   	; 0x41fc <main+0x392>
			}

			/* CHECK IF THE ENTERD PASSWORD IS EQUAL TO THE DEFAULT PASSWORD */
			else{
				/* CHECK ON THE NUMBER OF TIMES AT WHICH PASSWORD ENTERD WAS INCORRECT */
				while(INCORRECT_u8Password <= 3){
    47b2:	fe 01       	movw	r30, r28
    47b4:	e8 54       	subi	r30, 0x48	; 72
    47b6:	ff 4f       	sbci	r31, 0xFF	; 255
    47b8:	80 81       	ld	r24, Z
    47ba:	84 30       	cpi	r24, 0x04	; 4
    47bc:	08 f0       	brcs	.+2      	; 0x47c0 <main+0x956>
    47be:	e0 c0       	rjmp	.+448    	; 0x4980 <main+0xb16>

					/* CLEAR DISPLAY ,THEN GO TO LINE 0 AT POSITION 3 AND WRITE THE STRING "INCORRECT PASSWORD...!" */
					LCD_voidClearDisplay();
    47c0:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_voidClearDisplay>
					LCD_voidWriteSpecialChar4(ICON_u8Wrong ,1 ,0 ,3);
    47c4:	ce 01       	movw	r24, r28
    47c6:	8e 51       	subi	r24, 0x1E	; 30
    47c8:	9f 4f       	sbci	r25, 0xFF	; 255
    47ca:	61 e0       	ldi	r22, 0x01	; 1
    47cc:	40 e0       	ldi	r20, 0x00	; 0
    47ce:	23 e0       	ldi	r18, 0x03	; 3
    47d0:	0e 94 d5 14 	call	0x29aa	; 0x29aa <LCD_voidWriteSpecialChar4>
					LCD_voidGOTOXY(0, 4);
    47d4:	80 e0       	ldi	r24, 0x00	; 0
    47d6:	64 e0       	ldi	r22, 0x04	; 4
    47d8:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
					LCD_voidWriteString((u8*)"INCORRECT");
    47dc:	88 eb       	ldi	r24, 0xB8	; 184
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
					LCD_voidGOTOXY(1, 2);
    47e4:	81 e0       	ldi	r24, 0x01	; 1
    47e6:	62 e0       	ldi	r22, 0x02	; 2
    47e8:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
					LCD_voidWriteString((u8*)"PASSWORD...!");
    47ec:	82 ec       	ldi	r24, 0xC2	; 194
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>

					/* WAIT FOR Default_u8Delay SPECIFIED TIME */
					_delay_ms(Default_u8Delay);
    47f4:	fe 01       	movw	r30, r28
    47f6:	e6 54       	subi	r30, 0x46	; 70
    47f8:	ff 4f       	sbci	r31, 0xFF	; 255
    47fa:	60 81       	ld	r22, Z
    47fc:	71 81       	ldd	r23, Z+1	; 0x01
    47fe:	82 81       	ldd	r24, Z+2	; 0x02
    4800:	93 81       	ldd	r25, Z+3	; 0x03
    4802:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    4806:	dc 01       	movw	r26, r24
    4808:	cb 01       	movw	r24, r22
    480a:	fe 01       	movw	r30, r28
    480c:	e9 56       	subi	r30, 0x69	; 105
    480e:	ff 4f       	sbci	r31, 0xFF	; 255
    4810:	80 83       	st	Z, r24
    4812:	91 83       	std	Z+1, r25	; 0x01
    4814:	a2 83       	std	Z+2, r26	; 0x02
    4816:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4818:	8e 01       	movw	r16, r28
    481a:	0d 56       	subi	r16, 0x6D	; 109
    481c:	1f 4f       	sbci	r17, 0xFF	; 255
    481e:	fe 01       	movw	r30, r28
    4820:	e9 56       	subi	r30, 0x69	; 105
    4822:	ff 4f       	sbci	r31, 0xFF	; 255
    4824:	60 81       	ld	r22, Z
    4826:	71 81       	ldd	r23, Z+1	; 0x01
    4828:	82 81       	ldd	r24, Z+2	; 0x02
    482a:	93 81       	ldd	r25, Z+3	; 0x03
    482c:	20 e0       	ldi	r18, 0x00	; 0
    482e:	30 e0       	ldi	r19, 0x00	; 0
    4830:	4a e7       	ldi	r20, 0x7A	; 122
    4832:	55 e4       	ldi	r21, 0x45	; 69
    4834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4838:	dc 01       	movw	r26, r24
    483a:	cb 01       	movw	r24, r22
    483c:	f8 01       	movw	r30, r16
    483e:	80 83       	st	Z, r24
    4840:	91 83       	std	Z+1, r25	; 0x01
    4842:	a2 83       	std	Z+2, r26	; 0x02
    4844:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4846:	fe 01       	movw	r30, r28
    4848:	ed 56       	subi	r30, 0x6D	; 109
    484a:	ff 4f       	sbci	r31, 0xFF	; 255
    484c:	60 81       	ld	r22, Z
    484e:	71 81       	ldd	r23, Z+1	; 0x01
    4850:	82 81       	ldd	r24, Z+2	; 0x02
    4852:	93 81       	ldd	r25, Z+3	; 0x03
    4854:	20 e0       	ldi	r18, 0x00	; 0
    4856:	30 e0       	ldi	r19, 0x00	; 0
    4858:	40 e8       	ldi	r20, 0x80	; 128
    485a:	5f e3       	ldi	r21, 0x3F	; 63
    485c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4860:	88 23       	and	r24, r24
    4862:	44 f4       	brge	.+16     	; 0x4874 <main+0xa0a>
		__ticks = 1;
    4864:	fe 01       	movw	r30, r28
    4866:	ef 56       	subi	r30, 0x6F	; 111
    4868:	ff 4f       	sbci	r31, 0xFF	; 255
    486a:	81 e0       	ldi	r24, 0x01	; 1
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	91 83       	std	Z+1, r25	; 0x01
    4870:	80 83       	st	Z, r24
    4872:	64 c0       	rjmp	.+200    	; 0x493c <main+0xad2>
	else if (__tmp > 65535)
    4874:	fe 01       	movw	r30, r28
    4876:	ed 56       	subi	r30, 0x6D	; 109
    4878:	ff 4f       	sbci	r31, 0xFF	; 255
    487a:	60 81       	ld	r22, Z
    487c:	71 81       	ldd	r23, Z+1	; 0x01
    487e:	82 81       	ldd	r24, Z+2	; 0x02
    4880:	93 81       	ldd	r25, Z+3	; 0x03
    4882:	20 e0       	ldi	r18, 0x00	; 0
    4884:	3f ef       	ldi	r19, 0xFF	; 255
    4886:	4f e7       	ldi	r20, 0x7F	; 127
    4888:	57 e4       	ldi	r21, 0x47	; 71
    488a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    488e:	18 16       	cp	r1, r24
    4890:	0c f0       	brlt	.+2      	; 0x4894 <main+0xa2a>
    4892:	43 c0       	rjmp	.+134    	; 0x491a <main+0xab0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4894:	fe 01       	movw	r30, r28
    4896:	e9 56       	subi	r30, 0x69	; 105
    4898:	ff 4f       	sbci	r31, 0xFF	; 255
    489a:	60 81       	ld	r22, Z
    489c:	71 81       	ldd	r23, Z+1	; 0x01
    489e:	82 81       	ldd	r24, Z+2	; 0x02
    48a0:	93 81       	ldd	r25, Z+3	; 0x03
    48a2:	20 e0       	ldi	r18, 0x00	; 0
    48a4:	30 e0       	ldi	r19, 0x00	; 0
    48a6:	40 e2       	ldi	r20, 0x20	; 32
    48a8:	51 e4       	ldi	r21, 0x41	; 65
    48aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ae:	dc 01       	movw	r26, r24
    48b0:	cb 01       	movw	r24, r22
    48b2:	8e 01       	movw	r16, r28
    48b4:	0f 56       	subi	r16, 0x6F	; 111
    48b6:	1f 4f       	sbci	r17, 0xFF	; 255
    48b8:	bc 01       	movw	r22, r24
    48ba:	cd 01       	movw	r24, r26
    48bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48c0:	dc 01       	movw	r26, r24
    48c2:	cb 01       	movw	r24, r22
    48c4:	f8 01       	movw	r30, r16
    48c6:	91 83       	std	Z+1, r25	; 0x01
    48c8:	80 83       	st	Z, r24
    48ca:	1f c0       	rjmp	.+62     	; 0x490a <main+0xaa0>
    48cc:	fe 01       	movw	r30, r28
    48ce:	e1 57       	subi	r30, 0x71	; 113
    48d0:	ff 4f       	sbci	r31, 0xFF	; 255
    48d2:	80 e9       	ldi	r24, 0x90	; 144
    48d4:	91 e0       	ldi	r25, 0x01	; 1
    48d6:	91 83       	std	Z+1, r25	; 0x01
    48d8:	80 83       	st	Z, r24
    48da:	fe 01       	movw	r30, r28
    48dc:	e1 57       	subi	r30, 0x71	; 113
    48de:	ff 4f       	sbci	r31, 0xFF	; 255
    48e0:	80 81       	ld	r24, Z
    48e2:	91 81       	ldd	r25, Z+1	; 0x01
    48e4:	01 97       	sbiw	r24, 0x01	; 1
    48e6:	f1 f7       	brne	.-4      	; 0x48e4 <main+0xa7a>
    48e8:	fe 01       	movw	r30, r28
    48ea:	e1 57       	subi	r30, 0x71	; 113
    48ec:	ff 4f       	sbci	r31, 0xFF	; 255
    48ee:	91 83       	std	Z+1, r25	; 0x01
    48f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48f2:	de 01       	movw	r26, r28
    48f4:	af 56       	subi	r26, 0x6F	; 111
    48f6:	bf 4f       	sbci	r27, 0xFF	; 255
    48f8:	fe 01       	movw	r30, r28
    48fa:	ef 56       	subi	r30, 0x6F	; 111
    48fc:	ff 4f       	sbci	r31, 0xFF	; 255
    48fe:	80 81       	ld	r24, Z
    4900:	91 81       	ldd	r25, Z+1	; 0x01
    4902:	01 97       	sbiw	r24, 0x01	; 1
    4904:	11 96       	adiw	r26, 0x01	; 1
    4906:	9c 93       	st	X, r25
    4908:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    490a:	fe 01       	movw	r30, r28
    490c:	ef 56       	subi	r30, 0x6F	; 111
    490e:	ff 4f       	sbci	r31, 0xFF	; 255
    4910:	80 81       	ld	r24, Z
    4912:	91 81       	ldd	r25, Z+1	; 0x01
    4914:	00 97       	sbiw	r24, 0x00	; 0
    4916:	d1 f6       	brne	.-76     	; 0x48cc <main+0xa62>
    4918:	27 c0       	rjmp	.+78     	; 0x4968 <main+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    491a:	8e 01       	movw	r16, r28
    491c:	0f 56       	subi	r16, 0x6F	; 111
    491e:	1f 4f       	sbci	r17, 0xFF	; 255
    4920:	fe 01       	movw	r30, r28
    4922:	ed 56       	subi	r30, 0x6D	; 109
    4924:	ff 4f       	sbci	r31, 0xFF	; 255
    4926:	60 81       	ld	r22, Z
    4928:	71 81       	ldd	r23, Z+1	; 0x01
    492a:	82 81       	ldd	r24, Z+2	; 0x02
    492c:	93 81       	ldd	r25, Z+3	; 0x03
    492e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4932:	dc 01       	movw	r26, r24
    4934:	cb 01       	movw	r24, r22
    4936:	f8 01       	movw	r30, r16
    4938:	91 83       	std	Z+1, r25	; 0x01
    493a:	80 83       	st	Z, r24
    493c:	de 01       	movw	r26, r28
    493e:	a3 57       	subi	r26, 0x73	; 115
    4940:	bf 4f       	sbci	r27, 0xFF	; 255
    4942:	fe 01       	movw	r30, r28
    4944:	ef 56       	subi	r30, 0x6F	; 111
    4946:	ff 4f       	sbci	r31, 0xFF	; 255
    4948:	80 81       	ld	r24, Z
    494a:	91 81       	ldd	r25, Z+1	; 0x01
    494c:	8d 93       	st	X+, r24
    494e:	9c 93       	st	X, r25
    4950:	fe 01       	movw	r30, r28
    4952:	e3 57       	subi	r30, 0x73	; 115
    4954:	ff 4f       	sbci	r31, 0xFF	; 255
    4956:	80 81       	ld	r24, Z
    4958:	91 81       	ldd	r25, Z+1	; 0x01
    495a:	01 97       	sbiw	r24, 0x01	; 1
    495c:	f1 f7       	brne	.-4      	; 0x495a <main+0xaf0>
    495e:	fe 01       	movw	r30, r28
    4960:	e3 57       	subi	r30, 0x73	; 115
    4962:	ff 4f       	sbci	r31, 0xFF	; 255
    4964:	91 83       	std	Z+1, r25	; 0x01
    4966:	80 83       	st	Z, r24

					/* MAKE Global_u8Control = 1 TO RENTER THE CORRECT PASSWORD */
					Global_u8Control = 1;
    4968:	81 e0       	ldi	r24, 0x01	; 1
    496a:	80 93 c2 03 	sts	0x03C2, r24

					/* INCREMENT INCORRECT_u8Password VARIABLE BY ONE TO CALCULATE NUMBER OF TIMES PASSWORD ENTERD */
					INCORRECT_u8Password++;
    496e:	de 01       	movw	r26, r28
    4970:	a8 54       	subi	r26, 0x48	; 72
    4972:	bf 4f       	sbci	r27, 0xFF	; 255
    4974:	fe 01       	movw	r30, r28
    4976:	e8 54       	subi	r30, 0x48	; 72
    4978:	ff 4f       	sbci	r31, 0xFF	; 255
    497a:	80 81       	ld	r24, Z
    497c:	8f 5f       	subi	r24, 0xFF	; 255
    497e:	8c 93       	st	X, r24
					/* BREAK TO EXIT FROM THIS LOOP */
					break;
				}

				/* CHECK IF YOU ENTERD PASSWORD 3 TIMES INCORRECTLY */
				if(INCORRECT_u8Password == 4){
    4980:	fe 01       	movw	r30, r28
    4982:	e8 54       	subi	r30, 0x48	; 72
    4984:	ff 4f       	sbci	r31, 0xFF	; 255
    4986:	80 81       	ld	r24, Z
    4988:	84 30       	cpi	r24, 0x04	; 4
    498a:	09 f0       	breq	.+2      	; 0x498e <main+0xb24>
    498c:	37 cc       	rjmp	.-1938   	; 0x41fc <main+0x392>

					/* RESET INCORRECT_u8Password VARIABLE TO ONE AS AN INITIALIZED VALUE */
					INCORRECT_u8Password = 1;
    498e:	fe 01       	movw	r30, r28
    4990:	e8 54       	subi	r30, 0x48	; 72
    4992:	ff 4f       	sbci	r31, 0xFF	; 255
    4994:	81 e0       	ldi	r24, 0x01	; 1
    4996:	80 83       	st	Z, r24

					/* DISPLAY THE STRING "Oops..! PASSWORD ENTERD 3 TIMES.. INCORRECTLY SORRY YOU... CAN'T ENTER THE SMART HOME UNTILL...
					   WAIT 1 MINUTE" ACCORDING TO LCD_voidClearDisplay() , LCD_voidGOTOXY() ,LCD_voidWriteString() ,and _delay_ms() FUNCTIONS
					*/
					LCD_voidClearDisplay();
    4998:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_voidClearDisplay>
					LCD_voidWriteString((u8*)"Oops..! PASSWORD");
    499c:	8f ec       	ldi	r24, 0xCF	; 207
    499e:	90 e0       	ldi	r25, 0x00	; 0
    49a0:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
					LCD_voidGOTOXY(1, 0);
    49a4:	81 e0       	ldi	r24, 0x01	; 1
    49a6:	60 e0       	ldi	r22, 0x00	; 0
    49a8:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
					LCD_voidWriteString((u8*)"ENTERD 3 TIMES..");
    49ac:	80 ee       	ldi	r24, 0xE0	; 224
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
					_delay_ms(Default_u8Delay);
    49b4:	fe 01       	movw	r30, r28
    49b6:	e6 54       	subi	r30, 0x46	; 70
    49b8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ba:	60 81       	ld	r22, Z
    49bc:	71 81       	ldd	r23, Z+1	; 0x01
    49be:	82 81       	ldd	r24, Z+2	; 0x02
    49c0:	93 81       	ldd	r25, Z+3	; 0x03
    49c2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    49c6:	dc 01       	movw	r26, r24
    49c8:	cb 01       	movw	r24, r22
    49ca:	fe 01       	movw	r30, r28
    49cc:	e7 57       	subi	r30, 0x77	; 119
    49ce:	ff 4f       	sbci	r31, 0xFF	; 255
    49d0:	80 83       	st	Z, r24
    49d2:	91 83       	std	Z+1, r25	; 0x01
    49d4:	a2 83       	std	Z+2, r26	; 0x02
    49d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49d8:	8e 01       	movw	r16, r28
    49da:	0b 57       	subi	r16, 0x7B	; 123
    49dc:	1f 4f       	sbci	r17, 0xFF	; 255
    49de:	fe 01       	movw	r30, r28
    49e0:	e7 57       	subi	r30, 0x77	; 119
    49e2:	ff 4f       	sbci	r31, 0xFF	; 255
    49e4:	60 81       	ld	r22, Z
    49e6:	71 81       	ldd	r23, Z+1	; 0x01
    49e8:	82 81       	ldd	r24, Z+2	; 0x02
    49ea:	93 81       	ldd	r25, Z+3	; 0x03
    49ec:	20 e0       	ldi	r18, 0x00	; 0
    49ee:	30 e0       	ldi	r19, 0x00	; 0
    49f0:	4a e7       	ldi	r20, 0x7A	; 122
    49f2:	55 e4       	ldi	r21, 0x45	; 69
    49f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49f8:	dc 01       	movw	r26, r24
    49fa:	cb 01       	movw	r24, r22
    49fc:	f8 01       	movw	r30, r16
    49fe:	80 83       	st	Z, r24
    4a00:	91 83       	std	Z+1, r25	; 0x01
    4a02:	a2 83       	std	Z+2, r26	; 0x02
    4a04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a06:	fe 01       	movw	r30, r28
    4a08:	eb 57       	subi	r30, 0x7B	; 123
    4a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0c:	60 81       	ld	r22, Z
    4a0e:	71 81       	ldd	r23, Z+1	; 0x01
    4a10:	82 81       	ldd	r24, Z+2	; 0x02
    4a12:	93 81       	ldd	r25, Z+3	; 0x03
    4a14:	20 e0       	ldi	r18, 0x00	; 0
    4a16:	30 e0       	ldi	r19, 0x00	; 0
    4a18:	40 e8       	ldi	r20, 0x80	; 128
    4a1a:	5f e3       	ldi	r21, 0x3F	; 63
    4a1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a20:	88 23       	and	r24, r24
    4a22:	44 f4       	brge	.+16     	; 0x4a34 <main+0xbca>
		__ticks = 1;
    4a24:	fe 01       	movw	r30, r28
    4a26:	ed 57       	subi	r30, 0x7D	; 125
    4a28:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2a:	81 e0       	ldi	r24, 0x01	; 1
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	91 83       	std	Z+1, r25	; 0x01
    4a30:	80 83       	st	Z, r24
    4a32:	64 c0       	rjmp	.+200    	; 0x4afc <main+0xc92>
	else if (__tmp > 65535)
    4a34:	fe 01       	movw	r30, r28
    4a36:	eb 57       	subi	r30, 0x7B	; 123
    4a38:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3a:	60 81       	ld	r22, Z
    4a3c:	71 81       	ldd	r23, Z+1	; 0x01
    4a3e:	82 81       	ldd	r24, Z+2	; 0x02
    4a40:	93 81       	ldd	r25, Z+3	; 0x03
    4a42:	20 e0       	ldi	r18, 0x00	; 0
    4a44:	3f ef       	ldi	r19, 0xFF	; 255
    4a46:	4f e7       	ldi	r20, 0x7F	; 127
    4a48:	57 e4       	ldi	r21, 0x47	; 71
    4a4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a4e:	18 16       	cp	r1, r24
    4a50:	0c f0       	brlt	.+2      	; 0x4a54 <main+0xbea>
    4a52:	43 c0       	rjmp	.+134    	; 0x4ada <main+0xc70>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a54:	fe 01       	movw	r30, r28
    4a56:	e7 57       	subi	r30, 0x77	; 119
    4a58:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5a:	60 81       	ld	r22, Z
    4a5c:	71 81       	ldd	r23, Z+1	; 0x01
    4a5e:	82 81       	ldd	r24, Z+2	; 0x02
    4a60:	93 81       	ldd	r25, Z+3	; 0x03
    4a62:	20 e0       	ldi	r18, 0x00	; 0
    4a64:	30 e0       	ldi	r19, 0x00	; 0
    4a66:	40 e2       	ldi	r20, 0x20	; 32
    4a68:	51 e4       	ldi	r21, 0x41	; 65
    4a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a6e:	dc 01       	movw	r26, r24
    4a70:	cb 01       	movw	r24, r22
    4a72:	8e 01       	movw	r16, r28
    4a74:	0d 57       	subi	r16, 0x7D	; 125
    4a76:	1f 4f       	sbci	r17, 0xFF	; 255
    4a78:	bc 01       	movw	r22, r24
    4a7a:	cd 01       	movw	r24, r26
    4a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a80:	dc 01       	movw	r26, r24
    4a82:	cb 01       	movw	r24, r22
    4a84:	f8 01       	movw	r30, r16
    4a86:	91 83       	std	Z+1, r25	; 0x01
    4a88:	80 83       	st	Z, r24
    4a8a:	1f c0       	rjmp	.+62     	; 0x4aca <main+0xc60>
    4a8c:	fe 01       	movw	r30, r28
    4a8e:	ef 57       	subi	r30, 0x7F	; 127
    4a90:	ff 4f       	sbci	r31, 0xFF	; 255
    4a92:	80 e9       	ldi	r24, 0x90	; 144
    4a94:	91 e0       	ldi	r25, 0x01	; 1
    4a96:	91 83       	std	Z+1, r25	; 0x01
    4a98:	80 83       	st	Z, r24
    4a9a:	fe 01       	movw	r30, r28
    4a9c:	ef 57       	subi	r30, 0x7F	; 127
    4a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa0:	80 81       	ld	r24, Z
    4aa2:	91 81       	ldd	r25, Z+1	; 0x01
    4aa4:	01 97       	sbiw	r24, 0x01	; 1
    4aa6:	f1 f7       	brne	.-4      	; 0x4aa4 <main+0xc3a>
    4aa8:	fe 01       	movw	r30, r28
    4aaa:	ef 57       	subi	r30, 0x7F	; 127
    4aac:	ff 4f       	sbci	r31, 0xFF	; 255
    4aae:	91 83       	std	Z+1, r25	; 0x01
    4ab0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ab2:	de 01       	movw	r26, r28
    4ab4:	ad 57       	subi	r26, 0x7D	; 125
    4ab6:	bf 4f       	sbci	r27, 0xFF	; 255
    4ab8:	fe 01       	movw	r30, r28
    4aba:	ed 57       	subi	r30, 0x7D	; 125
    4abc:	ff 4f       	sbci	r31, 0xFF	; 255
    4abe:	80 81       	ld	r24, Z
    4ac0:	91 81       	ldd	r25, Z+1	; 0x01
    4ac2:	01 97       	sbiw	r24, 0x01	; 1
    4ac4:	11 96       	adiw	r26, 0x01	; 1
    4ac6:	9c 93       	st	X, r25
    4ac8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aca:	fe 01       	movw	r30, r28
    4acc:	ed 57       	subi	r30, 0x7D	; 125
    4ace:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad0:	80 81       	ld	r24, Z
    4ad2:	91 81       	ldd	r25, Z+1	; 0x01
    4ad4:	00 97       	sbiw	r24, 0x00	; 0
    4ad6:	d1 f6       	brne	.-76     	; 0x4a8c <main+0xc22>
    4ad8:	27 c0       	rjmp	.+78     	; 0x4b28 <main+0xcbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ada:	8e 01       	movw	r16, r28
    4adc:	0d 57       	subi	r16, 0x7D	; 125
    4ade:	1f 4f       	sbci	r17, 0xFF	; 255
    4ae0:	fe 01       	movw	r30, r28
    4ae2:	eb 57       	subi	r30, 0x7B	; 123
    4ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae6:	60 81       	ld	r22, Z
    4ae8:	71 81       	ldd	r23, Z+1	; 0x01
    4aea:	82 81       	ldd	r24, Z+2	; 0x02
    4aec:	93 81       	ldd	r25, Z+3	; 0x03
    4aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4af2:	dc 01       	movw	r26, r24
    4af4:	cb 01       	movw	r24, r22
    4af6:	f8 01       	movw	r30, r16
    4af8:	91 83       	std	Z+1, r25	; 0x01
    4afa:	80 83       	st	Z, r24
    4afc:	de 01       	movw	r26, r28
    4afe:	a1 58       	subi	r26, 0x81	; 129
    4b00:	bf 4f       	sbci	r27, 0xFF	; 255
    4b02:	fe 01       	movw	r30, r28
    4b04:	ed 57       	subi	r30, 0x7D	; 125
    4b06:	ff 4f       	sbci	r31, 0xFF	; 255
    4b08:	80 81       	ld	r24, Z
    4b0a:	91 81       	ldd	r25, Z+1	; 0x01
    4b0c:	8d 93       	st	X+, r24
    4b0e:	9c 93       	st	X, r25
    4b10:	fe 01       	movw	r30, r28
    4b12:	e1 58       	subi	r30, 0x81	; 129
    4b14:	ff 4f       	sbci	r31, 0xFF	; 255
    4b16:	80 81       	ld	r24, Z
    4b18:	91 81       	ldd	r25, Z+1	; 0x01
    4b1a:	01 97       	sbiw	r24, 0x01	; 1
    4b1c:	f1 f7       	brne	.-4      	; 0x4b1a <main+0xcb0>
    4b1e:	fe 01       	movw	r30, r28
    4b20:	e1 58       	subi	r30, 0x81	; 129
    4b22:	ff 4f       	sbci	r31, 0xFF	; 255
    4b24:	91 83       	std	Z+1, r25	; 0x01
    4b26:	80 83       	st	Z, r24
					LCD_voidClearDisplay();
    4b28:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_voidClearDisplay>
					LCD_voidGOTOXY(0, 0);
    4b2c:	80 e0       	ldi	r24, 0x00	; 0
    4b2e:	60 e0       	ldi	r22, 0x00	; 0
    4b30:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
					LCD_voidWriteString((u8*)"INCORECTLY ,SORY");
    4b34:	81 ef       	ldi	r24, 0xF1	; 241
    4b36:	90 e0       	ldi	r25, 0x00	; 0
    4b38:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
					LCD_voidGOTOXY(1, 0);
    4b3c:	81 e0       	ldi	r24, 0x01	; 1
    4b3e:	60 e0       	ldi	r22, 0x00	; 0
    4b40:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
					LCD_voidWriteString((u8*)"YOU CAN'T ENTER.");
    4b44:	82 e0       	ldi	r24, 0x02	; 2
    4b46:	91 e0       	ldi	r25, 0x01	; 1
    4b48:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
					_delay_ms(Default_u8Delay);
    4b4c:	fe 01       	movw	r30, r28
    4b4e:	e6 54       	subi	r30, 0x46	; 70
    4b50:	ff 4f       	sbci	r31, 0xFF	; 255
    4b52:	60 81       	ld	r22, Z
    4b54:	71 81       	ldd	r23, Z+1	; 0x01
    4b56:	82 81       	ldd	r24, Z+2	; 0x02
    4b58:	93 81       	ldd	r25, Z+3	; 0x03
    4b5a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    4b5e:	dc 01       	movw	r26, r24
    4b60:	cb 01       	movw	r24, r22
    4b62:	fe 01       	movw	r30, r28
    4b64:	e5 58       	subi	r30, 0x85	; 133
    4b66:	ff 4f       	sbci	r31, 0xFF	; 255
    4b68:	80 83       	st	Z, r24
    4b6a:	91 83       	std	Z+1, r25	; 0x01
    4b6c:	a2 83       	std	Z+2, r26	; 0x02
    4b6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b70:	8e 01       	movw	r16, r28
    4b72:	09 58       	subi	r16, 0x89	; 137
    4b74:	1f 4f       	sbci	r17, 0xFF	; 255
    4b76:	fe 01       	movw	r30, r28
    4b78:	e5 58       	subi	r30, 0x85	; 133
    4b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b7c:	60 81       	ld	r22, Z
    4b7e:	71 81       	ldd	r23, Z+1	; 0x01
    4b80:	82 81       	ldd	r24, Z+2	; 0x02
    4b82:	93 81       	ldd	r25, Z+3	; 0x03
    4b84:	20 e0       	ldi	r18, 0x00	; 0
    4b86:	30 e0       	ldi	r19, 0x00	; 0
    4b88:	4a e7       	ldi	r20, 0x7A	; 122
    4b8a:	55 e4       	ldi	r21, 0x45	; 69
    4b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b90:	dc 01       	movw	r26, r24
    4b92:	cb 01       	movw	r24, r22
    4b94:	f8 01       	movw	r30, r16
    4b96:	80 83       	st	Z, r24
    4b98:	91 83       	std	Z+1, r25	; 0x01
    4b9a:	a2 83       	std	Z+2, r26	; 0x02
    4b9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b9e:	fe 01       	movw	r30, r28
    4ba0:	e9 58       	subi	r30, 0x89	; 137
    4ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba4:	60 81       	ld	r22, Z
    4ba6:	71 81       	ldd	r23, Z+1	; 0x01
    4ba8:	82 81       	ldd	r24, Z+2	; 0x02
    4baa:	93 81       	ldd	r25, Z+3	; 0x03
    4bac:	20 e0       	ldi	r18, 0x00	; 0
    4bae:	30 e0       	ldi	r19, 0x00	; 0
    4bb0:	40 e8       	ldi	r20, 0x80	; 128
    4bb2:	5f e3       	ldi	r21, 0x3F	; 63
    4bb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4bb8:	88 23       	and	r24, r24
    4bba:	44 f4       	brge	.+16     	; 0x4bcc <main+0xd62>
		__ticks = 1;
    4bbc:	fe 01       	movw	r30, r28
    4bbe:	eb 58       	subi	r30, 0x8B	; 139
    4bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc2:	81 e0       	ldi	r24, 0x01	; 1
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	91 83       	std	Z+1, r25	; 0x01
    4bc8:	80 83       	st	Z, r24
    4bca:	64 c0       	rjmp	.+200    	; 0x4c94 <main+0xe2a>
	else if (__tmp > 65535)
    4bcc:	fe 01       	movw	r30, r28
    4bce:	e9 58       	subi	r30, 0x89	; 137
    4bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd2:	60 81       	ld	r22, Z
    4bd4:	71 81       	ldd	r23, Z+1	; 0x01
    4bd6:	82 81       	ldd	r24, Z+2	; 0x02
    4bd8:	93 81       	ldd	r25, Z+3	; 0x03
    4bda:	20 e0       	ldi	r18, 0x00	; 0
    4bdc:	3f ef       	ldi	r19, 0xFF	; 255
    4bde:	4f e7       	ldi	r20, 0x7F	; 127
    4be0:	57 e4       	ldi	r21, 0x47	; 71
    4be2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4be6:	18 16       	cp	r1, r24
    4be8:	0c f0       	brlt	.+2      	; 0x4bec <main+0xd82>
    4bea:	43 c0       	rjmp	.+134    	; 0x4c72 <main+0xe08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bec:	fe 01       	movw	r30, r28
    4bee:	e5 58       	subi	r30, 0x85	; 133
    4bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf2:	60 81       	ld	r22, Z
    4bf4:	71 81       	ldd	r23, Z+1	; 0x01
    4bf6:	82 81       	ldd	r24, Z+2	; 0x02
    4bf8:	93 81       	ldd	r25, Z+3	; 0x03
    4bfa:	20 e0       	ldi	r18, 0x00	; 0
    4bfc:	30 e0       	ldi	r19, 0x00	; 0
    4bfe:	40 e2       	ldi	r20, 0x20	; 32
    4c00:	51 e4       	ldi	r21, 0x41	; 65
    4c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c06:	dc 01       	movw	r26, r24
    4c08:	cb 01       	movw	r24, r22
    4c0a:	8e 01       	movw	r16, r28
    4c0c:	0b 58       	subi	r16, 0x8B	; 139
    4c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c10:	bc 01       	movw	r22, r24
    4c12:	cd 01       	movw	r24, r26
    4c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c18:	dc 01       	movw	r26, r24
    4c1a:	cb 01       	movw	r24, r22
    4c1c:	f8 01       	movw	r30, r16
    4c1e:	91 83       	std	Z+1, r25	; 0x01
    4c20:	80 83       	st	Z, r24
    4c22:	1f c0       	rjmp	.+62     	; 0x4c62 <main+0xdf8>
    4c24:	fe 01       	movw	r30, r28
    4c26:	ed 58       	subi	r30, 0x8D	; 141
    4c28:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2a:	80 e9       	ldi	r24, 0x90	; 144
    4c2c:	91 e0       	ldi	r25, 0x01	; 1
    4c2e:	91 83       	std	Z+1, r25	; 0x01
    4c30:	80 83       	st	Z, r24
    4c32:	fe 01       	movw	r30, r28
    4c34:	ed 58       	subi	r30, 0x8D	; 141
    4c36:	ff 4f       	sbci	r31, 0xFF	; 255
    4c38:	80 81       	ld	r24, Z
    4c3a:	91 81       	ldd	r25, Z+1	; 0x01
    4c3c:	01 97       	sbiw	r24, 0x01	; 1
    4c3e:	f1 f7       	brne	.-4      	; 0x4c3c <main+0xdd2>
    4c40:	fe 01       	movw	r30, r28
    4c42:	ed 58       	subi	r30, 0x8D	; 141
    4c44:	ff 4f       	sbci	r31, 0xFF	; 255
    4c46:	91 83       	std	Z+1, r25	; 0x01
    4c48:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c4a:	de 01       	movw	r26, r28
    4c4c:	ab 58       	subi	r26, 0x8B	; 139
    4c4e:	bf 4f       	sbci	r27, 0xFF	; 255
    4c50:	fe 01       	movw	r30, r28
    4c52:	eb 58       	subi	r30, 0x8B	; 139
    4c54:	ff 4f       	sbci	r31, 0xFF	; 255
    4c56:	80 81       	ld	r24, Z
    4c58:	91 81       	ldd	r25, Z+1	; 0x01
    4c5a:	01 97       	sbiw	r24, 0x01	; 1
    4c5c:	11 96       	adiw	r26, 0x01	; 1
    4c5e:	9c 93       	st	X, r25
    4c60:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c62:	fe 01       	movw	r30, r28
    4c64:	eb 58       	subi	r30, 0x8B	; 139
    4c66:	ff 4f       	sbci	r31, 0xFF	; 255
    4c68:	80 81       	ld	r24, Z
    4c6a:	91 81       	ldd	r25, Z+1	; 0x01
    4c6c:	00 97       	sbiw	r24, 0x00	; 0
    4c6e:	d1 f6       	brne	.-76     	; 0x4c24 <main+0xdba>
    4c70:	27 c0       	rjmp	.+78     	; 0x4cc0 <main+0xe56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c72:	8e 01       	movw	r16, r28
    4c74:	0b 58       	subi	r16, 0x8B	; 139
    4c76:	1f 4f       	sbci	r17, 0xFF	; 255
    4c78:	fe 01       	movw	r30, r28
    4c7a:	e9 58       	subi	r30, 0x89	; 137
    4c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c7e:	60 81       	ld	r22, Z
    4c80:	71 81       	ldd	r23, Z+1	; 0x01
    4c82:	82 81       	ldd	r24, Z+2	; 0x02
    4c84:	93 81       	ldd	r25, Z+3	; 0x03
    4c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c8a:	dc 01       	movw	r26, r24
    4c8c:	cb 01       	movw	r24, r22
    4c8e:	f8 01       	movw	r30, r16
    4c90:	91 83       	std	Z+1, r25	; 0x01
    4c92:	80 83       	st	Z, r24
    4c94:	de 01       	movw	r26, r28
    4c96:	af 58       	subi	r26, 0x8F	; 143
    4c98:	bf 4f       	sbci	r27, 0xFF	; 255
    4c9a:	fe 01       	movw	r30, r28
    4c9c:	eb 58       	subi	r30, 0x8B	; 139
    4c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca0:	80 81       	ld	r24, Z
    4ca2:	91 81       	ldd	r25, Z+1	; 0x01
    4ca4:	8d 93       	st	X+, r24
    4ca6:	9c 93       	st	X, r25
    4ca8:	fe 01       	movw	r30, r28
    4caa:	ef 58       	subi	r30, 0x8F	; 143
    4cac:	ff 4f       	sbci	r31, 0xFF	; 255
    4cae:	80 81       	ld	r24, Z
    4cb0:	91 81       	ldd	r25, Z+1	; 0x01
    4cb2:	01 97       	sbiw	r24, 0x01	; 1
    4cb4:	f1 f7       	brne	.-4      	; 0x4cb2 <main+0xe48>
    4cb6:	fe 01       	movw	r30, r28
    4cb8:	ef 58       	subi	r30, 0x8F	; 143
    4cba:	ff 4f       	sbci	r31, 0xFF	; 255
    4cbc:	91 83       	std	Z+1, r25	; 0x01
    4cbe:	80 83       	st	Z, r24
					LCD_voidClearDisplay();
    4cc0:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_voidClearDisplay>
					LCD_voidGOTOXY(0, 1);
    4cc4:	80 e0       	ldi	r24, 0x00	; 0
    4cc6:	61 e0       	ldi	r22, 0x01	; 1
    4cc8:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
					LCD_voidWriteString((u8*)"THE SMART HOME");
    4ccc:	83 e1       	ldi	r24, 0x13	; 19
    4cce:	91 e0       	ldi	r25, 0x01	; 1
    4cd0:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
					LCD_voidGOTOXY(1, 4);
    4cd4:	81 e0       	ldi	r24, 0x01	; 1
    4cd6:	64 e0       	ldi	r22, 0x04	; 4
    4cd8:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
					LCD_voidWriteString((u8*)"UNTILL...");
    4cdc:	82 e2       	ldi	r24, 0x22	; 34
    4cde:	91 e0       	ldi	r25, 0x01	; 1
    4ce0:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
					_delay_ms(Default_u8Delay);
    4ce4:	fe 01       	movw	r30, r28
    4ce6:	e6 54       	subi	r30, 0x46	; 70
    4ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cea:	60 81       	ld	r22, Z
    4cec:	71 81       	ldd	r23, Z+1	; 0x01
    4cee:	82 81       	ldd	r24, Z+2	; 0x02
    4cf0:	93 81       	ldd	r25, Z+3	; 0x03
    4cf2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    4cf6:	dc 01       	movw	r26, r24
    4cf8:	cb 01       	movw	r24, r22
    4cfa:	fe 01       	movw	r30, r28
    4cfc:	e3 59       	subi	r30, 0x93	; 147
    4cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4d00:	80 83       	st	Z, r24
    4d02:	91 83       	std	Z+1, r25	; 0x01
    4d04:	a2 83       	std	Z+2, r26	; 0x02
    4d06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d08:	8e 01       	movw	r16, r28
    4d0a:	07 59       	subi	r16, 0x97	; 151
    4d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    4d0e:	fe 01       	movw	r30, r28
    4d10:	e3 59       	subi	r30, 0x93	; 147
    4d12:	ff 4f       	sbci	r31, 0xFF	; 255
    4d14:	60 81       	ld	r22, Z
    4d16:	71 81       	ldd	r23, Z+1	; 0x01
    4d18:	82 81       	ldd	r24, Z+2	; 0x02
    4d1a:	93 81       	ldd	r25, Z+3	; 0x03
    4d1c:	20 e0       	ldi	r18, 0x00	; 0
    4d1e:	30 e0       	ldi	r19, 0x00	; 0
    4d20:	4a e7       	ldi	r20, 0x7A	; 122
    4d22:	55 e4       	ldi	r21, 0x45	; 69
    4d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d28:	dc 01       	movw	r26, r24
    4d2a:	cb 01       	movw	r24, r22
    4d2c:	f8 01       	movw	r30, r16
    4d2e:	80 83       	st	Z, r24
    4d30:	91 83       	std	Z+1, r25	; 0x01
    4d32:	a2 83       	std	Z+2, r26	; 0x02
    4d34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d36:	fe 01       	movw	r30, r28
    4d38:	e7 59       	subi	r30, 0x97	; 151
    4d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d3c:	60 81       	ld	r22, Z
    4d3e:	71 81       	ldd	r23, Z+1	; 0x01
    4d40:	82 81       	ldd	r24, Z+2	; 0x02
    4d42:	93 81       	ldd	r25, Z+3	; 0x03
    4d44:	20 e0       	ldi	r18, 0x00	; 0
    4d46:	30 e0       	ldi	r19, 0x00	; 0
    4d48:	40 e8       	ldi	r20, 0x80	; 128
    4d4a:	5f e3       	ldi	r21, 0x3F	; 63
    4d4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d50:	88 23       	and	r24, r24
    4d52:	44 f4       	brge	.+16     	; 0x4d64 <main+0xefa>
		__ticks = 1;
    4d54:	fe 01       	movw	r30, r28
    4d56:	e9 59       	subi	r30, 0x99	; 153
    4d58:	ff 4f       	sbci	r31, 0xFF	; 255
    4d5a:	81 e0       	ldi	r24, 0x01	; 1
    4d5c:	90 e0       	ldi	r25, 0x00	; 0
    4d5e:	91 83       	std	Z+1, r25	; 0x01
    4d60:	80 83       	st	Z, r24
    4d62:	64 c0       	rjmp	.+200    	; 0x4e2c <main+0xfc2>
	else if (__tmp > 65535)
    4d64:	fe 01       	movw	r30, r28
    4d66:	e7 59       	subi	r30, 0x97	; 151
    4d68:	ff 4f       	sbci	r31, 0xFF	; 255
    4d6a:	60 81       	ld	r22, Z
    4d6c:	71 81       	ldd	r23, Z+1	; 0x01
    4d6e:	82 81       	ldd	r24, Z+2	; 0x02
    4d70:	93 81       	ldd	r25, Z+3	; 0x03
    4d72:	20 e0       	ldi	r18, 0x00	; 0
    4d74:	3f ef       	ldi	r19, 0xFF	; 255
    4d76:	4f e7       	ldi	r20, 0x7F	; 127
    4d78:	57 e4       	ldi	r21, 0x47	; 71
    4d7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d7e:	18 16       	cp	r1, r24
    4d80:	0c f0       	brlt	.+2      	; 0x4d84 <main+0xf1a>
    4d82:	43 c0       	rjmp	.+134    	; 0x4e0a <main+0xfa0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d84:	fe 01       	movw	r30, r28
    4d86:	e3 59       	subi	r30, 0x93	; 147
    4d88:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8a:	60 81       	ld	r22, Z
    4d8c:	71 81       	ldd	r23, Z+1	; 0x01
    4d8e:	82 81       	ldd	r24, Z+2	; 0x02
    4d90:	93 81       	ldd	r25, Z+3	; 0x03
    4d92:	20 e0       	ldi	r18, 0x00	; 0
    4d94:	30 e0       	ldi	r19, 0x00	; 0
    4d96:	40 e2       	ldi	r20, 0x20	; 32
    4d98:	51 e4       	ldi	r21, 0x41	; 65
    4d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d9e:	dc 01       	movw	r26, r24
    4da0:	cb 01       	movw	r24, r22
    4da2:	8e 01       	movw	r16, r28
    4da4:	09 59       	subi	r16, 0x99	; 153
    4da6:	1f 4f       	sbci	r17, 0xFF	; 255
    4da8:	bc 01       	movw	r22, r24
    4daa:	cd 01       	movw	r24, r26
    4dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4db0:	dc 01       	movw	r26, r24
    4db2:	cb 01       	movw	r24, r22
    4db4:	f8 01       	movw	r30, r16
    4db6:	91 83       	std	Z+1, r25	; 0x01
    4db8:	80 83       	st	Z, r24
    4dba:	1f c0       	rjmp	.+62     	; 0x4dfa <main+0xf90>
    4dbc:	fe 01       	movw	r30, r28
    4dbe:	eb 59       	subi	r30, 0x9B	; 155
    4dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc2:	80 e9       	ldi	r24, 0x90	; 144
    4dc4:	91 e0       	ldi	r25, 0x01	; 1
    4dc6:	91 83       	std	Z+1, r25	; 0x01
    4dc8:	80 83       	st	Z, r24
    4dca:	fe 01       	movw	r30, r28
    4dcc:	eb 59       	subi	r30, 0x9B	; 155
    4dce:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd0:	80 81       	ld	r24, Z
    4dd2:	91 81       	ldd	r25, Z+1	; 0x01
    4dd4:	01 97       	sbiw	r24, 0x01	; 1
    4dd6:	f1 f7       	brne	.-4      	; 0x4dd4 <main+0xf6a>
    4dd8:	fe 01       	movw	r30, r28
    4dda:	eb 59       	subi	r30, 0x9B	; 155
    4ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dde:	91 83       	std	Z+1, r25	; 0x01
    4de0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4de2:	de 01       	movw	r26, r28
    4de4:	a9 59       	subi	r26, 0x99	; 153
    4de6:	bf 4f       	sbci	r27, 0xFF	; 255
    4de8:	fe 01       	movw	r30, r28
    4dea:	e9 59       	subi	r30, 0x99	; 153
    4dec:	ff 4f       	sbci	r31, 0xFF	; 255
    4dee:	80 81       	ld	r24, Z
    4df0:	91 81       	ldd	r25, Z+1	; 0x01
    4df2:	01 97       	sbiw	r24, 0x01	; 1
    4df4:	11 96       	adiw	r26, 0x01	; 1
    4df6:	9c 93       	st	X, r25
    4df8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dfa:	fe 01       	movw	r30, r28
    4dfc:	e9 59       	subi	r30, 0x99	; 153
    4dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4e00:	80 81       	ld	r24, Z
    4e02:	91 81       	ldd	r25, Z+1	; 0x01
    4e04:	00 97       	sbiw	r24, 0x00	; 0
    4e06:	d1 f6       	brne	.-76     	; 0x4dbc <main+0xf52>
    4e08:	27 c0       	rjmp	.+78     	; 0x4e58 <main+0xfee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e0a:	8e 01       	movw	r16, r28
    4e0c:	09 59       	subi	r16, 0x99	; 153
    4e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    4e10:	fe 01       	movw	r30, r28
    4e12:	e7 59       	subi	r30, 0x97	; 151
    4e14:	ff 4f       	sbci	r31, 0xFF	; 255
    4e16:	60 81       	ld	r22, Z
    4e18:	71 81       	ldd	r23, Z+1	; 0x01
    4e1a:	82 81       	ldd	r24, Z+2	; 0x02
    4e1c:	93 81       	ldd	r25, Z+3	; 0x03
    4e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e22:	dc 01       	movw	r26, r24
    4e24:	cb 01       	movw	r24, r22
    4e26:	f8 01       	movw	r30, r16
    4e28:	91 83       	std	Z+1, r25	; 0x01
    4e2a:	80 83       	st	Z, r24
    4e2c:	de 01       	movw	r26, r28
    4e2e:	ad 59       	subi	r26, 0x9D	; 157
    4e30:	bf 4f       	sbci	r27, 0xFF	; 255
    4e32:	fe 01       	movw	r30, r28
    4e34:	e9 59       	subi	r30, 0x99	; 153
    4e36:	ff 4f       	sbci	r31, 0xFF	; 255
    4e38:	80 81       	ld	r24, Z
    4e3a:	91 81       	ldd	r25, Z+1	; 0x01
    4e3c:	8d 93       	st	X+, r24
    4e3e:	9c 93       	st	X, r25
    4e40:	fe 01       	movw	r30, r28
    4e42:	ed 59       	subi	r30, 0x9D	; 157
    4e44:	ff 4f       	sbci	r31, 0xFF	; 255
    4e46:	80 81       	ld	r24, Z
    4e48:	91 81       	ldd	r25, Z+1	; 0x01
    4e4a:	01 97       	sbiw	r24, 0x01	; 1
    4e4c:	f1 f7       	brne	.-4      	; 0x4e4a <main+0xfe0>
    4e4e:	fe 01       	movw	r30, r28
    4e50:	ed 59       	subi	r30, 0x9D	; 157
    4e52:	ff 4f       	sbci	r31, 0xFF	; 255
    4e54:	91 83       	std	Z+1, r25	; 0x01
    4e56:	80 83       	st	Z, r24
					LCD_voidClearDisplay();
    4e58:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_voidClearDisplay>
					LCD_voidGOTOXY(0, 2);
    4e5c:	80 e0       	ldi	r24, 0x00	; 0
    4e5e:	62 e0       	ldi	r22, 0x02	; 2
    4e60:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
					LCD_voidWriteString((u8*)"WAIT 1 MINUTE");
    4e64:	8c e2       	ldi	r24, 0x2C	; 44
    4e66:	91 e0       	ldi	r25, 0x01	; 1
    4e68:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>

					/* FOR LOOP TO COUNT 60 SECOND */
					for(u8 Counter = 1 ;Counter<=60 ;Counter++){
    4e6c:	fe 01       	movw	r30, r28
    4e6e:	e9 54       	subi	r30, 0x49	; 73
    4e70:	ff 4f       	sbci	r31, 0xFF	; 255
    4e72:	81 e0       	ldi	r24, 0x01	; 1
    4e74:	80 83       	st	Z, r24
    4e76:	cc c0       	rjmp	.+408    	; 0x5010 <main+0x11a6>

						/* GO TO LINE 1 AT POSITION 8 ON LCD AND WRITE THE CURRENT VALUE OF COUNTER */
						LCD_voidGOTOXY(1, 8);
    4e78:	81 e0       	ldi	r24, 0x01	; 1
    4e7a:	68 e0       	ldi	r22, 0x08	; 8
    4e7c:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
						LCD_voidWriteNumber(Counter);
    4e80:	fe 01       	movw	r30, r28
    4e82:	e9 54       	subi	r30, 0x49	; 73
    4e84:	ff 4f       	sbci	r31, 0xFF	; 255
    4e86:	80 81       	ld	r24, Z
    4e88:	88 2f       	mov	r24, r24
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	a0 e0       	ldi	r26, 0x00	; 0
    4e8e:	b0 e0       	ldi	r27, 0x00	; 0
    4e90:	bc 01       	movw	r22, r24
    4e92:	cd 01       	movw	r24, r26
    4e94:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
    4e98:	fe 01       	movw	r30, r28
    4e9a:	e1 5a       	subi	r30, 0xA1	; 161
    4e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e9e:	80 e0       	ldi	r24, 0x00	; 0
    4ea0:	90 e0       	ldi	r25, 0x00	; 0
    4ea2:	a8 e4       	ldi	r26, 0x48	; 72
    4ea4:	b2 e4       	ldi	r27, 0x42	; 66
    4ea6:	80 83       	st	Z, r24
    4ea8:	91 83       	std	Z+1, r25	; 0x01
    4eaa:	a2 83       	std	Z+2, r26	; 0x02
    4eac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4eae:	8e 01       	movw	r16, r28
    4eb0:	05 5a       	subi	r16, 0xA5	; 165
    4eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    4eb4:	fe 01       	movw	r30, r28
    4eb6:	e1 5a       	subi	r30, 0xA1	; 161
    4eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eba:	60 81       	ld	r22, Z
    4ebc:	71 81       	ldd	r23, Z+1	; 0x01
    4ebe:	82 81       	ldd	r24, Z+2	; 0x02
    4ec0:	93 81       	ldd	r25, Z+3	; 0x03
    4ec2:	20 e0       	ldi	r18, 0x00	; 0
    4ec4:	30 e0       	ldi	r19, 0x00	; 0
    4ec6:	4a e7       	ldi	r20, 0x7A	; 122
    4ec8:	55 e4       	ldi	r21, 0x45	; 69
    4eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ece:	dc 01       	movw	r26, r24
    4ed0:	cb 01       	movw	r24, r22
    4ed2:	f8 01       	movw	r30, r16
    4ed4:	80 83       	st	Z, r24
    4ed6:	91 83       	std	Z+1, r25	; 0x01
    4ed8:	a2 83       	std	Z+2, r26	; 0x02
    4eda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4edc:	fe 01       	movw	r30, r28
    4ede:	e5 5a       	subi	r30, 0xA5	; 165
    4ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee2:	60 81       	ld	r22, Z
    4ee4:	71 81       	ldd	r23, Z+1	; 0x01
    4ee6:	82 81       	ldd	r24, Z+2	; 0x02
    4ee8:	93 81       	ldd	r25, Z+3	; 0x03
    4eea:	20 e0       	ldi	r18, 0x00	; 0
    4eec:	30 e0       	ldi	r19, 0x00	; 0
    4eee:	40 e8       	ldi	r20, 0x80	; 128
    4ef0:	5f e3       	ldi	r21, 0x3F	; 63
    4ef2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ef6:	88 23       	and	r24, r24
    4ef8:	44 f4       	brge	.+16     	; 0x4f0a <main+0x10a0>
		__ticks = 1;
    4efa:	fe 01       	movw	r30, r28
    4efc:	e7 5a       	subi	r30, 0xA7	; 167
    4efe:	ff 4f       	sbci	r31, 0xFF	; 255
    4f00:	81 e0       	ldi	r24, 0x01	; 1
    4f02:	90 e0       	ldi	r25, 0x00	; 0
    4f04:	91 83       	std	Z+1, r25	; 0x01
    4f06:	80 83       	st	Z, r24
    4f08:	64 c0       	rjmp	.+200    	; 0x4fd2 <main+0x1168>
	else if (__tmp > 65535)
    4f0a:	fe 01       	movw	r30, r28
    4f0c:	e5 5a       	subi	r30, 0xA5	; 165
    4f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f10:	60 81       	ld	r22, Z
    4f12:	71 81       	ldd	r23, Z+1	; 0x01
    4f14:	82 81       	ldd	r24, Z+2	; 0x02
    4f16:	93 81       	ldd	r25, Z+3	; 0x03
    4f18:	20 e0       	ldi	r18, 0x00	; 0
    4f1a:	3f ef       	ldi	r19, 0xFF	; 255
    4f1c:	4f e7       	ldi	r20, 0x7F	; 127
    4f1e:	57 e4       	ldi	r21, 0x47	; 71
    4f20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4f24:	18 16       	cp	r1, r24
    4f26:	0c f0       	brlt	.+2      	; 0x4f2a <main+0x10c0>
    4f28:	43 c0       	rjmp	.+134    	; 0x4fb0 <main+0x1146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f2a:	fe 01       	movw	r30, r28
    4f2c:	e1 5a       	subi	r30, 0xA1	; 161
    4f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f30:	60 81       	ld	r22, Z
    4f32:	71 81       	ldd	r23, Z+1	; 0x01
    4f34:	82 81       	ldd	r24, Z+2	; 0x02
    4f36:	93 81       	ldd	r25, Z+3	; 0x03
    4f38:	20 e0       	ldi	r18, 0x00	; 0
    4f3a:	30 e0       	ldi	r19, 0x00	; 0
    4f3c:	40 e2       	ldi	r20, 0x20	; 32
    4f3e:	51 e4       	ldi	r21, 0x41	; 65
    4f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f44:	dc 01       	movw	r26, r24
    4f46:	cb 01       	movw	r24, r22
    4f48:	8e 01       	movw	r16, r28
    4f4a:	07 5a       	subi	r16, 0xA7	; 167
    4f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f4e:	bc 01       	movw	r22, r24
    4f50:	cd 01       	movw	r24, r26
    4f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f56:	dc 01       	movw	r26, r24
    4f58:	cb 01       	movw	r24, r22
    4f5a:	f8 01       	movw	r30, r16
    4f5c:	91 83       	std	Z+1, r25	; 0x01
    4f5e:	80 83       	st	Z, r24
    4f60:	1f c0       	rjmp	.+62     	; 0x4fa0 <main+0x1136>
    4f62:	fe 01       	movw	r30, r28
    4f64:	e9 5a       	subi	r30, 0xA9	; 169
    4f66:	ff 4f       	sbci	r31, 0xFF	; 255
    4f68:	80 e9       	ldi	r24, 0x90	; 144
    4f6a:	91 e0       	ldi	r25, 0x01	; 1
    4f6c:	91 83       	std	Z+1, r25	; 0x01
    4f6e:	80 83       	st	Z, r24
    4f70:	fe 01       	movw	r30, r28
    4f72:	e9 5a       	subi	r30, 0xA9	; 169
    4f74:	ff 4f       	sbci	r31, 0xFF	; 255
    4f76:	80 81       	ld	r24, Z
    4f78:	91 81       	ldd	r25, Z+1	; 0x01
    4f7a:	01 97       	sbiw	r24, 0x01	; 1
    4f7c:	f1 f7       	brne	.-4      	; 0x4f7a <main+0x1110>
    4f7e:	fe 01       	movw	r30, r28
    4f80:	e9 5a       	subi	r30, 0xA9	; 169
    4f82:	ff 4f       	sbci	r31, 0xFF	; 255
    4f84:	91 83       	std	Z+1, r25	; 0x01
    4f86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f88:	de 01       	movw	r26, r28
    4f8a:	a7 5a       	subi	r26, 0xA7	; 167
    4f8c:	bf 4f       	sbci	r27, 0xFF	; 255
    4f8e:	fe 01       	movw	r30, r28
    4f90:	e7 5a       	subi	r30, 0xA7	; 167
    4f92:	ff 4f       	sbci	r31, 0xFF	; 255
    4f94:	80 81       	ld	r24, Z
    4f96:	91 81       	ldd	r25, Z+1	; 0x01
    4f98:	01 97       	sbiw	r24, 0x01	; 1
    4f9a:	11 96       	adiw	r26, 0x01	; 1
    4f9c:	9c 93       	st	X, r25
    4f9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fa0:	fe 01       	movw	r30, r28
    4fa2:	e7 5a       	subi	r30, 0xA7	; 167
    4fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa6:	80 81       	ld	r24, Z
    4fa8:	91 81       	ldd	r25, Z+1	; 0x01
    4faa:	00 97       	sbiw	r24, 0x00	; 0
    4fac:	d1 f6       	brne	.-76     	; 0x4f62 <main+0x10f8>
    4fae:	27 c0       	rjmp	.+78     	; 0x4ffe <main+0x1194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fb0:	8e 01       	movw	r16, r28
    4fb2:	07 5a       	subi	r16, 0xA7	; 167
    4fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    4fb6:	fe 01       	movw	r30, r28
    4fb8:	e5 5a       	subi	r30, 0xA5	; 165
    4fba:	ff 4f       	sbci	r31, 0xFF	; 255
    4fbc:	60 81       	ld	r22, Z
    4fbe:	71 81       	ldd	r23, Z+1	; 0x01
    4fc0:	82 81       	ldd	r24, Z+2	; 0x02
    4fc2:	93 81       	ldd	r25, Z+3	; 0x03
    4fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fc8:	dc 01       	movw	r26, r24
    4fca:	cb 01       	movw	r24, r22
    4fcc:	f8 01       	movw	r30, r16
    4fce:	91 83       	std	Z+1, r25	; 0x01
    4fd0:	80 83       	st	Z, r24
    4fd2:	de 01       	movw	r26, r28
    4fd4:	ab 5a       	subi	r26, 0xAB	; 171
    4fd6:	bf 4f       	sbci	r27, 0xFF	; 255
    4fd8:	fe 01       	movw	r30, r28
    4fda:	e7 5a       	subi	r30, 0xA7	; 167
    4fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    4fde:	80 81       	ld	r24, Z
    4fe0:	91 81       	ldd	r25, Z+1	; 0x01
    4fe2:	8d 93       	st	X+, r24
    4fe4:	9c 93       	st	X, r25
    4fe6:	fe 01       	movw	r30, r28
    4fe8:	eb 5a       	subi	r30, 0xAB	; 171
    4fea:	ff 4f       	sbci	r31, 0xFF	; 255
    4fec:	80 81       	ld	r24, Z
    4fee:	91 81       	ldd	r25, Z+1	; 0x01
    4ff0:	01 97       	sbiw	r24, 0x01	; 1
    4ff2:	f1 f7       	brne	.-4      	; 0x4ff0 <main+0x1186>
    4ff4:	fe 01       	movw	r30, r28
    4ff6:	eb 5a       	subi	r30, 0xAB	; 171
    4ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    4ffa:	91 83       	std	Z+1, r25	; 0x01
    4ffc:	80 83       	st	Z, r24
					LCD_voidClearDisplay();
					LCD_voidGOTOXY(0, 2);
					LCD_voidWriteString((u8*)"WAIT 1 MINUTE");

					/* FOR LOOP TO COUNT 60 SECOND */
					for(u8 Counter = 1 ;Counter<=60 ;Counter++){
    4ffe:	de 01       	movw	r26, r28
    5000:	a9 54       	subi	r26, 0x49	; 73
    5002:	bf 4f       	sbci	r27, 0xFF	; 255
    5004:	fe 01       	movw	r30, r28
    5006:	e9 54       	subi	r30, 0x49	; 73
    5008:	ff 4f       	sbci	r31, 0xFF	; 255
    500a:	80 81       	ld	r24, Z
    500c:	8f 5f       	subi	r24, 0xFF	; 255
    500e:	8c 93       	st	X, r24
    5010:	fe 01       	movw	r30, r28
    5012:	e9 54       	subi	r30, 0x49	; 73
    5014:	ff 4f       	sbci	r31, 0xFF	; 255
    5016:	80 81       	ld	r24, Z
    5018:	8d 33       	cpi	r24, 0x3D	; 61
    501a:	08 f4       	brcc	.+2      	; 0x501e <main+0x11b4>
    501c:	2d cf       	rjmp	.-422    	; 0x4e78 <main+0x100e>
						/* WAIT 50 MILLISECOND */
						_delay_ms(50);
					}

					/* GO TO SYSTEM ENTERED PASSWORD AGAIN */
					Global_u8Control = 1;
    501e:	81 e0       	ldi	r24, 0x01	; 1
    5020:	80 93 c2 03 	sts	0x03C2, r24
    5024:	eb c8       	rjmp	.-3626   	; 0x41fc <main+0x392>
				}
			}
		}

		/* TEMPERATURE SENSOR AREA */
		else if(Global_u8Control == 3){
    5026:	80 91 c2 03 	lds	r24, 0x03C2
    502a:	83 30       	cpi	r24, 0x03	; 3
    502c:	09 f0       	breq	.+2      	; 0x5030 <main+0x11c6>
    502e:	fa c0       	rjmp	.+500    	; 0x5224 <main+0x13ba>

			/* CHECK IF YOU ENTERD THIS LOOP FOR THE FIRST TIME OR NOT ,TO PREVENT REPEATATION OF STRING "TEMPERATURE =" */
			if(TEMPERATURE_u8Flag0 == 0){
    5030:	80 91 c4 03 	lds	r24, 0x03C4
    5034:	88 23       	and	r24, r24
    5036:	69 f4       	brne	.+26     	; 0x5052 <main+0x11e8>

				// GO TO LINE 0 AT POSITION 0 ON LCD AND WRITE THE STRING "TEMPRATURE = "
				LCD_voidClearDisplay();
    5038:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_voidClearDisplay>
				LCD_voidGOTOXY(0, 0);
    503c:	80 e0       	ldi	r24, 0x00	; 0
    503e:	60 e0       	ldi	r22, 0x00	; 0
    5040:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"TEMPRATURE = ");
    5044:	8a e3       	ldi	r24, 0x3A	; 58
    5046:	91 e0       	ldi	r25, 0x01	; 1
    5048:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>

				/* SET TEMPERATURE_u8Flag0 TO PREVENT REPEATATION */
				TEMPERATURE_u8Flag0 = 1;
    504c:	81 e0       	ldi	r24, 0x01	; 1
    504e:	80 93 c4 03 	sts	0x03C4, r24
			}

			/* SET ADC_u8ChannelSelected GLOBAL VARIABLE TO 0 TO GO TO THE TEMPERATURE SENSOR AREA IN THE CALL BACK FUNCTION OF ADC */
			ADC_u8ChannelSelected = 0;
    5052:	10 92 c9 03 	sts	0x03C9, r1

			// READ CHANNEL0 ASYNCHROUNOUSLY (START CONVERSION)
			ADC_voidReadChannelASyn(CHANNEL0);
    5056:	80 e0       	ldi	r24, 0x00	; 0
    5058:	0e 94 41 08 	call	0x1082	; 0x1082 <ADC_voidReadChannelASyn>

			/* WAIT THE SPECIFIED VALUE OF TIME IN Default_u8Delay VARIABLE */
			_delay_ms(Default_u8Delay);
    505c:	fe 01       	movw	r30, r28
    505e:	e6 54       	subi	r30, 0x46	; 70
    5060:	ff 4f       	sbci	r31, 0xFF	; 255
    5062:	60 81       	ld	r22, Z
    5064:	71 81       	ldd	r23, Z+1	; 0x01
    5066:	82 81       	ldd	r24, Z+2	; 0x02
    5068:	93 81       	ldd	r25, Z+3	; 0x03
    506a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    506e:	dc 01       	movw	r26, r24
    5070:	cb 01       	movw	r24, r22
    5072:	fe 01       	movw	r30, r28
    5074:	ef 5a       	subi	r30, 0xAF	; 175
    5076:	ff 4f       	sbci	r31, 0xFF	; 255
    5078:	80 83       	st	Z, r24
    507a:	91 83       	std	Z+1, r25	; 0x01
    507c:	a2 83       	std	Z+2, r26	; 0x02
    507e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5080:	8e 01       	movw	r16, r28
    5082:	03 5b       	subi	r16, 0xB3	; 179
    5084:	1f 4f       	sbci	r17, 0xFF	; 255
    5086:	fe 01       	movw	r30, r28
    5088:	ef 5a       	subi	r30, 0xAF	; 175
    508a:	ff 4f       	sbci	r31, 0xFF	; 255
    508c:	60 81       	ld	r22, Z
    508e:	71 81       	ldd	r23, Z+1	; 0x01
    5090:	82 81       	ldd	r24, Z+2	; 0x02
    5092:	93 81       	ldd	r25, Z+3	; 0x03
    5094:	20 e0       	ldi	r18, 0x00	; 0
    5096:	30 e0       	ldi	r19, 0x00	; 0
    5098:	4a e7       	ldi	r20, 0x7A	; 122
    509a:	55 e4       	ldi	r21, 0x45	; 69
    509c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50a0:	dc 01       	movw	r26, r24
    50a2:	cb 01       	movw	r24, r22
    50a4:	f8 01       	movw	r30, r16
    50a6:	80 83       	st	Z, r24
    50a8:	91 83       	std	Z+1, r25	; 0x01
    50aa:	a2 83       	std	Z+2, r26	; 0x02
    50ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50ae:	fe 01       	movw	r30, r28
    50b0:	e3 5b       	subi	r30, 0xB3	; 179
    50b2:	ff 4f       	sbci	r31, 0xFF	; 255
    50b4:	60 81       	ld	r22, Z
    50b6:	71 81       	ldd	r23, Z+1	; 0x01
    50b8:	82 81       	ldd	r24, Z+2	; 0x02
    50ba:	93 81       	ldd	r25, Z+3	; 0x03
    50bc:	20 e0       	ldi	r18, 0x00	; 0
    50be:	30 e0       	ldi	r19, 0x00	; 0
    50c0:	40 e8       	ldi	r20, 0x80	; 128
    50c2:	5f e3       	ldi	r21, 0x3F	; 63
    50c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    50c8:	88 23       	and	r24, r24
    50ca:	44 f4       	brge	.+16     	; 0x50dc <main+0x1272>
		__ticks = 1;
    50cc:	fe 01       	movw	r30, r28
    50ce:	e5 5b       	subi	r30, 0xB5	; 181
    50d0:	ff 4f       	sbci	r31, 0xFF	; 255
    50d2:	81 e0       	ldi	r24, 0x01	; 1
    50d4:	90 e0       	ldi	r25, 0x00	; 0
    50d6:	91 83       	std	Z+1, r25	; 0x01
    50d8:	80 83       	st	Z, r24
    50da:	64 c0       	rjmp	.+200    	; 0x51a4 <main+0x133a>
	else if (__tmp > 65535)
    50dc:	fe 01       	movw	r30, r28
    50de:	e3 5b       	subi	r30, 0xB3	; 179
    50e0:	ff 4f       	sbci	r31, 0xFF	; 255
    50e2:	60 81       	ld	r22, Z
    50e4:	71 81       	ldd	r23, Z+1	; 0x01
    50e6:	82 81       	ldd	r24, Z+2	; 0x02
    50e8:	93 81       	ldd	r25, Z+3	; 0x03
    50ea:	20 e0       	ldi	r18, 0x00	; 0
    50ec:	3f ef       	ldi	r19, 0xFF	; 255
    50ee:	4f e7       	ldi	r20, 0x7F	; 127
    50f0:	57 e4       	ldi	r21, 0x47	; 71
    50f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    50f6:	18 16       	cp	r1, r24
    50f8:	0c f0       	brlt	.+2      	; 0x50fc <main+0x1292>
    50fa:	43 c0       	rjmp	.+134    	; 0x5182 <main+0x1318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50fc:	fe 01       	movw	r30, r28
    50fe:	ef 5a       	subi	r30, 0xAF	; 175
    5100:	ff 4f       	sbci	r31, 0xFF	; 255
    5102:	60 81       	ld	r22, Z
    5104:	71 81       	ldd	r23, Z+1	; 0x01
    5106:	82 81       	ldd	r24, Z+2	; 0x02
    5108:	93 81       	ldd	r25, Z+3	; 0x03
    510a:	20 e0       	ldi	r18, 0x00	; 0
    510c:	30 e0       	ldi	r19, 0x00	; 0
    510e:	40 e2       	ldi	r20, 0x20	; 32
    5110:	51 e4       	ldi	r21, 0x41	; 65
    5112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5116:	dc 01       	movw	r26, r24
    5118:	cb 01       	movw	r24, r22
    511a:	8e 01       	movw	r16, r28
    511c:	05 5b       	subi	r16, 0xB5	; 181
    511e:	1f 4f       	sbci	r17, 0xFF	; 255
    5120:	bc 01       	movw	r22, r24
    5122:	cd 01       	movw	r24, r26
    5124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5128:	dc 01       	movw	r26, r24
    512a:	cb 01       	movw	r24, r22
    512c:	f8 01       	movw	r30, r16
    512e:	91 83       	std	Z+1, r25	; 0x01
    5130:	80 83       	st	Z, r24
    5132:	1f c0       	rjmp	.+62     	; 0x5172 <main+0x1308>
    5134:	fe 01       	movw	r30, r28
    5136:	e7 5b       	subi	r30, 0xB7	; 183
    5138:	ff 4f       	sbci	r31, 0xFF	; 255
    513a:	80 e9       	ldi	r24, 0x90	; 144
    513c:	91 e0       	ldi	r25, 0x01	; 1
    513e:	91 83       	std	Z+1, r25	; 0x01
    5140:	80 83       	st	Z, r24
    5142:	fe 01       	movw	r30, r28
    5144:	e7 5b       	subi	r30, 0xB7	; 183
    5146:	ff 4f       	sbci	r31, 0xFF	; 255
    5148:	80 81       	ld	r24, Z
    514a:	91 81       	ldd	r25, Z+1	; 0x01
    514c:	01 97       	sbiw	r24, 0x01	; 1
    514e:	f1 f7       	brne	.-4      	; 0x514c <main+0x12e2>
    5150:	fe 01       	movw	r30, r28
    5152:	e7 5b       	subi	r30, 0xB7	; 183
    5154:	ff 4f       	sbci	r31, 0xFF	; 255
    5156:	91 83       	std	Z+1, r25	; 0x01
    5158:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    515a:	de 01       	movw	r26, r28
    515c:	a5 5b       	subi	r26, 0xB5	; 181
    515e:	bf 4f       	sbci	r27, 0xFF	; 255
    5160:	fe 01       	movw	r30, r28
    5162:	e5 5b       	subi	r30, 0xB5	; 181
    5164:	ff 4f       	sbci	r31, 0xFF	; 255
    5166:	80 81       	ld	r24, Z
    5168:	91 81       	ldd	r25, Z+1	; 0x01
    516a:	01 97       	sbiw	r24, 0x01	; 1
    516c:	11 96       	adiw	r26, 0x01	; 1
    516e:	9c 93       	st	X, r25
    5170:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5172:	fe 01       	movw	r30, r28
    5174:	e5 5b       	subi	r30, 0xB5	; 181
    5176:	ff 4f       	sbci	r31, 0xFF	; 255
    5178:	80 81       	ld	r24, Z
    517a:	91 81       	ldd	r25, Z+1	; 0x01
    517c:	00 97       	sbiw	r24, 0x00	; 0
    517e:	d1 f6       	brne	.-76     	; 0x5134 <main+0x12ca>
    5180:	28 c0       	rjmp	.+80     	; 0x51d2 <main+0x1368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5182:	8e 01       	movw	r16, r28
    5184:	05 5b       	subi	r16, 0xB5	; 181
    5186:	1f 4f       	sbci	r17, 0xFF	; 255
    5188:	fe 01       	movw	r30, r28
    518a:	e3 5b       	subi	r30, 0xB3	; 179
    518c:	ff 4f       	sbci	r31, 0xFF	; 255
    518e:	60 81       	ld	r22, Z
    5190:	71 81       	ldd	r23, Z+1	; 0x01
    5192:	82 81       	ldd	r24, Z+2	; 0x02
    5194:	93 81       	ldd	r25, Z+3	; 0x03
    5196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    519a:	dc 01       	movw	r26, r24
    519c:	cb 01       	movw	r24, r22
    519e:	f8 01       	movw	r30, r16
    51a0:	91 83       	std	Z+1, r25	; 0x01
    51a2:	80 83       	st	Z, r24
    51a4:	de 01       	movw	r26, r28
    51a6:	a9 5b       	subi	r26, 0xB9	; 185
    51a8:	bf 4f       	sbci	r27, 0xFF	; 255
    51aa:	fe 01       	movw	r30, r28
    51ac:	e5 5b       	subi	r30, 0xB5	; 181
    51ae:	ff 4f       	sbci	r31, 0xFF	; 255
    51b0:	80 81       	ld	r24, Z
    51b2:	91 81       	ldd	r25, Z+1	; 0x01
    51b4:	11 96       	adiw	r26, 0x01	; 1
    51b6:	9c 93       	st	X, r25
    51b8:	8e 93       	st	-X, r24
    51ba:	fe 01       	movw	r30, r28
    51bc:	e9 5b       	subi	r30, 0xB9	; 185
    51be:	ff 4f       	sbci	r31, 0xFF	; 255
    51c0:	80 81       	ld	r24, Z
    51c2:	91 81       	ldd	r25, Z+1	; 0x01
    51c4:	01 97       	sbiw	r24, 0x01	; 1
    51c6:	f1 f7       	brne	.-4      	; 0x51c4 <main+0x135a>
    51c8:	fe 01       	movw	r30, r28
    51ca:	e9 5b       	subi	r30, 0xB9	; 185
    51cc:	ff 4f       	sbci	r31, 0xFF	; 255
    51ce:	91 83       	std	Z+1, r25	; 0x01
    51d0:	80 83       	st	Z, r24

			/* CHECK IF THE SYSTEM ENTER THIS AREA FOR THE FIRST TIME BEFORE RISE END_u8Flag FLAG */
			if(END_u8Flag == 0){
    51d2:	80 91 c1 03 	lds	r24, 0x03C1
    51d6:	88 23       	and	r24, r24
    51d8:	19 f4       	brne	.+6      	; 0x51e0 <main+0x1376>

				/* GO TO AREA 6 TO ZEROS FLAGS BEFORE GO TO AREA 5 (GAS SENSOR AREA) SAFELY */
				Global_u8Control = 6;
    51da:	86 e0       	ldi	r24, 0x06	; 6
    51dc:	80 93 c2 03 	sts	0x03C2, r24
			}

			/* CHECK IF THE SYSTEM ALREADY RISE END_u8Flag AND PIN2 ON PORTD IS LOW (FALLING EDGE OF THE EXTERNAL INTERRUPT 0) */
			if((END_u8Flag == 1) && (DIO_u8GetPinValue(PORTD, PIN2) == 0)){
    51e0:	80 91 c1 03 	lds	r24, 0x03C1
    51e4:	81 30       	cpi	r24, 0x01	; 1
    51e6:	59 f4       	brne	.+22     	; 0x51fe <main+0x1394>
    51e8:	83 e0       	ldi	r24, 0x03	; 3
    51ea:	62 e0       	ldi	r22, 0x02	; 2
    51ec:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8GetPinValue>
    51f0:	88 23       	and	r24, r24
    51f2:	29 f4       	brne	.+10     	; 0x51fe <main+0x1394>

				/* BE HERE IN THE TEMPERATURE SENSOR AREA */
				Global_u8Control = 3;
    51f4:	83 e0       	ldi	r24, 0x03	; 3
    51f6:	80 93 c2 03 	sts	0x03C2, r24
    51fa:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <main+0x392>
			}

			/* CHECK IF THE SYSTEM ALREADY RISE END_u8Flag AND PIN2 ON PORTD IS HIGH (RISSING EDGE OF THE EXTERNAL INTERRUPT 0) */
			else if((END_u8Flag == 1) && (DIO_u8GetPinValue(PORTD, PIN2) == 1)){
    51fe:	80 91 c1 03 	lds	r24, 0x03C1
    5202:	81 30       	cpi	r24, 0x01	; 1
    5204:	11 f0       	breq	.+4      	; 0x520a <main+0x13a0>
    5206:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <main+0x392>
    520a:	83 e0       	ldi	r24, 0x03	; 3
    520c:	62 e0       	ldi	r22, 0x02	; 2
    520e:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8GetPinValue>
    5212:	81 30       	cpi	r24, 0x01	; 1
    5214:	11 f0       	breq	.+4      	; 0x521a <main+0x13b0>
    5216:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <main+0x392>

				/* GO TO AREA 10 TO ZEROS FLAGS BEFORE GO TO AREA 9 (RTC AREA SAFELY) */
				Global_u8Control = 10;
    521a:	8a e0       	ldi	r24, 0x0A	; 10
    521c:	80 93 c2 03 	sts	0x03C2, r24
    5220:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <main+0x392>
			}
		}

		/* THIS AREA TO ZEROS FLAGS OF TEMPERATURE SENSOR BEFORE ENTER TEMPERATURE SENSOR AREA */
		else if(Global_u8Control == 4){
    5224:	80 91 c2 03 	lds	r24, 0x03C2
    5228:	84 30       	cpi	r24, 0x04	; 4
    522a:	09 f5       	brne	.+66     	; 0x526e <main+0x1404>

			/* ZEROS THE FLAGS OF TEMPERATURE SENSOR FIRSTLY */
			TEMPERATURE_u16DigitalVoltage 		= 0;
    522c:	10 92 ab 03 	sts	0x03AB, r1
    5230:	10 92 aa 03 	sts	0x03AA, r1
			TEMPERATURE_u16OldDigitalVoltage 	= 0;
    5234:	10 92 ad 03 	sts	0x03AD, r1
    5238:	10 92 ac 03 	sts	0x03AC, r1
			TEMPERATURE_u16AnalogVoltagemv 		= 0;
    523c:	10 92 af 03 	sts	0x03AF, r1
    5240:	10 92 ae 03 	sts	0x03AE, r1
			TEMPERATURE_u16Temp 				= 0;
    5244:	10 92 b1 03 	sts	0x03B1, r1
    5248:	10 92 b0 03 	sts	0x03B0, r1
			TEMPERATURE_u8Flag0					= 0;
    524c:	10 92 c4 03 	sts	0x03C4, r1
			TEMPERATURE_u8Flag1 				= 0;
    5250:	10 92 b2 03 	sts	0x03B2, r1
			TEMPERATURE_u8Flag2 				= 0;
    5254:	10 92 b3 03 	sts	0x03B3, r1
			TEMPERATURE_u8Flag3 				= 0;
    5258:	10 92 b4 03 	sts	0x03B4, r1
			TEMPERATURE_u8Flag4 				= 0;
    525c:	10 92 b5 03 	sts	0x03B5, r1
			TEMPERATURE_u8Flag5 				= 0;
    5260:	10 92 b6 03 	sts	0x03B6, r1

			/* GO TO TEMPERATURE SENSOR AREA SAFELY */
			Global_u8Control = 3;
    5264:	83 e0       	ldi	r24, 0x03	; 3
    5266:	80 93 c2 03 	sts	0x03C2, r24
    526a:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <main+0x392>
		}

		/* GAS SENSOR AREA */
		else if(Global_u8Control == 5){
    526e:	80 91 c2 03 	lds	r24, 0x03C2
    5272:	85 30       	cpi	r24, 0x05	; 5
    5274:	09 f0       	breq	.+2      	; 0x5278 <main+0x140e>
    5276:	d2 c0       	rjmp	.+420    	; 0x541c <main+0x15b2>

			/* CHECK IF GAS IS NOT DETECTED AND IT'S FLAG IS ZERO */
			if(DIO_u8GetPinValue(PORTA, PIN1) == 0 && GAS_Flag1 == 0){
    5278:	80 e0       	ldi	r24, 0x00	; 0
    527a:	61 e0       	ldi	r22, 0x01	; 1
    527c:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8GetPinValue>
    5280:	88 23       	and	r24, r24
    5282:	09 f5       	brne	.+66     	; 0x52c6 <main+0x145c>
    5284:	80 91 c8 03 	lds	r24, 0x03C8
    5288:	88 23       	and	r24, r24
    528a:	e9 f4       	brne	.+58     	; 0x52c6 <main+0x145c>

				/* CLEAR THE LCD ,THEN WRITE THE STRING "GAS IS NOT DETECTED" */
				LCD_voidClearDisplay();
    528c:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_voidClearDisplay>
				LCD_voidGOTOXY(0, 3);
    5290:	80 e0       	ldi	r24, 0x00	; 0
    5292:	63 e0       	ldi	r22, 0x03	; 3
    5294:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"GAS IS NOT");
    5298:	88 e4       	ldi	r24, 0x48	; 72
    529a:	91 e0       	ldi	r25, 0x01	; 1
    529c:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
				LCD_voidGOTOXY(1, 4);
    52a0:	81 e0       	ldi	r24, 0x01	; 1
    52a2:	64 e0       	ldi	r22, 0x04	; 4
    52a4:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"DETECTED");
    52a8:	83 e5       	ldi	r24, 0x53	; 83
    52aa:	91 e0       	ldi	r25, 0x01	; 1
    52ac:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>

				/* TURN-OFF EMERGENCY LED */
				DIO_voidSetPinValue(PORTA, PIN6, LOW);
    52b0:	80 e0       	ldi	r24, 0x00	; 0
    52b2:	66 e0       	ldi	r22, 0x06	; 6
    52b4:	40 e0       	ldi	r20, 0x00	; 0
    52b6:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

				/* SET GAS_Flag1 TO PREVENT ENTER THIS IF CONDITION AGAIN UNTILL GAS IS DETECTED OR GO TO OTHER AREA SUCH AS TEMPERATURE AREA */
				GAS_Flag1 = 1;
    52ba:	81 e0       	ldi	r24, 0x01	; 1
    52bc:	80 93 c8 03 	sts	0x03C8, r24

				/* CLEAR THE OTHER FLAG TO ALLOW WRITEING THE SPECIFIED STRING WHEN GO TO THEIR IF CONDITION FOR THE FIRST TIME */
				GAS_Flag2 = 0;
    52c0:	10 92 c7 03 	sts	0x03C7, r1
    52c4:	1a c0       	rjmp	.+52     	; 0x52fa <main+0x1490>
			}

			/* CHECK IF GAS IS DETECTED AND IT'S FLAG IS ZERO */
			else if(DIO_u8GetPinValue(PORTA, PIN1) == 1 && GAS_Flag2 == 0){
    52c6:	80 e0       	ldi	r24, 0x00	; 0
    52c8:	61 e0       	ldi	r22, 0x01	; 1
    52ca:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8GetPinValue>
    52ce:	81 30       	cpi	r24, 0x01	; 1
    52d0:	a1 f4       	brne	.+40     	; 0x52fa <main+0x1490>
    52d2:	80 91 c7 03 	lds	r24, 0x03C7
    52d6:	88 23       	and	r24, r24
    52d8:	81 f4       	brne	.+32     	; 0x52fa <main+0x1490>

				/* CLEAR THE LCD ,THEN WRITE THE STRING "GAS IS DETECTED" */
				LCD_voidClearDisplay();
    52da:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_voidClearDisplay>
				LCD_voidWriteString((u8*)"GAS IS DETECTED");
    52de:	8c e5       	ldi	r24, 0x5C	; 92
    52e0:	91 e0       	ldi	r25, 0x01	; 1
    52e2:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>

				/* TURN-ON EMERGENCY LED TO IDENTICATE THERE'S A DANGEROUS DUE TO THE PRESSENCE OF GAS */
				DIO_voidSetPinValue(PORTA, PIN6, HIGH);
    52e6:	80 e0       	ldi	r24, 0x00	; 0
    52e8:	66 e0       	ldi	r22, 0x06	; 6
    52ea:	41 e0       	ldi	r20, 0x01	; 1
    52ec:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

				/* SET GAS_Flag2 TO PREVENT ENTER THIS IF CONDITION AGAIN UNTILL GAS IS NOT DETECTED OR GO TO OTHER AREA SUCH AS TEMPERATURE AREA */
				GAS_Flag2 = 1;
    52f0:	81 e0       	ldi	r24, 0x01	; 1
    52f2:	80 93 c7 03 	sts	0x03C7, r24

				/* CLEAR THE OTHER FLAG TO ALLOW WRITEING THE SPECIFIED STRING WHEN GO TO THEIR IF CONDITION FOR THE FIRST TIME */
				GAS_Flag1 = 0;
    52f6:	10 92 c8 03 	sts	0x03C8, r1
			}

			/* WAIT THE SPECIFIED VALUE OF TIME IN Default_u8Delay VARIABLE */
			_delay_ms(Default_u8Delay);
    52fa:	fe 01       	movw	r30, r28
    52fc:	e6 54       	subi	r30, 0x46	; 70
    52fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5300:	60 81       	ld	r22, Z
    5302:	71 81       	ldd	r23, Z+1	; 0x01
    5304:	82 81       	ldd	r24, Z+2	; 0x02
    5306:	93 81       	ldd	r25, Z+3	; 0x03
    5308:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    530c:	dc 01       	movw	r26, r24
    530e:	cb 01       	movw	r24, r22
    5310:	fe 01       	movw	r30, r28
    5312:	ed 5b       	subi	r30, 0xBD	; 189
    5314:	ff 4f       	sbci	r31, 0xFF	; 255
    5316:	80 83       	st	Z, r24
    5318:	91 83       	std	Z+1, r25	; 0x01
    531a:	a2 83       	std	Z+2, r26	; 0x02
    531c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    531e:	8e 01       	movw	r16, r28
    5320:	01 5c       	subi	r16, 0xC1	; 193
    5322:	1f 4f       	sbci	r17, 0xFF	; 255
    5324:	fe 01       	movw	r30, r28
    5326:	ed 5b       	subi	r30, 0xBD	; 189
    5328:	ff 4f       	sbci	r31, 0xFF	; 255
    532a:	60 81       	ld	r22, Z
    532c:	71 81       	ldd	r23, Z+1	; 0x01
    532e:	82 81       	ldd	r24, Z+2	; 0x02
    5330:	93 81       	ldd	r25, Z+3	; 0x03
    5332:	20 e0       	ldi	r18, 0x00	; 0
    5334:	30 e0       	ldi	r19, 0x00	; 0
    5336:	4a e7       	ldi	r20, 0x7A	; 122
    5338:	55 e4       	ldi	r21, 0x45	; 69
    533a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    533e:	dc 01       	movw	r26, r24
    5340:	cb 01       	movw	r24, r22
    5342:	f8 01       	movw	r30, r16
    5344:	80 83       	st	Z, r24
    5346:	91 83       	std	Z+1, r25	; 0x01
    5348:	a2 83       	std	Z+2, r26	; 0x02
    534a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    534c:	fe 01       	movw	r30, r28
    534e:	ff 96       	adiw	r30, 0x3f	; 63
    5350:	60 81       	ld	r22, Z
    5352:	71 81       	ldd	r23, Z+1	; 0x01
    5354:	82 81       	ldd	r24, Z+2	; 0x02
    5356:	93 81       	ldd	r25, Z+3	; 0x03
    5358:	20 e0       	ldi	r18, 0x00	; 0
    535a:	30 e0       	ldi	r19, 0x00	; 0
    535c:	40 e8       	ldi	r20, 0x80	; 128
    535e:	5f e3       	ldi	r21, 0x3F	; 63
    5360:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5364:	88 23       	and	r24, r24
    5366:	2c f4       	brge	.+10     	; 0x5372 <main+0x1508>
		__ticks = 1;
    5368:	81 e0       	ldi	r24, 0x01	; 1
    536a:	90 e0       	ldi	r25, 0x00	; 0
    536c:	9e af       	std	Y+62, r25	; 0x3e
    536e:	8d af       	std	Y+61, r24	; 0x3d
    5370:	46 c0       	rjmp	.+140    	; 0x53fe <main+0x1594>
	else if (__tmp > 65535)
    5372:	fe 01       	movw	r30, r28
    5374:	ff 96       	adiw	r30, 0x3f	; 63
    5376:	60 81       	ld	r22, Z
    5378:	71 81       	ldd	r23, Z+1	; 0x01
    537a:	82 81       	ldd	r24, Z+2	; 0x02
    537c:	93 81       	ldd	r25, Z+3	; 0x03
    537e:	20 e0       	ldi	r18, 0x00	; 0
    5380:	3f ef       	ldi	r19, 0xFF	; 255
    5382:	4f e7       	ldi	r20, 0x7F	; 127
    5384:	57 e4       	ldi	r21, 0x47	; 71
    5386:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    538a:	18 16       	cp	r1, r24
    538c:	64 f5       	brge	.+88     	; 0x53e6 <main+0x157c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    538e:	fe 01       	movw	r30, r28
    5390:	ed 5b       	subi	r30, 0xBD	; 189
    5392:	ff 4f       	sbci	r31, 0xFF	; 255
    5394:	60 81       	ld	r22, Z
    5396:	71 81       	ldd	r23, Z+1	; 0x01
    5398:	82 81       	ldd	r24, Z+2	; 0x02
    539a:	93 81       	ldd	r25, Z+3	; 0x03
    539c:	20 e0       	ldi	r18, 0x00	; 0
    539e:	30 e0       	ldi	r19, 0x00	; 0
    53a0:	40 e2       	ldi	r20, 0x20	; 32
    53a2:	51 e4       	ldi	r21, 0x41	; 65
    53a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53a8:	dc 01       	movw	r26, r24
    53aa:	cb 01       	movw	r24, r22
    53ac:	bc 01       	movw	r22, r24
    53ae:	cd 01       	movw	r24, r26
    53b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53b4:	dc 01       	movw	r26, r24
    53b6:	cb 01       	movw	r24, r22
    53b8:	9e af       	std	Y+62, r25	; 0x3e
    53ba:	8d af       	std	Y+61, r24	; 0x3d
    53bc:	0f c0       	rjmp	.+30     	; 0x53dc <main+0x1572>
    53be:	80 e9       	ldi	r24, 0x90	; 144
    53c0:	91 e0       	ldi	r25, 0x01	; 1
    53c2:	9c af       	std	Y+60, r25	; 0x3c
    53c4:	8b af       	std	Y+59, r24	; 0x3b
    53c6:	8b ad       	ldd	r24, Y+59	; 0x3b
    53c8:	9c ad       	ldd	r25, Y+60	; 0x3c
    53ca:	01 97       	sbiw	r24, 0x01	; 1
    53cc:	f1 f7       	brne	.-4      	; 0x53ca <main+0x1560>
    53ce:	9c af       	std	Y+60, r25	; 0x3c
    53d0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    53d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    53d6:	01 97       	sbiw	r24, 0x01	; 1
    53d8:	9e af       	std	Y+62, r25	; 0x3e
    53da:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    53de:	9e ad       	ldd	r25, Y+62	; 0x3e
    53e0:	00 97       	sbiw	r24, 0x00	; 0
    53e2:	69 f7       	brne	.-38     	; 0x53be <main+0x1554>
    53e4:	16 c0       	rjmp	.+44     	; 0x5412 <main+0x15a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53e6:	fe 01       	movw	r30, r28
    53e8:	ff 96       	adiw	r30, 0x3f	; 63
    53ea:	60 81       	ld	r22, Z
    53ec:	71 81       	ldd	r23, Z+1	; 0x01
    53ee:	82 81       	ldd	r24, Z+2	; 0x02
    53f0:	93 81       	ldd	r25, Z+3	; 0x03
    53f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53f6:	dc 01       	movw	r26, r24
    53f8:	cb 01       	movw	r24, r22
    53fa:	9e af       	std	Y+62, r25	; 0x3e
    53fc:	8d af       	std	Y+61, r24	; 0x3d
    53fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    5400:	9e ad       	ldd	r25, Y+62	; 0x3e
    5402:	9a af       	std	Y+58, r25	; 0x3a
    5404:	89 af       	std	Y+57, r24	; 0x39
    5406:	89 ad       	ldd	r24, Y+57	; 0x39
    5408:	9a ad       	ldd	r25, Y+58	; 0x3a
    540a:	01 97       	sbiw	r24, 0x01	; 1
    540c:	f1 f7       	brne	.-4      	; 0x540a <main+0x15a0>
    540e:	9a af       	std	Y+58, r25	; 0x3a
    5410:	89 af       	std	Y+57, r24	; 0x39

			/* GO TO AREA 8 TO ZEROS FLAGS BEFORE GO TO AREA 7 (LIGHT SYSTEM AREA) */
			Global_u8Control = 8;
    5412:	88 e0       	ldi	r24, 0x08	; 8
    5414:	80 93 c2 03 	sts	0x03C2, r24
    5418:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <main+0x392>
		}

		/* THIS AREA TO ZEROS FLAGS OF GAS SENSOR BEFORE ENTER GAS SENSOR AREA */
		else if(Global_u8Control == 6){
    541c:	80 91 c2 03 	lds	r24, 0x03C2
    5420:	86 30       	cpi	r24, 0x06	; 6
    5422:	49 f4       	brne	.+18     	; 0x5436 <main+0x15cc>

			/* ZEROS GAS SENSOR FLAGS */
			GAS_Flag1 = 0;
    5424:	10 92 c8 03 	sts	0x03C8, r1
			GAS_Flag2 = 0;
    5428:	10 92 c7 03 	sts	0x03C7, r1

			/* GO TO GAS SENSOR AREA SAFELY */
			Global_u8Control = 5;
    542c:	85 e0       	ldi	r24, 0x05	; 5
    542e:	80 93 c2 03 	sts	0x03C2, r24
    5432:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <main+0x392>
		}

		/* LIGHT SYSTEM AREA (LDR & PIR SENSOR) */
		else if(Global_u8Control == 7){
    5436:	80 91 c2 03 	lds	r24, 0x03C2
    543a:	87 30       	cpi	r24, 0x07	; 7
    543c:	09 f0       	breq	.+2      	; 0x5440 <main+0x15d6>
    543e:	94 c2       	rjmp	.+1320   	; 0x5968 <main+0x1afe>

			/* CHECK IF PIR SENSOR DETECT SOMEONE FOR THE FIRST TIME */
			if(DIO_u8GetPinValue(PORTA, PIN2) == 1 && PIR_u8Flag1 == 0){
    5440:	80 e0       	ldi	r24, 0x00	; 0
    5442:	62 e0       	ldi	r22, 0x02	; 2
    5444:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8GetPinValue>
    5448:	81 30       	cpi	r24, 0x01	; 1
    544a:	09 f0       	breq	.+2      	; 0x544e <main+0x15e4>
    544c:	15 c1       	rjmp	.+554    	; 0x5678 <main+0x180e>
    544e:	80 91 c6 03 	lds	r24, 0x03C6
    5452:	88 23       	and	r24, r24
    5454:	09 f0       	breq	.+2      	; 0x5458 <main+0x15ee>
    5456:	10 c1       	rjmp	.+544    	; 0x5678 <main+0x180e>

				/* CLEAR DISPLAY ,THEN WRITE THE STRING "SOMEONE IS DETECTED" */
				LCD_voidClearDisplay();
    5458:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_voidClearDisplay>
				LCD_voidGOTOXY(0, 3);
    545c:	80 e0       	ldi	r24, 0x00	; 0
    545e:	63 e0       	ldi	r22, 0x03	; 3
    5460:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"SOMEONE IS");
    5464:	8c e6       	ldi	r24, 0x6C	; 108
    5466:	91 e0       	ldi	r25, 0x01	; 1
    5468:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
				LCD_voidGOTOXY(1, 4);
    546c:	81 e0       	ldi	r24, 0x01	; 1
    546e:	64 e0       	ldi	r22, 0x04	; 4
    5470:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"DETECTED");
    5474:	83 e5       	ldi	r24, 0x53	; 83
    5476:	91 e0       	ldi	r25, 0x01	; 1
    5478:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>

				/* WAIT THE SPECIFIED VALUE OF TIME IN Default_u8Delay VARIABLE */
				_delay_ms(Default_u8Delay);
    547c:	fe 01       	movw	r30, r28
    547e:	e6 54       	subi	r30, 0x46	; 70
    5480:	ff 4f       	sbci	r31, 0xFF	; 255
    5482:	60 81       	ld	r22, Z
    5484:	71 81       	ldd	r23, Z+1	; 0x01
    5486:	82 81       	ldd	r24, Z+2	; 0x02
    5488:	93 81       	ldd	r25, Z+3	; 0x03
    548a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    548e:	dc 01       	movw	r26, r24
    5490:	cb 01       	movw	r24, r22
    5492:	8d ab       	std	Y+53, r24	; 0x35
    5494:	9e ab       	std	Y+54, r25	; 0x36
    5496:	af ab       	std	Y+55, r26	; 0x37
    5498:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    549a:	6d a9       	ldd	r22, Y+53	; 0x35
    549c:	7e a9       	ldd	r23, Y+54	; 0x36
    549e:	8f a9       	ldd	r24, Y+55	; 0x37
    54a0:	98 ad       	ldd	r25, Y+56	; 0x38
    54a2:	20 e0       	ldi	r18, 0x00	; 0
    54a4:	30 e0       	ldi	r19, 0x00	; 0
    54a6:	4a e7       	ldi	r20, 0x7A	; 122
    54a8:	55 e4       	ldi	r21, 0x45	; 69
    54aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54ae:	dc 01       	movw	r26, r24
    54b0:	cb 01       	movw	r24, r22
    54b2:	89 ab       	std	Y+49, r24	; 0x31
    54b4:	9a ab       	std	Y+50, r25	; 0x32
    54b6:	ab ab       	std	Y+51, r26	; 0x33
    54b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    54ba:	69 a9       	ldd	r22, Y+49	; 0x31
    54bc:	7a a9       	ldd	r23, Y+50	; 0x32
    54be:	8b a9       	ldd	r24, Y+51	; 0x33
    54c0:	9c a9       	ldd	r25, Y+52	; 0x34
    54c2:	20 e0       	ldi	r18, 0x00	; 0
    54c4:	30 e0       	ldi	r19, 0x00	; 0
    54c6:	40 e8       	ldi	r20, 0x80	; 128
    54c8:	5f e3       	ldi	r21, 0x3F	; 63
    54ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    54ce:	88 23       	and	r24, r24
    54d0:	2c f4       	brge	.+10     	; 0x54dc <main+0x1672>
		__ticks = 1;
    54d2:	81 e0       	ldi	r24, 0x01	; 1
    54d4:	90 e0       	ldi	r25, 0x00	; 0
    54d6:	98 ab       	std	Y+48, r25	; 0x30
    54d8:	8f a7       	std	Y+47, r24	; 0x2f
    54da:	3f c0       	rjmp	.+126    	; 0x555a <main+0x16f0>
	else if (__tmp > 65535)
    54dc:	69 a9       	ldd	r22, Y+49	; 0x31
    54de:	7a a9       	ldd	r23, Y+50	; 0x32
    54e0:	8b a9       	ldd	r24, Y+51	; 0x33
    54e2:	9c a9       	ldd	r25, Y+52	; 0x34
    54e4:	20 e0       	ldi	r18, 0x00	; 0
    54e6:	3f ef       	ldi	r19, 0xFF	; 255
    54e8:	4f e7       	ldi	r20, 0x7F	; 127
    54ea:	57 e4       	ldi	r21, 0x47	; 71
    54ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    54f0:	18 16       	cp	r1, r24
    54f2:	4c f5       	brge	.+82     	; 0x5546 <main+0x16dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54f4:	6d a9       	ldd	r22, Y+53	; 0x35
    54f6:	7e a9       	ldd	r23, Y+54	; 0x36
    54f8:	8f a9       	ldd	r24, Y+55	; 0x37
    54fa:	98 ad       	ldd	r25, Y+56	; 0x38
    54fc:	20 e0       	ldi	r18, 0x00	; 0
    54fe:	30 e0       	ldi	r19, 0x00	; 0
    5500:	40 e2       	ldi	r20, 0x20	; 32
    5502:	51 e4       	ldi	r21, 0x41	; 65
    5504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5508:	dc 01       	movw	r26, r24
    550a:	cb 01       	movw	r24, r22
    550c:	bc 01       	movw	r22, r24
    550e:	cd 01       	movw	r24, r26
    5510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5514:	dc 01       	movw	r26, r24
    5516:	cb 01       	movw	r24, r22
    5518:	98 ab       	std	Y+48, r25	; 0x30
    551a:	8f a7       	std	Y+47, r24	; 0x2f
    551c:	0f c0       	rjmp	.+30     	; 0x553c <main+0x16d2>
    551e:	80 e9       	ldi	r24, 0x90	; 144
    5520:	91 e0       	ldi	r25, 0x01	; 1
    5522:	9e a7       	std	Y+46, r25	; 0x2e
    5524:	8d a7       	std	Y+45, r24	; 0x2d
    5526:	8d a5       	ldd	r24, Y+45	; 0x2d
    5528:	9e a5       	ldd	r25, Y+46	; 0x2e
    552a:	01 97       	sbiw	r24, 0x01	; 1
    552c:	f1 f7       	brne	.-4      	; 0x552a <main+0x16c0>
    552e:	9e a7       	std	Y+46, r25	; 0x2e
    5530:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5532:	8f a5       	ldd	r24, Y+47	; 0x2f
    5534:	98 a9       	ldd	r25, Y+48	; 0x30
    5536:	01 97       	sbiw	r24, 0x01	; 1
    5538:	98 ab       	std	Y+48, r25	; 0x30
    553a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    553c:	8f a5       	ldd	r24, Y+47	; 0x2f
    553e:	98 a9       	ldd	r25, Y+48	; 0x30
    5540:	00 97       	sbiw	r24, 0x00	; 0
    5542:	69 f7       	brne	.-38     	; 0x551e <main+0x16b4>
    5544:	14 c0       	rjmp	.+40     	; 0x556e <main+0x1704>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5546:	69 a9       	ldd	r22, Y+49	; 0x31
    5548:	7a a9       	ldd	r23, Y+50	; 0x32
    554a:	8b a9       	ldd	r24, Y+51	; 0x33
    554c:	9c a9       	ldd	r25, Y+52	; 0x34
    554e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5552:	dc 01       	movw	r26, r24
    5554:	cb 01       	movw	r24, r22
    5556:	98 ab       	std	Y+48, r25	; 0x30
    5558:	8f a7       	std	Y+47, r24	; 0x2f
    555a:	8f a5       	ldd	r24, Y+47	; 0x2f
    555c:	98 a9       	ldd	r25, Y+48	; 0x30
    555e:	9c a7       	std	Y+44, r25	; 0x2c
    5560:	8b a7       	std	Y+43, r24	; 0x2b
    5562:	8b a5       	ldd	r24, Y+43	; 0x2b
    5564:	9c a5       	ldd	r25, Y+44	; 0x2c
    5566:	01 97       	sbiw	r24, 0x01	; 1
    5568:	f1 f7       	brne	.-4      	; 0x5566 <main+0x16fc>
    556a:	9c a7       	std	Y+44, r25	; 0x2c
    556c:	8b a7       	std	Y+43, r24	; 0x2b

				/* SET ADC_u8ChannelSelected GLOBAL VARIABLE TO 3 TO GO TO THE LDR AREA IN THE CALL BACK FUNCTION OF ADC */
				ADC_u8ChannelSelected = 3;
    556e:	83 e0       	ldi	r24, 0x03	; 3
    5570:	80 93 c9 03 	sts	0x03C9, r24

				// READ CHANNEL3 ASYNCHROUNOUSLY (START CONVERSION)
				ADC_voidReadChannelASyn(CHANNEL3);
    5574:	83 e0       	ldi	r24, 0x03	; 3
    5576:	0e 94 41 08 	call	0x1082	; 0x1082 <ADC_voidReadChannelASyn>

				/* WAIT THE SPECIFIED VALUE OF TIME IN Default_u8Delay VARIABLE */
				_delay_ms(Default_u8Delay);
    557a:	fe 01       	movw	r30, r28
    557c:	e6 54       	subi	r30, 0x46	; 70
    557e:	ff 4f       	sbci	r31, 0xFF	; 255
    5580:	60 81       	ld	r22, Z
    5582:	71 81       	ldd	r23, Z+1	; 0x01
    5584:	82 81       	ldd	r24, Z+2	; 0x02
    5586:	93 81       	ldd	r25, Z+3	; 0x03
    5588:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    558c:	dc 01       	movw	r26, r24
    558e:	cb 01       	movw	r24, r22
    5590:	8f a3       	std	Y+39, r24	; 0x27
    5592:	98 a7       	std	Y+40, r25	; 0x28
    5594:	a9 a7       	std	Y+41, r26	; 0x29
    5596:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5598:	6f a1       	ldd	r22, Y+39	; 0x27
    559a:	78 a5       	ldd	r23, Y+40	; 0x28
    559c:	89 a5       	ldd	r24, Y+41	; 0x29
    559e:	9a a5       	ldd	r25, Y+42	; 0x2a
    55a0:	20 e0       	ldi	r18, 0x00	; 0
    55a2:	30 e0       	ldi	r19, 0x00	; 0
    55a4:	4a e7       	ldi	r20, 0x7A	; 122
    55a6:	55 e4       	ldi	r21, 0x45	; 69
    55a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55ac:	dc 01       	movw	r26, r24
    55ae:	cb 01       	movw	r24, r22
    55b0:	8b a3       	std	Y+35, r24	; 0x23
    55b2:	9c a3       	std	Y+36, r25	; 0x24
    55b4:	ad a3       	std	Y+37, r26	; 0x25
    55b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    55b8:	6b a1       	ldd	r22, Y+35	; 0x23
    55ba:	7c a1       	ldd	r23, Y+36	; 0x24
    55bc:	8d a1       	ldd	r24, Y+37	; 0x25
    55be:	9e a1       	ldd	r25, Y+38	; 0x26
    55c0:	20 e0       	ldi	r18, 0x00	; 0
    55c2:	30 e0       	ldi	r19, 0x00	; 0
    55c4:	40 e8       	ldi	r20, 0x80	; 128
    55c6:	5f e3       	ldi	r21, 0x3F	; 63
    55c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    55cc:	88 23       	and	r24, r24
    55ce:	2c f4       	brge	.+10     	; 0x55da <main+0x1770>
		__ticks = 1;
    55d0:	81 e0       	ldi	r24, 0x01	; 1
    55d2:	90 e0       	ldi	r25, 0x00	; 0
    55d4:	9a a3       	std	Y+34, r25	; 0x22
    55d6:	89 a3       	std	Y+33, r24	; 0x21
    55d8:	3f c0       	rjmp	.+126    	; 0x5658 <main+0x17ee>
	else if (__tmp > 65535)
    55da:	6b a1       	ldd	r22, Y+35	; 0x23
    55dc:	7c a1       	ldd	r23, Y+36	; 0x24
    55de:	8d a1       	ldd	r24, Y+37	; 0x25
    55e0:	9e a1       	ldd	r25, Y+38	; 0x26
    55e2:	20 e0       	ldi	r18, 0x00	; 0
    55e4:	3f ef       	ldi	r19, 0xFF	; 255
    55e6:	4f e7       	ldi	r20, 0x7F	; 127
    55e8:	57 e4       	ldi	r21, 0x47	; 71
    55ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    55ee:	18 16       	cp	r1, r24
    55f0:	4c f5       	brge	.+82     	; 0x5644 <main+0x17da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55f2:	6f a1       	ldd	r22, Y+39	; 0x27
    55f4:	78 a5       	ldd	r23, Y+40	; 0x28
    55f6:	89 a5       	ldd	r24, Y+41	; 0x29
    55f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    55fa:	20 e0       	ldi	r18, 0x00	; 0
    55fc:	30 e0       	ldi	r19, 0x00	; 0
    55fe:	40 e2       	ldi	r20, 0x20	; 32
    5600:	51 e4       	ldi	r21, 0x41	; 65
    5602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5606:	dc 01       	movw	r26, r24
    5608:	cb 01       	movw	r24, r22
    560a:	bc 01       	movw	r22, r24
    560c:	cd 01       	movw	r24, r26
    560e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5612:	dc 01       	movw	r26, r24
    5614:	cb 01       	movw	r24, r22
    5616:	9a a3       	std	Y+34, r25	; 0x22
    5618:	89 a3       	std	Y+33, r24	; 0x21
    561a:	0f c0       	rjmp	.+30     	; 0x563a <main+0x17d0>
    561c:	80 e9       	ldi	r24, 0x90	; 144
    561e:	91 e0       	ldi	r25, 0x01	; 1
    5620:	98 a3       	std	Y+32, r25	; 0x20
    5622:	8f 8f       	std	Y+31, r24	; 0x1f
    5624:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5626:	98 a1       	ldd	r25, Y+32	; 0x20
    5628:	01 97       	sbiw	r24, 0x01	; 1
    562a:	f1 f7       	brne	.-4      	; 0x5628 <main+0x17be>
    562c:	98 a3       	std	Y+32, r25	; 0x20
    562e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5630:	89 a1       	ldd	r24, Y+33	; 0x21
    5632:	9a a1       	ldd	r25, Y+34	; 0x22
    5634:	01 97       	sbiw	r24, 0x01	; 1
    5636:	9a a3       	std	Y+34, r25	; 0x22
    5638:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    563a:	89 a1       	ldd	r24, Y+33	; 0x21
    563c:	9a a1       	ldd	r25, Y+34	; 0x22
    563e:	00 97       	sbiw	r24, 0x00	; 0
    5640:	69 f7       	brne	.-38     	; 0x561c <main+0x17b2>
    5642:	14 c0       	rjmp	.+40     	; 0x566c <main+0x1802>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5644:	6b a1       	ldd	r22, Y+35	; 0x23
    5646:	7c a1       	ldd	r23, Y+36	; 0x24
    5648:	8d a1       	ldd	r24, Y+37	; 0x25
    564a:	9e a1       	ldd	r25, Y+38	; 0x26
    564c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5650:	dc 01       	movw	r26, r24
    5652:	cb 01       	movw	r24, r22
    5654:	9a a3       	std	Y+34, r25	; 0x22
    5656:	89 a3       	std	Y+33, r24	; 0x21
    5658:	89 a1       	ldd	r24, Y+33	; 0x21
    565a:	9a a1       	ldd	r25, Y+34	; 0x22
    565c:	9e 8f       	std	Y+30, r25	; 0x1e
    565e:	8d 8f       	std	Y+29, r24	; 0x1d
    5660:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5662:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5664:	01 97       	sbiw	r24, 0x01	; 1
    5666:	f1 f7       	brne	.-4      	; 0x5664 <main+0x17fa>
    5668:	9e 8f       	std	Y+30, r25	; 0x1e
    566a:	8d 8f       	std	Y+29, r24	; 0x1d

				/* SET PIR_u8Flag1 TO PREVENT ENTER THIS IF CONDITION AGAIN UNTILL SOMEONE IS NOT DETECTED OR GO TO OTHER AREA SUCH AS TEMPERATURE AREA */
				PIR_u8Flag1 = 1;
    566c:	81 e0       	ldi	r24, 0x01	; 1
    566e:	80 93 c6 03 	sts	0x03C6, r24

				/* CLEAR THE OTHER FLAG TO ALLOW WRITEING THE SPECIFIED STRING WHEN GO TO THEIR IF CONDITION FOR THE FIRST TIME */
				PIR_u8Flag2 = 0;
    5672:	10 92 c5 03 	sts	0x03C5, r1
    5676:	4f c1       	rjmp	.+670    	; 0x5916 <main+0x1aac>
			}

			/* CHECK IF PIR SENSOR DETECT SOMEONE FOR NOT THE FIRST TIME */
			else if(DIO_u8GetPinValue(PORTA, PIN2) == 1 && PIR_u8Flag1 == 1){
    5678:	80 e0       	ldi	r24, 0x00	; 0
    567a:	62 e0       	ldi	r22, 0x02	; 2
    567c:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8GetPinValue>
    5680:	81 30       	cpi	r24, 0x01	; 1
    5682:	09 f0       	breq	.+2      	; 0x5686 <main+0x181c>
    5684:	7e c0       	rjmp	.+252    	; 0x5782 <main+0x1918>
    5686:	80 91 c6 03 	lds	r24, 0x03C6
    568a:	81 30       	cpi	r24, 0x01	; 1
    568c:	09 f0       	breq	.+2      	; 0x5690 <main+0x1826>
    568e:	79 c0       	rjmp	.+242    	; 0x5782 <main+0x1918>

				/* SET ADC_u8ChannelSelected GLOBAL VARIABLE TO 3 TO GO TO THE LDR AREA IN THE CALL BACK FUNCTION OF ADC */
				ADC_u8ChannelSelected = 3;
    5690:	83 e0       	ldi	r24, 0x03	; 3
    5692:	80 93 c9 03 	sts	0x03C9, r24

				// READ CHANNEL3 ASYNCHROUNOUSLY (START CONVERSION)
				ADC_voidReadChannelASyn(CHANNEL3);
    5696:	83 e0       	ldi	r24, 0x03	; 3
    5698:	0e 94 41 08 	call	0x1082	; 0x1082 <ADC_voidReadChannelASyn>
    569c:	80 e0       	ldi	r24, 0x00	; 0
    569e:	90 e0       	ldi	r25, 0x00	; 0
    56a0:	a0 ea       	ldi	r26, 0xA0	; 160
    56a2:	b1 e4       	ldi	r27, 0x41	; 65
    56a4:	89 8f       	std	Y+25, r24	; 0x19
    56a6:	9a 8f       	std	Y+26, r25	; 0x1a
    56a8:	ab 8f       	std	Y+27, r26	; 0x1b
    56aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56ac:	69 8d       	ldd	r22, Y+25	; 0x19
    56ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    56b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    56b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    56b4:	20 e0       	ldi	r18, 0x00	; 0
    56b6:	30 e0       	ldi	r19, 0x00	; 0
    56b8:	4a e7       	ldi	r20, 0x7A	; 122
    56ba:	55 e4       	ldi	r21, 0x45	; 69
    56bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56c0:	dc 01       	movw	r26, r24
    56c2:	cb 01       	movw	r24, r22
    56c4:	8d 8b       	std	Y+21, r24	; 0x15
    56c6:	9e 8b       	std	Y+22, r25	; 0x16
    56c8:	af 8b       	std	Y+23, r26	; 0x17
    56ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    56cc:	6d 89       	ldd	r22, Y+21	; 0x15
    56ce:	7e 89       	ldd	r23, Y+22	; 0x16
    56d0:	8f 89       	ldd	r24, Y+23	; 0x17
    56d2:	98 8d       	ldd	r25, Y+24	; 0x18
    56d4:	20 e0       	ldi	r18, 0x00	; 0
    56d6:	30 e0       	ldi	r19, 0x00	; 0
    56d8:	40 e8       	ldi	r20, 0x80	; 128
    56da:	5f e3       	ldi	r21, 0x3F	; 63
    56dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    56e0:	88 23       	and	r24, r24
    56e2:	2c f4       	brge	.+10     	; 0x56ee <main+0x1884>
		__ticks = 1;
    56e4:	81 e0       	ldi	r24, 0x01	; 1
    56e6:	90 e0       	ldi	r25, 0x00	; 0
    56e8:	9c 8b       	std	Y+20, r25	; 0x14
    56ea:	8b 8b       	std	Y+19, r24	; 0x13
    56ec:	3f c0       	rjmp	.+126    	; 0x576c <main+0x1902>
	else if (__tmp > 65535)
    56ee:	6d 89       	ldd	r22, Y+21	; 0x15
    56f0:	7e 89       	ldd	r23, Y+22	; 0x16
    56f2:	8f 89       	ldd	r24, Y+23	; 0x17
    56f4:	98 8d       	ldd	r25, Y+24	; 0x18
    56f6:	20 e0       	ldi	r18, 0x00	; 0
    56f8:	3f ef       	ldi	r19, 0xFF	; 255
    56fa:	4f e7       	ldi	r20, 0x7F	; 127
    56fc:	57 e4       	ldi	r21, 0x47	; 71
    56fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5702:	18 16       	cp	r1, r24
    5704:	4c f5       	brge	.+82     	; 0x5758 <main+0x18ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5706:	69 8d       	ldd	r22, Y+25	; 0x19
    5708:	7a 8d       	ldd	r23, Y+26	; 0x1a
    570a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    570c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    570e:	20 e0       	ldi	r18, 0x00	; 0
    5710:	30 e0       	ldi	r19, 0x00	; 0
    5712:	40 e2       	ldi	r20, 0x20	; 32
    5714:	51 e4       	ldi	r21, 0x41	; 65
    5716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    571a:	dc 01       	movw	r26, r24
    571c:	cb 01       	movw	r24, r22
    571e:	bc 01       	movw	r22, r24
    5720:	cd 01       	movw	r24, r26
    5722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5726:	dc 01       	movw	r26, r24
    5728:	cb 01       	movw	r24, r22
    572a:	9c 8b       	std	Y+20, r25	; 0x14
    572c:	8b 8b       	std	Y+19, r24	; 0x13
    572e:	0f c0       	rjmp	.+30     	; 0x574e <main+0x18e4>
    5730:	80 e9       	ldi	r24, 0x90	; 144
    5732:	91 e0       	ldi	r25, 0x01	; 1
    5734:	9a 8b       	std	Y+18, r25	; 0x12
    5736:	89 8b       	std	Y+17, r24	; 0x11
    5738:	89 89       	ldd	r24, Y+17	; 0x11
    573a:	9a 89       	ldd	r25, Y+18	; 0x12
    573c:	01 97       	sbiw	r24, 0x01	; 1
    573e:	f1 f7       	brne	.-4      	; 0x573c <main+0x18d2>
    5740:	9a 8b       	std	Y+18, r25	; 0x12
    5742:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5744:	8b 89       	ldd	r24, Y+19	; 0x13
    5746:	9c 89       	ldd	r25, Y+20	; 0x14
    5748:	01 97       	sbiw	r24, 0x01	; 1
    574a:	9c 8b       	std	Y+20, r25	; 0x14
    574c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    574e:	8b 89       	ldd	r24, Y+19	; 0x13
    5750:	9c 89       	ldd	r25, Y+20	; 0x14
    5752:	00 97       	sbiw	r24, 0x00	; 0
    5754:	69 f7       	brne	.-38     	; 0x5730 <main+0x18c6>
    5756:	df c0       	rjmp	.+446    	; 0x5916 <main+0x1aac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5758:	6d 89       	ldd	r22, Y+21	; 0x15
    575a:	7e 89       	ldd	r23, Y+22	; 0x16
    575c:	8f 89       	ldd	r24, Y+23	; 0x17
    575e:	98 8d       	ldd	r25, Y+24	; 0x18
    5760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5764:	dc 01       	movw	r26, r24
    5766:	cb 01       	movw	r24, r22
    5768:	9c 8b       	std	Y+20, r25	; 0x14
    576a:	8b 8b       	std	Y+19, r24	; 0x13
    576c:	8b 89       	ldd	r24, Y+19	; 0x13
    576e:	9c 89       	ldd	r25, Y+20	; 0x14
    5770:	98 8b       	std	Y+16, r25	; 0x10
    5772:	8f 87       	std	Y+15, r24	; 0x0f
    5774:	8f 85       	ldd	r24, Y+15	; 0x0f
    5776:	98 89       	ldd	r25, Y+16	; 0x10
    5778:	01 97       	sbiw	r24, 0x01	; 1
    577a:	f1 f7       	brne	.-4      	; 0x5778 <main+0x190e>
    577c:	98 8b       	std	Y+16, r25	; 0x10
    577e:	8f 87       	std	Y+15, r24	; 0x0f
    5780:	ca c0       	rjmp	.+404    	; 0x5916 <main+0x1aac>
				_delay_ms(20);

			}

			/* CHECK IF PIR SENSOR NOT DETECT SOMEONE FOR THE FIRST TIME */
			else if(DIO_u8GetPinValue(PORTA, PIN2) == 0 && PIR_u8Flag2 == 0){
    5782:	80 e0       	ldi	r24, 0x00	; 0
    5784:	62 e0       	ldi	r22, 0x02	; 2
    5786:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8GetPinValue>
    578a:	88 23       	and	r24, r24
    578c:	09 f0       	breq	.+2      	; 0x5790 <main+0x1926>
    578e:	a3 c0       	rjmp	.+326    	; 0x58d6 <main+0x1a6c>
    5790:	80 91 c5 03 	lds	r24, 0x03C5
    5794:	88 23       	and	r24, r24
    5796:	09 f0       	breq	.+2      	; 0x579a <main+0x1930>
    5798:	9e c0       	rjmp	.+316    	; 0x58d6 <main+0x1a6c>

				/* TURN-OFF LEDS OF LIGHT SYSTEM */
				DIO_voidSetPinValue(PORTA, PIN4, LOW);
    579a:	80 e0       	ldi	r24, 0x00	; 0
    579c:	64 e0       	ldi	r22, 0x04	; 4
    579e:	40 e0       	ldi	r20, 0x00	; 0
    57a0:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
				DIO_voidSetPinValue(PORTA, PIN5, LOW);
    57a4:	80 e0       	ldi	r24, 0x00	; 0
    57a6:	65 e0       	ldi	r22, 0x05	; 5
    57a8:	40 e0       	ldi	r20, 0x00	; 0
    57aa:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
				DIO_voidSetPinValue(PORTB, PIN2, LOW);
    57ae:	81 e0       	ldi	r24, 0x01	; 1
    57b0:	62 e0       	ldi	r22, 0x02	; 2
    57b2:	40 e0       	ldi	r20, 0x00	; 0
    57b4:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

				/* CLEAR DISPLAY ,THEN WRITE "NO ONE DETECTED,LEDS TURNED-OFF" */
				LCD_voidClearDisplay();
    57b8:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_voidClearDisplay>
				LCD_voidGOTOXY(0, 0);
    57bc:	80 e0       	ldi	r24, 0x00	; 0
    57be:	60 e0       	ldi	r22, 0x00	; 0
    57c0:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"NO ONE DETECTED,");
    57c4:	87 e7       	ldi	r24, 0x77	; 119
    57c6:	91 e0       	ldi	r25, 0x01	; 1
    57c8:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
				LCD_voidGOTOXY(1, 0);
    57cc:	81 e0       	ldi	r24, 0x01	; 1
    57ce:	60 e0       	ldi	r22, 0x00	; 0
    57d0:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"LEDS TURNED-OFF");
    57d4:	88 e8       	ldi	r24, 0x88	; 136
    57d6:	91 e0       	ldi	r25, 0x01	; 1
    57d8:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>

				/* WAIT THE SPECIFIED VALUE OF TIME IN Default_u8Delay VARIABLE */
				_delay_ms(Default_u8Delay);
    57dc:	fe 01       	movw	r30, r28
    57de:	e6 54       	subi	r30, 0x46	; 70
    57e0:	ff 4f       	sbci	r31, 0xFF	; 255
    57e2:	60 81       	ld	r22, Z
    57e4:	71 81       	ldd	r23, Z+1	; 0x01
    57e6:	82 81       	ldd	r24, Z+2	; 0x02
    57e8:	93 81       	ldd	r25, Z+3	; 0x03
    57ea:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    57ee:	dc 01       	movw	r26, r24
    57f0:	cb 01       	movw	r24, r22
    57f2:	8b 87       	std	Y+11, r24	; 0x0b
    57f4:	9c 87       	std	Y+12, r25	; 0x0c
    57f6:	ad 87       	std	Y+13, r26	; 0x0d
    57f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    57fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    57fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5800:	9e 85       	ldd	r25, Y+14	; 0x0e
    5802:	20 e0       	ldi	r18, 0x00	; 0
    5804:	30 e0       	ldi	r19, 0x00	; 0
    5806:	4a e7       	ldi	r20, 0x7A	; 122
    5808:	55 e4       	ldi	r21, 0x45	; 69
    580a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    580e:	dc 01       	movw	r26, r24
    5810:	cb 01       	movw	r24, r22
    5812:	8f 83       	std	Y+7, r24	; 0x07
    5814:	98 87       	std	Y+8, r25	; 0x08
    5816:	a9 87       	std	Y+9, r26	; 0x09
    5818:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    581a:	6f 81       	ldd	r22, Y+7	; 0x07
    581c:	78 85       	ldd	r23, Y+8	; 0x08
    581e:	89 85       	ldd	r24, Y+9	; 0x09
    5820:	9a 85       	ldd	r25, Y+10	; 0x0a
    5822:	20 e0       	ldi	r18, 0x00	; 0
    5824:	30 e0       	ldi	r19, 0x00	; 0
    5826:	40 e8       	ldi	r20, 0x80	; 128
    5828:	5f e3       	ldi	r21, 0x3F	; 63
    582a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    582e:	88 23       	and	r24, r24
    5830:	2c f4       	brge	.+10     	; 0x583c <main+0x19d2>
		__ticks = 1;
    5832:	81 e0       	ldi	r24, 0x01	; 1
    5834:	90 e0       	ldi	r25, 0x00	; 0
    5836:	9e 83       	std	Y+6, r25	; 0x06
    5838:	8d 83       	std	Y+5, r24	; 0x05
    583a:	3f c0       	rjmp	.+126    	; 0x58ba <main+0x1a50>
	else if (__tmp > 65535)
    583c:	6f 81       	ldd	r22, Y+7	; 0x07
    583e:	78 85       	ldd	r23, Y+8	; 0x08
    5840:	89 85       	ldd	r24, Y+9	; 0x09
    5842:	9a 85       	ldd	r25, Y+10	; 0x0a
    5844:	20 e0       	ldi	r18, 0x00	; 0
    5846:	3f ef       	ldi	r19, 0xFF	; 255
    5848:	4f e7       	ldi	r20, 0x7F	; 127
    584a:	57 e4       	ldi	r21, 0x47	; 71
    584c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5850:	18 16       	cp	r1, r24
    5852:	4c f5       	brge	.+82     	; 0x58a6 <main+0x1a3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5854:	6b 85       	ldd	r22, Y+11	; 0x0b
    5856:	7c 85       	ldd	r23, Y+12	; 0x0c
    5858:	8d 85       	ldd	r24, Y+13	; 0x0d
    585a:	9e 85       	ldd	r25, Y+14	; 0x0e
    585c:	20 e0       	ldi	r18, 0x00	; 0
    585e:	30 e0       	ldi	r19, 0x00	; 0
    5860:	40 e2       	ldi	r20, 0x20	; 32
    5862:	51 e4       	ldi	r21, 0x41	; 65
    5864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5868:	dc 01       	movw	r26, r24
    586a:	cb 01       	movw	r24, r22
    586c:	bc 01       	movw	r22, r24
    586e:	cd 01       	movw	r24, r26
    5870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5874:	dc 01       	movw	r26, r24
    5876:	cb 01       	movw	r24, r22
    5878:	9e 83       	std	Y+6, r25	; 0x06
    587a:	8d 83       	std	Y+5, r24	; 0x05
    587c:	0f c0       	rjmp	.+30     	; 0x589c <main+0x1a32>
    587e:	80 e9       	ldi	r24, 0x90	; 144
    5880:	91 e0       	ldi	r25, 0x01	; 1
    5882:	9c 83       	std	Y+4, r25	; 0x04
    5884:	8b 83       	std	Y+3, r24	; 0x03
    5886:	8b 81       	ldd	r24, Y+3	; 0x03
    5888:	9c 81       	ldd	r25, Y+4	; 0x04
    588a:	01 97       	sbiw	r24, 0x01	; 1
    588c:	f1 f7       	brne	.-4      	; 0x588a <main+0x1a20>
    588e:	9c 83       	std	Y+4, r25	; 0x04
    5890:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5892:	8d 81       	ldd	r24, Y+5	; 0x05
    5894:	9e 81       	ldd	r25, Y+6	; 0x06
    5896:	01 97       	sbiw	r24, 0x01	; 1
    5898:	9e 83       	std	Y+6, r25	; 0x06
    589a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    589c:	8d 81       	ldd	r24, Y+5	; 0x05
    589e:	9e 81       	ldd	r25, Y+6	; 0x06
    58a0:	00 97       	sbiw	r24, 0x00	; 0
    58a2:	69 f7       	brne	.-38     	; 0x587e <main+0x1a14>
    58a4:	14 c0       	rjmp	.+40     	; 0x58ce <main+0x1a64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58a6:	6f 81       	ldd	r22, Y+7	; 0x07
    58a8:	78 85       	ldd	r23, Y+8	; 0x08
    58aa:	89 85       	ldd	r24, Y+9	; 0x09
    58ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    58ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58b2:	dc 01       	movw	r26, r24
    58b4:	cb 01       	movw	r24, r22
    58b6:	9e 83       	std	Y+6, r25	; 0x06
    58b8:	8d 83       	std	Y+5, r24	; 0x05
    58ba:	8d 81       	ldd	r24, Y+5	; 0x05
    58bc:	9e 81       	ldd	r25, Y+6	; 0x06
    58be:	9a 83       	std	Y+2, r25	; 0x02
    58c0:	89 83       	std	Y+1, r24	; 0x01
    58c2:	89 81       	ldd	r24, Y+1	; 0x01
    58c4:	9a 81       	ldd	r25, Y+2	; 0x02
    58c6:	01 97       	sbiw	r24, 0x01	; 1
    58c8:	f1 f7       	brne	.-4      	; 0x58c6 <main+0x1a5c>
    58ca:	9a 83       	std	Y+2, r25	; 0x02
    58cc:	89 83       	std	Y+1, r24	; 0x01

				/* SET PIR_u8Flag2 TO PREVENT ENTER THIS IF CONDITION AGAIN UNTILL SOMEONE IS DETECTED OR GO TO OTHER AREA SUCH AS TEMPERATURE AREA */
				PIR_u8Flag2 = 1;
    58ce:	81 e0       	ldi	r24, 0x01	; 1
    58d0:	80 93 c5 03 	sts	0x03C5, r24
    58d4:	20 c0       	rjmp	.+64     	; 0x5916 <main+0x1aac>
			}

			/* CHECK PIR SENSOR DETECT SOME ONE WHEN YOU ARE IN LIGHT SYSTEM AREA AND
			   IN THE PREVIOUS STATE PIR SENSOR WASN'T DETECT ANYONE ,ALSO READED LDR VALUE IS CHANGED.
			*/
			else if(DIO_u8GetPinValue(PORTA, PIN2) == 1 && PIR_u8Flag2 == 1){
    58d6:	80 e0       	ldi	r24, 0x00	; 0
    58d8:	62 e0       	ldi	r22, 0x02	; 2
    58da:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8GetPinValue>
    58de:	81 30       	cpi	r24, 0x01	; 1
    58e0:	d1 f4       	brne	.+52     	; 0x5916 <main+0x1aac>
    58e2:	80 91 c5 03 	lds	r24, 0x03C5
    58e6:	81 30       	cpi	r24, 0x01	; 1
    58e8:	b1 f4       	brne	.+44     	; 0x5916 <main+0x1aac>

				/* CLEAR PIR_u8Flag1 TO ALLOW WRITEING THE SPECIFIED STRING WHEN GO TO THEIR IF CONDITION FOR THE FIRST TIME */
				PIR_u8Flag1 = 0;
    58ea:	10 92 c6 03 	sts	0x03C6, r1

				/* ZEROS THE FLAGS OF LDR SENSOR IN ADC CALL BACK FUNCTION */
				LDR_u16DigitalVoltage 	 = 0;
    58ee:	10 92 b8 03 	sts	0x03B8, r1
    58f2:	10 92 b7 03 	sts	0x03B7, r1
				LDR_u16OldDigitalVoltage = 0;
    58f6:	10 92 ba 03 	sts	0x03BA, r1
    58fa:	10 92 b9 03 	sts	0x03B9, r1
				LDR_u16AnalogVoltagemv 	 = 0;
    58fe:	10 92 bc 03 	sts	0x03BC, r1
    5902:	10 92 bb 03 	sts	0x03BB, r1
				LDR_u8Flag1 			 = 0;
    5906:	10 92 bd 03 	sts	0x03BD, r1
				LDR_u8Flag2 			 = 0;
    590a:	10 92 be 03 	sts	0x03BE, r1
				LDR_u8Flag3 			 = 0;
    590e:	10 92 bf 03 	sts	0x03BF, r1
				LDR_u8Flag4 			 = 0;
    5912:	10 92 c0 03 	sts	0x03C0, r1
			}

			/* CHECK IF THE SYSTEM ENTER THIS AREA FOR THE FIRST TIME BEFORE RISE END_u8Flag FLAG */
			if(END_u8Flag == 0){
    5916:	80 91 c1 03 	lds	r24, 0x03C1
    591a:	88 23       	and	r24, r24
    591c:	19 f4       	brne	.+6      	; 0x5924 <main+0x1aba>

				/* GO TO AREA 10 TO CLEAR FLAGS THEN GO TO RTC AREA SAFELY */
				Global_u8Control = 10;
    591e:	8a e0       	ldi	r24, 0x0A	; 10
    5920:	80 93 c2 03 	sts	0x03C2, r24
			}

			/* CHECK IF THE SYSTEM ALREADY RISE END_u8Flag AND PIN2 ON PORTD IS LOW (FALLING EDGE OF THE EXTERNAL INTERRUPT 1) */
			if((END_u8Flag == 1) && (DIO_u8GetPinValue(PORTD, PIN3) == 0)){
    5924:	80 91 c1 03 	lds	r24, 0x03C1
    5928:	81 30       	cpi	r24, 0x01	; 1
    592a:	59 f4       	brne	.+22     	; 0x5942 <main+0x1ad8>
    592c:	83 e0       	ldi	r24, 0x03	; 3
    592e:	63 e0       	ldi	r22, 0x03	; 3
    5930:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8GetPinValue>
    5934:	88 23       	and	r24, r24
    5936:	29 f4       	brne	.+10     	; 0x5942 <main+0x1ad8>

				/* BE HERE IN THE LIGHT SYSTEM AREA */
				Global_u8Control = 7;
    5938:	87 e0       	ldi	r24, 0x07	; 7
    593a:	80 93 c2 03 	sts	0x03C2, r24
    593e:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <main+0x392>
			}

			/* CHECK IF THE SYSTEM ALREADY RISE END_u8Flag AND PIN2 ON PORTD IS HIGH (RISSING EDGE OF THE EXTERNAL INTERRUPT 1) */
			else if((END_u8Flag == 1) && (DIO_u8GetPinValue(PORTD, PIN2) == 1)){
    5942:	80 91 c1 03 	lds	r24, 0x03C1
    5946:	81 30       	cpi	r24, 0x01	; 1
    5948:	11 f0       	breq	.+4      	; 0x594e <main+0x1ae4>
    594a:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <main+0x392>
    594e:	83 e0       	ldi	r24, 0x03	; 3
    5950:	62 e0       	ldi	r22, 0x02	; 2
    5952:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8GetPinValue>
    5956:	81 30       	cpi	r24, 0x01	; 1
    5958:	11 f0       	breq	.+4      	; 0x595e <main+0x1af4>
    595a:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <main+0x392>

				/* GO TO AREA 10 TO CLEAR FLAGS THEN GO TO RTC AREA SAFELY */
				Global_u8Control = 10;
    595e:	8a e0       	ldi	r24, 0x0A	; 10
    5960:	80 93 c2 03 	sts	0x03C2, r24
    5964:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <main+0x392>
			}
		}

		/* THIS AREA TO ZEROS FLAGS OF LIGHT SYSTEM BEFORE ENTER LIGHT SYSTEM AREA */
		else if(Global_u8Control == 8){
    5968:	80 91 c2 03 	lds	r24, 0x03C2
    596c:	88 30       	cpi	r24, 0x08	; 8
    596e:	e9 f4       	brne	.+58     	; 0x59aa <main+0x1b40>

			/* ZEROS THE FLAGS OF LIGHT SYSTEM */
			PIR_u8Flag1				 = 0;
    5970:	10 92 c6 03 	sts	0x03C6, r1
			PIR_u8Flag2 			 = 0;
    5974:	10 92 c5 03 	sts	0x03C5, r1
			LDR_u16DigitalVoltage  	 = 0;
    5978:	10 92 b8 03 	sts	0x03B8, r1
    597c:	10 92 b7 03 	sts	0x03B7, r1
			LDR_u16OldDigitalVoltage = 0;
    5980:	10 92 ba 03 	sts	0x03BA, r1
    5984:	10 92 b9 03 	sts	0x03B9, r1
			LDR_u16AnalogVoltagemv 	 = 0;
    5988:	10 92 bc 03 	sts	0x03BC, r1
    598c:	10 92 bb 03 	sts	0x03BB, r1
			LDR_u8Flag1 			 = 0;
    5990:	10 92 bd 03 	sts	0x03BD, r1
			LDR_u8Flag2 			 = 0;
    5994:	10 92 be 03 	sts	0x03BE, r1
			LDR_u8Flag3 			 = 0;
    5998:	10 92 bf 03 	sts	0x03BF, r1
			LDR_u8Flag4 			 = 0;
    599c:	10 92 c0 03 	sts	0x03C0, r1

			/* GO TO THE LIGHT SYSTEM SAFELY */
			Global_u8Control = 7;
    59a0:	87 e0       	ldi	r24, 0x07	; 7
    59a2:	80 93 c2 03 	sts	0x03C2, r24
    59a6:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <main+0x392>
		}

		/* RTC AREA */
		else if(Global_u8Control == 9){
    59aa:	80 91 c2 03 	lds	r24, 0x03C2
    59ae:	89 30       	cpi	r24, 0x09	; 9
    59b0:	09 f0       	breq	.+2      	; 0x59b4 <main+0x1b4a>
    59b2:	77 c0       	rjmp	.+238    	; 0x5aa2 <main+0x1c38>

			/* CHECK IF YOU ENTER THIS AREA TO THE FIRST TIME OR NOT */
			if(RTC_u8Flag == 0){
    59b4:	80 91 c3 03 	lds	r24, 0x03C3
    59b8:	88 23       	and	r24, r24
    59ba:	41 f4       	brne	.+16     	; 0x59cc <main+0x1b62>

				/* CLEAR THE DISPLAY */
				LCD_voidClearDisplay();
    59bc:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_voidClearDisplay>

				/* RAISE RTC_u8Flag TO PREVENT REPEATATION */
				RTC_u8Flag = 1;
    59c0:	81 e0       	ldi	r24, 0x01	; 1
    59c2:	80 93 c3 03 	sts	0x03C3, r24

				/* RAISE END_u8Flag TO IDENTICATE THAT THE SYSTEM SHOW ALL MODULES ON THE LCD FOR THE FIRST TIME */
				END_u8Flag = 1;
    59c6:	81 e0       	ldi	r24, 0x01	; 1
    59c8:	80 93 c1 03 	sts	0x03C1, r24
			}

			/* GO TO THE SPECIFIED LOCATIONS AND WRITE THE CURRENT DATE AND TIME */
			LCD_voidGOTOXY(0, 0);
    59cc:	80 e0       	ldi	r24, 0x00	; 0
    59ce:	60 e0       	ldi	r22, 0x00	; 0
    59d0:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
			RTC_GetDateTime(&rtc);
    59d4:	ce 01       	movw	r24, r28
    59d6:	8d 52       	subi	r24, 0x2D	; 45
    59d8:	9f 4f       	sbci	r25, 0xFF	; 255
    59da:	0e 94 41 1a 	call	0x3482	; 0x3482 <RTC_GetDateTime>
			LCD_voidWriteString((u8*)"TIME : ");
    59de:	88 e9       	ldi	r24, 0x98	; 152
    59e0:	91 e0       	ldi	r25, 0x01	; 1
    59e2:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
			LCD_voidWriteNumber(rtc.RTC_u8Hour);
    59e6:	fe 01       	movw	r30, r28
    59e8:	ed 52       	subi	r30, 0x2D	; 45
    59ea:	ff 4f       	sbci	r31, 0xFF	; 255
    59ec:	82 81       	ldd	r24, Z+2	; 0x02
    59ee:	88 2f       	mov	r24, r24
    59f0:	90 e0       	ldi	r25, 0x00	; 0
    59f2:	a0 e0       	ldi	r26, 0x00	; 0
    59f4:	b0 e0       	ldi	r27, 0x00	; 0
    59f6:	bc 01       	movw	r22, r24
    59f8:	cd 01       	movw	r24, r26
    59fa:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
			LCD_voidWritecChar4(':');
    59fe:	8a e3       	ldi	r24, 0x3A	; 58
    5a00:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
			LCD_voidWriteNumber(rtc.RTC_u8Minute);
    5a04:	fe 01       	movw	r30, r28
    5a06:	ed 52       	subi	r30, 0x2D	; 45
    5a08:	ff 4f       	sbci	r31, 0xFF	; 255
    5a0a:	81 81       	ldd	r24, Z+1	; 0x01
    5a0c:	88 2f       	mov	r24, r24
    5a0e:	90 e0       	ldi	r25, 0x00	; 0
    5a10:	a0 e0       	ldi	r26, 0x00	; 0
    5a12:	b0 e0       	ldi	r27, 0x00	; 0
    5a14:	bc 01       	movw	r22, r24
    5a16:	cd 01       	movw	r24, r26
    5a18:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
			LCD_voidWritecChar4(':');
    5a1c:	8a e3       	ldi	r24, 0x3A	; 58
    5a1e:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
			LCD_voidWriteNumber(rtc.RTC_u8Second);
    5a22:	fe 01       	movw	r30, r28
    5a24:	ed 52       	subi	r30, 0x2D	; 45
    5a26:	ff 4f       	sbci	r31, 0xFF	; 255
    5a28:	80 81       	ld	r24, Z
    5a2a:	88 2f       	mov	r24, r24
    5a2c:	90 e0       	ldi	r25, 0x00	; 0
    5a2e:	a0 e0       	ldi	r26, 0x00	; 0
    5a30:	b0 e0       	ldi	r27, 0x00	; 0
    5a32:	bc 01       	movw	r22, r24
    5a34:	cd 01       	movw	r24, r26
    5a36:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
			LCD_voidGOTOXY(1, 0);
    5a3a:	81 e0       	ldi	r24, 0x01	; 1
    5a3c:	60 e0       	ldi	r22, 0x00	; 0
    5a3e:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
			LCD_voidWriteString((u8*)"DATE : ");
    5a42:	80 ea       	ldi	r24, 0xA0	; 160
    5a44:	91 e0       	ldi	r25, 0x01	; 1
    5a46:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
			LCD_voidWriteNumber(rtc.RTC_u8Year);
    5a4a:	fe 01       	movw	r30, r28
    5a4c:	ed 52       	subi	r30, 0x2D	; 45
    5a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a50:	86 81       	ldd	r24, Z+6	; 0x06
    5a52:	88 2f       	mov	r24, r24
    5a54:	90 e0       	ldi	r25, 0x00	; 0
    5a56:	a0 e0       	ldi	r26, 0x00	; 0
    5a58:	b0 e0       	ldi	r27, 0x00	; 0
    5a5a:	bc 01       	movw	r22, r24
    5a5c:	cd 01       	movw	r24, r26
    5a5e:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
			LCD_voidWritecChar4('/');
    5a62:	8f e2       	ldi	r24, 0x2F	; 47
    5a64:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
			LCD_voidWriteNumber(rtc.RTC_u8Month);
    5a68:	fe 01       	movw	r30, r28
    5a6a:	ed 52       	subi	r30, 0x2D	; 45
    5a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a6e:	85 81       	ldd	r24, Z+5	; 0x05
    5a70:	88 2f       	mov	r24, r24
    5a72:	90 e0       	ldi	r25, 0x00	; 0
    5a74:	a0 e0       	ldi	r26, 0x00	; 0
    5a76:	b0 e0       	ldi	r27, 0x00	; 0
    5a78:	bc 01       	movw	r22, r24
    5a7a:	cd 01       	movw	r24, r26
    5a7c:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
			LCD_voidWritecChar4('/');
    5a80:	8f e2       	ldi	r24, 0x2F	; 47
    5a82:	0e 94 3a 10 	call	0x2074	; 0x2074 <LCD_voidWritecChar4>
			LCD_voidWriteNumber(rtc.RTC_u8Date);
    5a86:	fe 01       	movw	r30, r28
    5a88:	ed 52       	subi	r30, 0x2D	; 45
    5a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a8c:	84 81       	ldd	r24, Z+4	; 0x04
    5a8e:	88 2f       	mov	r24, r24
    5a90:	90 e0       	ldi	r25, 0x00	; 0
    5a92:	a0 e0       	ldi	r26, 0x00	; 0
    5a94:	b0 e0       	ldi	r27, 0x00	; 0
    5a96:	bc 01       	movw	r22, r24
    5a98:	cd 01       	movw	r24, r26
    5a9a:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
    5a9e:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <main+0x392>
		}

		/* THIS AREA TO ZEROS FLAGS OF RTC BEFORE ENTER RTC AREA */
		else if(Global_u8Control == 10){
    5aa2:	80 91 c2 03 	lds	r24, 0x03C2
    5aa6:	8a 30       	cpi	r24, 0x0A	; 10
    5aa8:	11 f0       	breq	.+4      	; 0x5aae <main+0x1c44>
    5aaa:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <main+0x392>

			/* CLEAR THE FLAGS */
			RTC_u8Flag = 0;
    5aae:	10 92 c3 03 	sts	0x03C3, r1

			/* GO TO RTC AREA SAFELY */
			Global_u8Control = 9;
    5ab2:	89 e0       	ldi	r24, 0x09	; 9
    5ab4:	80 93 c2 03 	sts	0x03C2, r24
    5ab8:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <main+0x392>

00005abc <ADC_FUNC>:
		}
	}
}

/* CALL BACK FUNCTION OF ADC INTERRUPT */
void ADC_FUNC(void){
    5abc:	df 93       	push	r29
    5abe:	cf 93       	push	r28
    5ac0:	cd b7       	in	r28, 0x3d	; 61
    5ac2:	de b7       	in	r29, 0x3e	; 62

	/* CECK ON TEMPERATURE SENSOR AREA IN THE CALL BACK FUNCTION OF ADC */
	if(ADC_u8ChannelSelected == 0){
    5ac4:	80 91 c9 03 	lds	r24, 0x03C9
    5ac8:	88 23       	and	r24, r24
    5aca:	09 f0       	breq	.+2      	; 0x5ace <ADC_FUNC+0x12>
    5acc:	90 c1       	rjmp	.+800    	; 0x5dee <ADC_FUNC+0x332>

		/* ASSIGN CONVERTED DIGITAL VALUE TO THE THE CORRESPONDING VARIABLE */
		TEMPERATURE_u16DigitalVoltage = ADC_u16ReadASynValue();
    5ace:	0e 94 b2 09 	call	0x1364	; 0x1364 <ADC_u16ReadASynValue>
    5ad2:	90 93 ab 03 	sts	0x03AB, r25
    5ad6:	80 93 aa 03 	sts	0x03AA, r24

		/* CHECK IF OLD READED DIGITAL VALUE EQUAL NEW READED DIGITAL VALUE TO PREVENT REPEATATION */
		if(TEMPERATURE_u16OldDigitalVoltage != TEMPERATURE_u16DigitalVoltage){
    5ada:	20 91 ac 03 	lds	r18, 0x03AC
    5ade:	30 91 ad 03 	lds	r19, 0x03AD
    5ae2:	80 91 aa 03 	lds	r24, 0x03AA
    5ae6:	90 91 ab 03 	lds	r25, 0x03AB
    5aea:	28 17       	cp	r18, r24
    5aec:	39 07       	cpc	r19, r25
    5aee:	09 f4       	brne	.+2      	; 0x5af2 <ADC_FUNC+0x36>
    5af0:	22 c4       	rjmp	.+2116   	; 0x6336 <ADC_FUNC+0x87a>

			/* CALC ANALOG READED VOLTAGE IN MILISECOND AND ASSIGN IT TO THE CORRESPONDING GLOBAL VARIABLE */
			TEMPERATURE_u16AnalogVoltagemv = (u16)(((u32)TEMPERATURE_u16DigitalVoltage*5000UL)/1024UL);
    5af2:	80 91 aa 03 	lds	r24, 0x03AA
    5af6:	90 91 ab 03 	lds	r25, 0x03AB
    5afa:	cc 01       	movw	r24, r24
    5afc:	a0 e0       	ldi	r26, 0x00	; 0
    5afe:	b0 e0       	ldi	r27, 0x00	; 0
    5b00:	28 e8       	ldi	r18, 0x88	; 136
    5b02:	33 e1       	ldi	r19, 0x13	; 19
    5b04:	40 e0       	ldi	r20, 0x00	; 0
    5b06:	50 e0       	ldi	r21, 0x00	; 0
    5b08:	bc 01       	movw	r22, r24
    5b0a:	cd 01       	movw	r24, r26
    5b0c:	0e 94 1e 32 	call	0x643c	; 0x643c <__mulsi3>
    5b10:	dc 01       	movw	r26, r24
    5b12:	cb 01       	movw	r24, r22
    5b14:	07 2e       	mov	r0, r23
    5b16:	7a e0       	ldi	r23, 0x0A	; 10
    5b18:	b6 95       	lsr	r27
    5b1a:	a7 95       	ror	r26
    5b1c:	97 95       	ror	r25
    5b1e:	87 95       	ror	r24
    5b20:	7a 95       	dec	r23
    5b22:	d1 f7       	brne	.-12     	; 0x5b18 <ADC_FUNC+0x5c>
    5b24:	70 2d       	mov	r23, r0
    5b26:	90 93 af 03 	sts	0x03AF, r25
    5b2a:	80 93 ae 03 	sts	0x03AE, r24

			/* CALC THE VALUE OF TEMPERATURE IN DEGREE CELISIUS AND ASSIGN IT TO THE CORRESPONDING GLOBAL VATIABLE */
			TEMPERATURE_u16Temp = (TEMPERATURE_u16AnalogVoltagemv / 10);
    5b2e:	80 91 ae 03 	lds	r24, 0x03AE
    5b32:	90 91 af 03 	lds	r25, 0x03AF
    5b36:	2a e0       	ldi	r18, 0x0A	; 10
    5b38:	30 e0       	ldi	r19, 0x00	; 0
    5b3a:	b9 01       	movw	r22, r18
    5b3c:	0e 94 49 32 	call	0x6492	; 0x6492 <__udivmodhi4>
    5b40:	cb 01       	movw	r24, r22
    5b42:	90 93 b1 03 	sts	0x03B1, r25
    5b46:	80 93 b0 03 	sts	0x03B0, r24

			/* GO TO LINE 0 AT POSITION 13 AND WRITE THE TEMPERATURE VALUE IN CELISIUS */
			LCD_voidGOTOXY(0, 13);
    5b4a:	80 e0       	ldi	r24, 0x00	; 0
    5b4c:	6d e0       	ldi	r22, 0x0D	; 13
    5b4e:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
			LCD_voidWriteString((u8*)"   ");
    5b52:	88 ea       	ldi	r24, 0xA8	; 168
    5b54:	91 e0       	ldi	r25, 0x01	; 1
    5b56:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
			LCD_voidGOTOXY(0, 13);
    5b5a:	80 e0       	ldi	r24, 0x00	; 0
    5b5c:	6d e0       	ldi	r22, 0x0D	; 13
    5b5e:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
			LCD_voidWriteNumber(TEMPERATURE_u16Temp);
    5b62:	80 91 b0 03 	lds	r24, 0x03B0
    5b66:	90 91 b1 03 	lds	r25, 0x03B1
    5b6a:	cc 01       	movw	r24, r24
    5b6c:	a0 e0       	ldi	r26, 0x00	; 0
    5b6e:	b0 e0       	ldi	r27, 0x00	; 0
    5b70:	bc 01       	movw	r22, r24
    5b72:	cd 01       	movw	r24, r26
    5b74:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>

			/* CHECK IF THE READED TEMPERATURE VALUE IS LESS THAN OR EQUAL 20 */
			if(TEMPERATURE_u16Temp <= 20){
    5b78:	80 91 b0 03 	lds	r24, 0x03B0
    5b7c:	90 91 b1 03 	lds	r25, 0x03B1
    5b80:	85 31       	cpi	r24, 0x15	; 21
    5b82:	91 05       	cpc	r25, r1
    5b84:	80 f5       	brcc	.+96     	; 0x5be6 <ADC_FUNC+0x12a>
				/* CLEAR DIRECTION OF THE FAN ,THUS FAN IS STILL STOPPED */
				DIO_voidSetPinValue(PORTD, PIN4, LOW);
    5b86:	83 e0       	ldi	r24, 0x03	; 3
    5b88:	64 e0       	ldi	r22, 0x04	; 4
    5b8a:	40 e0       	ldi	r20, 0x00	; 0
    5b8c:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
				DIO_voidSetPinValue(PORTA, PIN7, LOW);
    5b90:	80 e0       	ldi	r24, 0x00	; 0
    5b92:	67 e0       	ldi	r22, 0x07	; 7
    5b94:	40 e0       	ldi	r20, 0x00	; 0
    5b96:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

				/* CHECK ON THE FIRST TIME ENTER THE SUPER IF => (Local_u16Temp <= 20) */
				if(TEMPERATURE_u8Flag1 == 0){
    5b9a:	80 91 b2 03 	lds	r24, 0x03B2
    5b9e:	88 23       	and	r24, r24
    5ba0:	09 f0       	breq	.+2      	; 0x5ba4 <ADC_FUNC+0xe8>
    5ba2:	1c c1       	rjmp	.+568    	; 0x5ddc <ADC_FUNC+0x320>

					/* TURN-OFF EMERGENCY LED */
					DIO_voidSetPinValue(PORTD, PIN7, LOW);
    5ba4:	83 e0       	ldi	r24, 0x03	; 3
    5ba6:	67 e0       	ldi	r22, 0x07	; 7
    5ba8:	40 e0       	ldi	r20, 0x00	; 0
    5baa:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

					/* CLEAR LINE TWO OF THE LCD AND WRITE THE STRING "FAN IS OFF" */
					LCD_voidGOTOXY(1, 0);
    5bae:	81 e0       	ldi	r24, 0x01	; 1
    5bb0:	60 e0       	ldi	r22, 0x00	; 0
    5bb2:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
					LCD_voidWriteString((u8*)"                ");
    5bb6:	8c ea       	ldi	r24, 0xAC	; 172
    5bb8:	91 e0       	ldi	r25, 0x01	; 1
    5bba:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
					LCD_voidGOTOXY(1, 3);
    5bbe:	81 e0       	ldi	r24, 0x01	; 1
    5bc0:	63 e0       	ldi	r22, 0x03	; 3
    5bc2:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
					LCD_voidWriteString((u8*)"FAN IS OFF");
    5bc6:	8d eb       	ldi	r24, 0xBD	; 189
    5bc8:	91 e0       	ldi	r25, 0x01	; 1
    5bca:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>

					/* SET TEMPERATURE_Flag1 TO PREVENT ENTER THIS IF CONDITION AGAIN UNTILL GO TO OTHER SUPER IF SUCH AS
					   (Local_u16Temp > 20 && Local_u16Temp <= 25) FIRSTLY.
				    */
					TEMPERATURE_u8Flag1 = 1;
    5bce:	81 e0       	ldi	r24, 0x01	; 1
    5bd0:	80 93 b2 03 	sts	0x03B2, r24

					/* CLEAR THE OTHER FLAGS TO ALLOW WRITEING THE SPECIFIED STRING WHEN GO TO THEIR IF CONDITION FOR THE FIRST TIME */
					TEMPERATURE_u8Flag2 = 0;
    5bd4:	10 92 b3 03 	sts	0x03B3, r1
					TEMPERATURE_u8Flag3 = 0;
    5bd8:	10 92 b4 03 	sts	0x03B4, r1
					TEMPERATURE_u8Flag4 = 0;
    5bdc:	10 92 b5 03 	sts	0x03B5, r1
					TEMPERATURE_u8Flag5 = 0;
    5be0:	10 92 b6 03 	sts	0x03B6, r1
    5be4:	fb c0       	rjmp	.+502    	; 0x5ddc <ADC_FUNC+0x320>
				}
			}

			/* CHECK IF THE READED TEMPERATURE VALUE IS BETWEEN 21 AND 25 INCLUSIVE */
			else if(TEMPERATURE_u16Temp > 20 && TEMPERATURE_u16Temp <= 25){
    5be6:	80 91 b0 03 	lds	r24, 0x03B0
    5bea:	90 91 b1 03 	lds	r25, 0x03B1
    5bee:	85 31       	cpi	r24, 0x15	; 21
    5bf0:	91 05       	cpc	r25, r1
    5bf2:	d0 f1       	brcs	.+116    	; 0x5c68 <ADC_FUNC+0x1ac>
    5bf4:	80 91 b0 03 	lds	r24, 0x03B0
    5bf8:	90 91 b1 03 	lds	r25, 0x03B1
    5bfc:	8a 31       	cpi	r24, 0x1A	; 26
    5bfe:	91 05       	cpc	r25, r1
    5c00:	98 f5       	brcc	.+102    	; 0x5c68 <ADC_FUNC+0x1ac>

				/* SET DIRECTION OF THE FAN WITH CLOCK-WISE ,THUS FAN IS TURNED ON */
				DIO_voidSetPinValue(PORTD, PIN4, LOW);
    5c02:	83 e0       	ldi	r24, 0x03	; 3
    5c04:	64 e0       	ldi	r22, 0x04	; 4
    5c06:	40 e0       	ldi	r20, 0x00	; 0
    5c08:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
				DIO_voidSetPinValue(PORTA, PIN7, HIGH);
    5c0c:	80 e0       	ldi	r24, 0x00	; 0
    5c0e:	67 e0       	ldi	r22, 0x07	; 7
    5c10:	41 e0       	ldi	r20, 0x01	; 1
    5c12:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

				/* SET THE SPEED OF DC MOTOR (FAN) DUTY CYCLE = 0.25 */
				TIMER0_voidSetOCR0(64);
    5c16:	80 e4       	ldi	r24, 0x40	; 64
    5c18:	0e 94 bc 1b 	call	0x3778	; 0x3778 <TIMER0_voidSetOCR0>

				/* CHECK ON THE FIRST TIME ENTER THE SUPER IF => (ADC_u16Temp > 20 && ADC_u16Temp <= 25) */
				if(TEMPERATURE_u8Flag2 == 0){
    5c1c:	80 91 b3 03 	lds	r24, 0x03B3
    5c20:	88 23       	and	r24, r24
    5c22:	09 f0       	breq	.+2      	; 0x5c26 <ADC_FUNC+0x16a>
    5c24:	db c0       	rjmp	.+438    	; 0x5ddc <ADC_FUNC+0x320>

					/* TURN-OFF EMERGENCY LED */
					DIO_voidSetPinValue(PORTD, PIN7, LOW);
    5c26:	83 e0       	ldi	r24, 0x03	; 3
    5c28:	67 e0       	ldi	r22, 0x07	; 7
    5c2a:	40 e0       	ldi	r20, 0x00	; 0
    5c2c:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

					/* CLEAR LINE TWO OF THE LCD AND WRITE THE STRING "FAN SPEED IS 1" */
					LCD_voidGOTOXY(1, 0);
    5c30:	81 e0       	ldi	r24, 0x01	; 1
    5c32:	60 e0       	ldi	r22, 0x00	; 0
    5c34:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
					LCD_voidWriteString((u8*)"                ");
    5c38:	8c ea       	ldi	r24, 0xAC	; 172
    5c3a:	91 e0       	ldi	r25, 0x01	; 1
    5c3c:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
					LCD_voidGOTOXY(1, 1);
    5c40:	81 e0       	ldi	r24, 0x01	; 1
    5c42:	61 e0       	ldi	r22, 0x01	; 1
    5c44:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
					LCD_voidWriteString((u8*)"FAN SPEED IS 1");
    5c48:	88 ec       	ldi	r24, 0xC8	; 200
    5c4a:	91 e0       	ldi	r25, 0x01	; 1
    5c4c:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>

					/* CLEAR THE OTHER FLAGS TO ALLOW WRITEING THE SPECIFIED STRING WHEN GO TO THEIR IF CONDITION FOR THE FIRST TIME */
					TEMPERATURE_u8Flag1 = 0;
    5c50:	10 92 b2 03 	sts	0x03B2, r1
					TEMPERATURE_u8Flag2 = 1;
    5c54:	81 e0       	ldi	r24, 0x01	; 1
    5c56:	80 93 b3 03 	sts	0x03B3, r24
					TEMPERATURE_u8Flag3 = 0;
    5c5a:	10 92 b4 03 	sts	0x03B4, r1
					TEMPERATURE_u8Flag4 = 0;
    5c5e:	10 92 b5 03 	sts	0x03B5, r1
					TEMPERATURE_u8Flag5 = 0;
    5c62:	10 92 b6 03 	sts	0x03B6, r1
    5c66:	ba c0       	rjmp	.+372    	; 0x5ddc <ADC_FUNC+0x320>
				}
			}

			/* CHECK IF THE READED TEMPERATURE VALUE IS BETWEEN 26 AND 35 INCLUSIVE */
			else if(TEMPERATURE_u16Temp > 25 && TEMPERATURE_u16Temp <= 35){
    5c68:	80 91 b0 03 	lds	r24, 0x03B0
    5c6c:	90 91 b1 03 	lds	r25, 0x03B1
    5c70:	8a 31       	cpi	r24, 0x1A	; 26
    5c72:	91 05       	cpc	r25, r1
    5c74:	d0 f1       	brcs	.+116    	; 0x5cea <ADC_FUNC+0x22e>
    5c76:	80 91 b0 03 	lds	r24, 0x03B0
    5c7a:	90 91 b1 03 	lds	r25, 0x03B1
    5c7e:	84 32       	cpi	r24, 0x24	; 36
    5c80:	91 05       	cpc	r25, r1
    5c82:	98 f5       	brcc	.+102    	; 0x5cea <ADC_FUNC+0x22e>

				/* SET DIRECTION OF THE FAN WITH CLOCK-WISE ,THUS FAN IS TURNED ON */
				DIO_voidSetPinValue(PORTD, PIN4, LOW);
    5c84:	83 e0       	ldi	r24, 0x03	; 3
    5c86:	64 e0       	ldi	r22, 0x04	; 4
    5c88:	40 e0       	ldi	r20, 0x00	; 0
    5c8a:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
				DIO_voidSetPinValue(PORTA, PIN7, HIGH);
    5c8e:	80 e0       	ldi	r24, 0x00	; 0
    5c90:	67 e0       	ldi	r22, 0x07	; 7
    5c92:	41 e0       	ldi	r20, 0x01	; 1
    5c94:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

				/* SET THE SPEED OF DC MOTOR (FAN) DUTY CYCLE = 0.5 */
				TIMER0_voidSetOCR0(128);
    5c98:	80 e8       	ldi	r24, 0x80	; 128
    5c9a:	0e 94 bc 1b 	call	0x3778	; 0x3778 <TIMER0_voidSetOCR0>

				/* CHECK ON THE FIRST TIME ENTER THE SUPER IF => (ADC_u16Temp > 25 && ADC_u16Temp <= 35) */
				if(TEMPERATURE_u8Flag3 == 0){
    5c9e:	80 91 b4 03 	lds	r24, 0x03B4
    5ca2:	88 23       	and	r24, r24
    5ca4:	09 f0       	breq	.+2      	; 0x5ca8 <ADC_FUNC+0x1ec>
    5ca6:	9a c0       	rjmp	.+308    	; 0x5ddc <ADC_FUNC+0x320>

					/* TURN-OFF EMERGENCY LED */
					DIO_voidSetPinValue(PORTD, PIN7, LOW);
    5ca8:	83 e0       	ldi	r24, 0x03	; 3
    5caa:	67 e0       	ldi	r22, 0x07	; 7
    5cac:	40 e0       	ldi	r20, 0x00	; 0
    5cae:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

					/* CLEAR LINE TWO OF THE LCD AND WRITE THE STRING "FAN SPEED IS 2" */
					LCD_voidGOTOXY(1, 0);
    5cb2:	81 e0       	ldi	r24, 0x01	; 1
    5cb4:	60 e0       	ldi	r22, 0x00	; 0
    5cb6:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
					LCD_voidWriteString((u8*)"                ");
    5cba:	8c ea       	ldi	r24, 0xAC	; 172
    5cbc:	91 e0       	ldi	r25, 0x01	; 1
    5cbe:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
					LCD_voidGOTOXY(1, 1);
    5cc2:	81 e0       	ldi	r24, 0x01	; 1
    5cc4:	61 e0       	ldi	r22, 0x01	; 1
    5cc6:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
					LCD_voidWriteString((u8*)"FAN SPEED IS 2");
    5cca:	87 ed       	ldi	r24, 0xD7	; 215
    5ccc:	91 e0       	ldi	r25, 0x01	; 1
    5cce:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>

					/* CLEAR THE OTHER FLAGS TO ALLOW WRITEING THE SPECIFIED STRING WHEN GO TO THEIR IF CONDITION FOR THE FIRST TIME */
					TEMPERATURE_u8Flag1 = 0;
    5cd2:	10 92 b2 03 	sts	0x03B2, r1
					TEMPERATURE_u8Flag2 = 0;
    5cd6:	10 92 b3 03 	sts	0x03B3, r1
					TEMPERATURE_u8Flag3 = 1;
    5cda:	81 e0       	ldi	r24, 0x01	; 1
    5cdc:	80 93 b4 03 	sts	0x03B4, r24
					TEMPERATURE_u8Flag4 = 0;
    5ce0:	10 92 b5 03 	sts	0x03B5, r1
					TEMPERATURE_u8Flag5 = 0;
    5ce4:	10 92 b6 03 	sts	0x03B6, r1
    5ce8:	79 c0       	rjmp	.+242    	; 0x5ddc <ADC_FUNC+0x320>
				}

			}

			/* CHECK IF THE READED TEMPERATURE VALUE IS BETWEEN 36 AND 45 INCLUSIVE */
			else if(TEMPERATURE_u16Temp > 35 && TEMPERATURE_u16Temp <= 45){
    5cea:	80 91 b0 03 	lds	r24, 0x03B0
    5cee:	90 91 b1 03 	lds	r25, 0x03B1
    5cf2:	84 32       	cpi	r24, 0x24	; 36
    5cf4:	91 05       	cpc	r25, r1
    5cf6:	d0 f1       	brcs	.+116    	; 0x5d6c <ADC_FUNC+0x2b0>
    5cf8:	80 91 b0 03 	lds	r24, 0x03B0
    5cfc:	90 91 b1 03 	lds	r25, 0x03B1
    5d00:	8e 32       	cpi	r24, 0x2E	; 46
    5d02:	91 05       	cpc	r25, r1
    5d04:	98 f5       	brcc	.+102    	; 0x5d6c <ADC_FUNC+0x2b0>

				/* SET DIRECTION OF THE FAN WITH CLOCK-WISE ,THUS FAN IS TURNED ON */
				DIO_voidSetPinValue(PORTD, PIN4, LOW);
    5d06:	83 e0       	ldi	r24, 0x03	; 3
    5d08:	64 e0       	ldi	r22, 0x04	; 4
    5d0a:	40 e0       	ldi	r20, 0x00	; 0
    5d0c:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
				DIO_voidSetPinValue(PORTA, PIN7, HIGH);
    5d10:	80 e0       	ldi	r24, 0x00	; 0
    5d12:	67 e0       	ldi	r22, 0x07	; 7
    5d14:	41 e0       	ldi	r20, 0x01	; 1
    5d16:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

				/* SET THE SPEED OF DC MOTOR (FAN) DUTY CYCLE = 0.75 */
				TIMER0_voidSetOCR0(192);
    5d1a:	80 ec       	ldi	r24, 0xC0	; 192
    5d1c:	0e 94 bc 1b 	call	0x3778	; 0x3778 <TIMER0_voidSetOCR0>

				/* CHECK ON THE FIRST TIME ENTER THE SUPER IF => (ADC_u16Temp > 35 && ADC_u16Temp <= 45) */
				if(TEMPERATURE_u8Flag4 == 0){
    5d20:	80 91 b5 03 	lds	r24, 0x03B5
    5d24:	88 23       	and	r24, r24
    5d26:	09 f0       	breq	.+2      	; 0x5d2a <ADC_FUNC+0x26e>
    5d28:	59 c0       	rjmp	.+178    	; 0x5ddc <ADC_FUNC+0x320>

					/* TURN-OFF EMERGENCY LED */
					DIO_voidSetPinValue(PORTD, PIN7, LOW);
    5d2a:	83 e0       	ldi	r24, 0x03	; 3
    5d2c:	67 e0       	ldi	r22, 0x07	; 7
    5d2e:	40 e0       	ldi	r20, 0x00	; 0
    5d30:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

					/* CLEAR LINE TWO OF THE LCD AND WRITE THE STRING "FAN SPEED IS 3" */
					LCD_voidGOTOXY(1, 0);
    5d34:	81 e0       	ldi	r24, 0x01	; 1
    5d36:	60 e0       	ldi	r22, 0x00	; 0
    5d38:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
					LCD_voidWriteString((u8*)"                ");
    5d3c:	8c ea       	ldi	r24, 0xAC	; 172
    5d3e:	91 e0       	ldi	r25, 0x01	; 1
    5d40:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
					LCD_voidGOTOXY(1, 1);
    5d44:	81 e0       	ldi	r24, 0x01	; 1
    5d46:	61 e0       	ldi	r22, 0x01	; 1
    5d48:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
					LCD_voidWriteString((u8*)"FAN SPEED IS 3");
    5d4c:	86 ee       	ldi	r24, 0xE6	; 230
    5d4e:	91 e0       	ldi	r25, 0x01	; 1
    5d50:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>

					/* CLEAR THE OTHER FLAGS TO ALLOW WRITEING THE SPECIFIED STRING WHEN GO TO THEIR IF CONDITION FOR THE FIRST TIME */
					TEMPERATURE_u8Flag1 = 0;
    5d54:	10 92 b2 03 	sts	0x03B2, r1
					TEMPERATURE_u8Flag2 = 0;
    5d58:	10 92 b3 03 	sts	0x03B3, r1
					TEMPERATURE_u8Flag3 = 0;
    5d5c:	10 92 b4 03 	sts	0x03B4, r1
					TEMPERATURE_u8Flag4 = 1;
    5d60:	81 e0       	ldi	r24, 0x01	; 1
    5d62:	80 93 b5 03 	sts	0x03B5, r24
					TEMPERATURE_u8Flag5 = 0;
    5d66:	10 92 b6 03 	sts	0x03B6, r1
    5d6a:	38 c0       	rjmp	.+112    	; 0x5ddc <ADC_FUNC+0x320>
				}
			}

			/* CHECK IF THE READED TEMPERATURE VALUE IS BEGGER THAN 45 */
			else if(TEMPERATURE_u16Temp > 45){
    5d6c:	80 91 b0 03 	lds	r24, 0x03B0
    5d70:	90 91 b1 03 	lds	r25, 0x03B1
    5d74:	8e 32       	cpi	r24, 0x2E	; 46
    5d76:	91 05       	cpc	r25, r1
    5d78:	88 f1       	brcs	.+98     	; 0x5ddc <ADC_FUNC+0x320>

				/* SET DIRECTION OF THE FAN WITH CLOCK-WISE ,THUS FAN IS TURNED ON */
				DIO_voidSetPinValue(PORTD, PIN4, LOW);
    5d7a:	83 e0       	ldi	r24, 0x03	; 3
    5d7c:	64 e0       	ldi	r22, 0x04	; 4
    5d7e:	40 e0       	ldi	r20, 0x00	; 0
    5d80:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
				DIO_voidSetPinValue(PORTA, PIN7, HIGH);
    5d84:	80 e0       	ldi	r24, 0x00	; 0
    5d86:	67 e0       	ldi	r22, 0x07	; 7
    5d88:	41 e0       	ldi	r20, 0x01	; 1
    5d8a:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

				/* SET THE SPEED OF DC MOTOR (FAN) DUTY CYCLE = 1 */
				TIMER0_voidSetOCR0(255);
    5d8e:	8f ef       	ldi	r24, 0xFF	; 255
    5d90:	0e 94 bc 1b 	call	0x3778	; 0x3778 <TIMER0_voidSetOCR0>

				/* CHECK ON THE FIRST TIME ENTER THE SUPER IF => (ADC_u16Temp > 45) */
				if(TEMPERATURE_u8Flag5 == 0){
    5d94:	80 91 b6 03 	lds	r24, 0x03B6
    5d98:	88 23       	and	r24, r24
    5d9a:	01 f5       	brne	.+64     	; 0x5ddc <ADC_FUNC+0x320>

					/* TURN-ON EMERGENCY LED TO IDENTICATE THE PRESSENCE OF DANGEROUS DUE TO THE HIGH TEMPERATURE IN THE ATMOSPHERE */
					DIO_voidSetPinValue(PORTD, PIN7, HIGH);
    5d9c:	83 e0       	ldi	r24, 0x03	; 3
    5d9e:	67 e0       	ldi	r22, 0x07	; 7
    5da0:	41 e0       	ldi	r20, 0x01	; 1
    5da2:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

					/* CLEAR LINE TWO OF THE LCD AND WRITE THE STRING "EMERGENCY LED ON" */
					LCD_voidGOTOXY(1, 0);
    5da6:	81 e0       	ldi	r24, 0x01	; 1
    5da8:	60 e0       	ldi	r22, 0x00	; 0
    5daa:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
					LCD_voidWriteString((u8*)"                ");
    5dae:	8c ea       	ldi	r24, 0xAC	; 172
    5db0:	91 e0       	ldi	r25, 0x01	; 1
    5db2:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
					LCD_voidGOTOXY(1, 0);
    5db6:	81 e0       	ldi	r24, 0x01	; 1
    5db8:	60 e0       	ldi	r22, 0x00	; 0
    5dba:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
					LCD_voidWriteString((u8*)"EMERGENCY LED ON");
    5dbe:	85 ef       	ldi	r24, 0xF5	; 245
    5dc0:	91 e0       	ldi	r25, 0x01	; 1
    5dc2:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>

					/* CLEAR THE OTHER FLAGS TO ALLOW WRITEING THE SPECIFIED STRING WHEN GO TO THEIR IF CONDITION FOR THE FIRST TIME */
					TEMPERATURE_u8Flag1 = 0;
    5dc6:	10 92 b2 03 	sts	0x03B2, r1
					TEMPERATURE_u8Flag2 = 0;
    5dca:	10 92 b3 03 	sts	0x03B3, r1
					TEMPERATURE_u8Flag3 = 0;
    5dce:	10 92 b4 03 	sts	0x03B4, r1
					TEMPERATURE_u8Flag4 = 0;
    5dd2:	10 92 b5 03 	sts	0x03B5, r1
					TEMPERATURE_u8Flag5 = 1;
    5dd6:	81 e0       	ldi	r24, 0x01	; 1
    5dd8:	80 93 b6 03 	sts	0x03B6, r24
				}
			}
			// ASSIGN NEW READED DIGITAL VALUE TO THE OLD ONE GLOBAL VARIABLE
			TEMPERATURE_u16OldDigitalVoltage = TEMPERATURE_u16DigitalVoltage;
    5ddc:	80 91 aa 03 	lds	r24, 0x03AA
    5de0:	90 91 ab 03 	lds	r25, 0x03AB
    5de4:	90 93 ad 03 	sts	0x03AD, r25
    5de8:	80 93 ac 03 	sts	0x03AC, r24
    5dec:	a4 c2       	rjmp	.+1352   	; 0x6336 <ADC_FUNC+0x87a>
		}
	}

	/* CHECK ON LDR AREA IN CALL BACK FUNCTION OF ADC */
	else if(ADC_u8ChannelSelected == 3){
    5dee:	80 91 c9 03 	lds	r24, 0x03C9
    5df2:	83 30       	cpi	r24, 0x03	; 3
    5df4:	09 f0       	breq	.+2      	; 0x5df8 <ADC_FUNC+0x33c>
    5df6:	9f c2       	rjmp	.+1342   	; 0x6336 <ADC_FUNC+0x87a>

		/* ASSIGN CONVERTED DIGITAL VALUE TO THE THE CORRESPONDING VARIABLE */
		LDR_u16DigitalVoltage = ADC_u16ReadASynValue();
    5df8:	0e 94 b2 09 	call	0x1364	; 0x1364 <ADC_u16ReadASynValue>
    5dfc:	90 93 b8 03 	sts	0x03B8, r25
    5e00:	80 93 b7 03 	sts	0x03B7, r24

		/* CHECK IF OLD READED DIGITAL VALUE EQUAL NEW READED DIGITAL VALUE TO PREVENT REPEATATION */
		if(LDR_u16OldDigitalVoltage != LDR_u16DigitalVoltage){
    5e04:	20 91 b9 03 	lds	r18, 0x03B9
    5e08:	30 91 ba 03 	lds	r19, 0x03BA
    5e0c:	80 91 b7 03 	lds	r24, 0x03B7
    5e10:	90 91 b8 03 	lds	r25, 0x03B8
    5e14:	28 17       	cp	r18, r24
    5e16:	39 07       	cpc	r19, r25
    5e18:	09 f4       	brne	.+2      	; 0x5e1c <ADC_FUNC+0x360>
    5e1a:	8d c2       	rjmp	.+1306   	; 0x6336 <ADC_FUNC+0x87a>

			// CALC ANALOG READED VOLTAGE IN MILIVOLT AND ASSIGN IT TO THE CORRESPONDING GLOBAL VARIABLE
			LDR_u16AnalogVoltagemv = (u16)((((u32)LDR_u16DigitalVoltage*5000UL)/1024UL));
    5e1c:	80 91 b7 03 	lds	r24, 0x03B7
    5e20:	90 91 b8 03 	lds	r25, 0x03B8
    5e24:	cc 01       	movw	r24, r24
    5e26:	a0 e0       	ldi	r26, 0x00	; 0
    5e28:	b0 e0       	ldi	r27, 0x00	; 0
    5e2a:	28 e8       	ldi	r18, 0x88	; 136
    5e2c:	33 e1       	ldi	r19, 0x13	; 19
    5e2e:	40 e0       	ldi	r20, 0x00	; 0
    5e30:	50 e0       	ldi	r21, 0x00	; 0
    5e32:	bc 01       	movw	r22, r24
    5e34:	cd 01       	movw	r24, r26
    5e36:	0e 94 1e 32 	call	0x643c	; 0x643c <__mulsi3>
    5e3a:	dc 01       	movw	r26, r24
    5e3c:	cb 01       	movw	r24, r22
    5e3e:	07 2e       	mov	r0, r23
    5e40:	7a e0       	ldi	r23, 0x0A	; 10
    5e42:	b6 95       	lsr	r27
    5e44:	a7 95       	ror	r26
    5e46:	97 95       	ror	r25
    5e48:	87 95       	ror	r24
    5e4a:	7a 95       	dec	r23
    5e4c:	d1 f7       	brne	.-12     	; 0x5e42 <ADC_FUNC+0x386>
    5e4e:	70 2d       	mov	r23, r0
    5e50:	90 93 bc 03 	sts	0x03BC, r25
    5e54:	80 93 bb 03 	sts	0x03BB, r24

			/* CHECK IF READED DIGITAL VALUE IS LESS THAN OR EQUAL 93 OR NOT AND IF THIS CONDITION TAKE PLACE FOR THE FIRST TIME OR NOT */
			if(LDR_u16DigitalVoltage <= 93 && LDR_u8Flag1 == 0){
    5e58:	80 91 b7 03 	lds	r24, 0x03B7
    5e5c:	90 91 b8 03 	lds	r25, 0x03B8
    5e60:	8e 35       	cpi	r24, 0x5E	; 94
    5e62:	91 05       	cpc	r25, r1
    5e64:	08 f0       	brcs	.+2      	; 0x5e68 <ADC_FUNC+0x3ac>
    5e66:	4a c0       	rjmp	.+148    	; 0x5efc <ADC_FUNC+0x440>
    5e68:	80 91 bd 03 	lds	r24, 0x03BD
    5e6c:	88 23       	and	r24, r24
    5e6e:	09 f0       	breq	.+2      	; 0x5e72 <ADC_FUNC+0x3b6>
    5e70:	45 c0       	rjmp	.+138    	; 0x5efc <ADC_FUNC+0x440>

				/* TURN-ON SYSTEM LEDS */
				DIO_voidSetPinValue(PORTA, PIN4, HIGH);
    5e72:	80 e0       	ldi	r24, 0x00	; 0
    5e74:	64 e0       	ldi	r22, 0x04	; 4
    5e76:	41 e0       	ldi	r20, 0x01	; 1
    5e78:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
				DIO_voidSetPinValue(PORTA, PIN5, HIGH);
    5e7c:	80 e0       	ldi	r24, 0x00	; 0
    5e7e:	65 e0       	ldi	r22, 0x05	; 5
    5e80:	41 e0       	ldi	r20, 0x01	; 1
    5e82:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
				DIO_voidSetPinValue(PORTB, PIN2, HIGH);
    5e86:	81 e0       	ldi	r24, 0x01	; 1
    5e88:	62 e0       	ldi	r22, 0x02	; 2
    5e8a:	41 e0       	ldi	r20, 0x01	; 1
    5e8c:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

				/* CLEAR THE DISPLAY ,THEN WRITE THE STRING "LOW LIGHT : (value of light) volt = (value of volt)mv" */
				LCD_voidClearDisplay();
    5e90:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_voidClearDisplay>
				LCD_voidGOTOXY(0, 0);
    5e94:	80 e0       	ldi	r24, 0x00	; 0
    5e96:	60 e0       	ldi	r22, 0x00	; 0
    5e98:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"LOW LIGHT : ");
    5e9c:	86 e0       	ldi	r24, 0x06	; 6
    5e9e:	92 e0       	ldi	r25, 0x02	; 2
    5ea0:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
				LCD_voidWriteNumber(LDR_u16DigitalVoltage);
    5ea4:	80 91 b7 03 	lds	r24, 0x03B7
    5ea8:	90 91 b8 03 	lds	r25, 0x03B8
    5eac:	cc 01       	movw	r24, r24
    5eae:	a0 e0       	ldi	r26, 0x00	; 0
    5eb0:	b0 e0       	ldi	r27, 0x00	; 0
    5eb2:	bc 01       	movw	r22, r24
    5eb4:	cd 01       	movw	r24, r26
    5eb6:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
				LCD_voidGOTOXY(1, 1);
    5eba:	81 e0       	ldi	r24, 0x01	; 1
    5ebc:	61 e0       	ldi	r22, 0x01	; 1
    5ebe:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"volt = ");
    5ec2:	83 e1       	ldi	r24, 0x13	; 19
    5ec4:	92 e0       	ldi	r25, 0x02	; 2
    5ec6:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
				LCD_voidWriteNumber(LDR_u16AnalogVoltagemv);
    5eca:	80 91 bb 03 	lds	r24, 0x03BB
    5ece:	90 91 bc 03 	lds	r25, 0x03BC
    5ed2:	cc 01       	movw	r24, r24
    5ed4:	a0 e0       	ldi	r26, 0x00	; 0
    5ed6:	b0 e0       	ldi	r27, 0x00	; 0
    5ed8:	bc 01       	movw	r22, r24
    5eda:	cd 01       	movw	r24, r26
    5edc:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
				LCD_voidWriteString((u8*)"mv");
    5ee0:	8b e1       	ldi	r24, 0x1B	; 27
    5ee2:	92 e0       	ldi	r25, 0x02	; 2
    5ee4:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>

				/* CLEAR THE OTHER FLAGS TO ALLOW WRITEING THE SPECIFIED STRING WHEN GO TO
				   THEIR IF CONDITION FOR THE FIRST TIME AND SET LDR_u8Flag1 TO PREVENT REPEATATION
				*/
				LDR_u8Flag1 = 1;
    5ee8:	81 e0       	ldi	r24, 0x01	; 1
    5eea:	80 93 bd 03 	sts	0x03BD, r24
				LDR_u8Flag2 = 0;
    5eee:	10 92 be 03 	sts	0x03BE, r1
				LDR_u8Flag3 = 0;
    5ef2:	10 92 bf 03 	sts	0x03BF, r1
				LDR_u8Flag4 = 0;
    5ef6:	10 92 c0 03 	sts	0x03C0, r1
    5efa:	15 c2       	rjmp	.+1066   	; 0x6326 <ADC_FUNC+0x86a>
			}

			/* CHECK IF READED DIGITAL VALUE IS LESS THAN OR EQUAL 93 OR NOT AND IF THIS CONDITION TAKE PLACE BEFORE OR NOT */
			else if(LDR_u16DigitalVoltage <= 93 && LDR_u8Flag1 == 1){
    5efc:	80 91 b7 03 	lds	r24, 0x03B7
    5f00:	90 91 b8 03 	lds	r25, 0x03B8
    5f04:	8e 35       	cpi	r24, 0x5E	; 94
    5f06:	91 05       	cpc	r25, r1
    5f08:	b8 f5       	brcc	.+110    	; 0x5f78 <ADC_FUNC+0x4bc>
    5f0a:	80 91 bd 03 	lds	r24, 0x03BD
    5f0e:	81 30       	cpi	r24, 0x01	; 1
    5f10:	99 f5       	brne	.+102    	; 0x5f78 <ADC_FUNC+0x4bc>

				/* UPDATES VALUES OF (LIGHT AND VOLT) ONLY */
				LCD_voidGOTOXY(0, 12);
    5f12:	80 e0       	ldi	r24, 0x00	; 0
    5f14:	6c e0       	ldi	r22, 0x0C	; 12
    5f16:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"     ");
    5f1a:	8e e1       	ldi	r24, 0x1E	; 30
    5f1c:	92 e0       	ldi	r25, 0x02	; 2
    5f1e:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
				LCD_voidGOTOXY(0, 12);
    5f22:	80 e0       	ldi	r24, 0x00	; 0
    5f24:	6c e0       	ldi	r22, 0x0C	; 12
    5f26:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteNumber(LDR_u16DigitalVoltage);
    5f2a:	80 91 b7 03 	lds	r24, 0x03B7
    5f2e:	90 91 b8 03 	lds	r25, 0x03B8
    5f32:	cc 01       	movw	r24, r24
    5f34:	a0 e0       	ldi	r26, 0x00	; 0
    5f36:	b0 e0       	ldi	r27, 0x00	; 0
    5f38:	bc 01       	movw	r22, r24
    5f3a:	cd 01       	movw	r24, r26
    5f3c:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
				LCD_voidGOTOXY(1, 8);
    5f40:	81 e0       	ldi	r24, 0x01	; 1
    5f42:	68 e0       	ldi	r22, 0x08	; 8
    5f44:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"        ");
    5f48:	84 e2       	ldi	r24, 0x24	; 36
    5f4a:	92 e0       	ldi	r25, 0x02	; 2
    5f4c:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
				LCD_voidGOTOXY(1, 8);
    5f50:	81 e0       	ldi	r24, 0x01	; 1
    5f52:	68 e0       	ldi	r22, 0x08	; 8
    5f54:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteNumber(LDR_u16AnalogVoltagemv);
    5f58:	80 91 bb 03 	lds	r24, 0x03BB
    5f5c:	90 91 bc 03 	lds	r25, 0x03BC
    5f60:	cc 01       	movw	r24, r24
    5f62:	a0 e0       	ldi	r26, 0x00	; 0
    5f64:	b0 e0       	ldi	r27, 0x00	; 0
    5f66:	bc 01       	movw	r22, r24
    5f68:	cd 01       	movw	r24, r26
    5f6a:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
				LCD_voidWriteString((u8*)"mv");
    5f6e:	8b e1       	ldi	r24, 0x1B	; 27
    5f70:	92 e0       	ldi	r25, 0x02	; 2
    5f72:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
    5f76:	d7 c1       	rjmp	.+942    	; 0x6326 <ADC_FUNC+0x86a>
			}

			/* CHECK IF READED DIGITAL VALUE IS BIGGER THAN 93 AND LESS THAN OR EQUAL 512 OR NOT AND IF THIS CONDITION TAKE PLACE FOR THE FIRST TIME OR NOT */
			else if(LDR_u16DigitalVoltage > 93 && LDR_u16DigitalVoltage <= 512 && LDR_u8Flag2 == 0){
    5f78:	80 91 b7 03 	lds	r24, 0x03B7
    5f7c:	90 91 b8 03 	lds	r25, 0x03B8
    5f80:	8e 35       	cpi	r24, 0x5E	; 94
    5f82:	91 05       	cpc	r25, r1
    5f84:	08 f4       	brcc	.+2      	; 0x5f88 <ADC_FUNC+0x4cc>
    5f86:	53 c0       	rjmp	.+166    	; 0x602e <ADC_FUNC+0x572>
    5f88:	80 91 b7 03 	lds	r24, 0x03B7
    5f8c:	90 91 b8 03 	lds	r25, 0x03B8
    5f90:	22 e0       	ldi	r18, 0x02	; 2
    5f92:	81 30       	cpi	r24, 0x01	; 1
    5f94:	92 07       	cpc	r25, r18
    5f96:	08 f0       	brcs	.+2      	; 0x5f9a <ADC_FUNC+0x4de>
    5f98:	4a c0       	rjmp	.+148    	; 0x602e <ADC_FUNC+0x572>
    5f9a:	80 91 be 03 	lds	r24, 0x03BE
    5f9e:	88 23       	and	r24, r24
    5fa0:	09 f0       	breq	.+2      	; 0x5fa4 <ADC_FUNC+0x4e8>
    5fa2:	45 c0       	rjmp	.+138    	; 0x602e <ADC_FUNC+0x572>

				/* TURN-ON 2 LEDS ONLY OF THE SYSTEM */
				DIO_voidSetPinValue(PORTA, PIN4, HIGH);
    5fa4:	80 e0       	ldi	r24, 0x00	; 0
    5fa6:	64 e0       	ldi	r22, 0x04	; 4
    5fa8:	41 e0       	ldi	r20, 0x01	; 1
    5faa:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
				DIO_voidSetPinValue(PORTA, PIN5, HIGH);
    5fae:	80 e0       	ldi	r24, 0x00	; 0
    5fb0:	65 e0       	ldi	r22, 0x05	; 5
    5fb2:	41 e0       	ldi	r20, 0x01	; 1
    5fb4:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
				DIO_voidSetPinValue(PORTB, PIN2, LOW);
    5fb8:	81 e0       	ldi	r24, 0x01	; 1
    5fba:	62 e0       	ldi	r22, 0x02	; 2
    5fbc:	40 e0       	ldi	r20, 0x00	; 0
    5fbe:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

				/* CLEAR THE DISPLAY ,THEN WRITE THE STRING "MEDIUM LIGHT:(value of light)   volt = (value of volt)mv" */
				LCD_voidClearDisplay();
    5fc2:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_voidClearDisplay>
				LCD_voidGOTOXY(0, 0);
    5fc6:	80 e0       	ldi	r24, 0x00	; 0
    5fc8:	60 e0       	ldi	r22, 0x00	; 0
    5fca:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"MEDIUM LIGHT:");
    5fce:	8d e2       	ldi	r24, 0x2D	; 45
    5fd0:	92 e0       	ldi	r25, 0x02	; 2
    5fd2:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
				LCD_voidWriteNumber(LDR_u16DigitalVoltage);
    5fd6:	80 91 b7 03 	lds	r24, 0x03B7
    5fda:	90 91 b8 03 	lds	r25, 0x03B8
    5fde:	cc 01       	movw	r24, r24
    5fe0:	a0 e0       	ldi	r26, 0x00	; 0
    5fe2:	b0 e0       	ldi	r27, 0x00	; 0
    5fe4:	bc 01       	movw	r22, r24
    5fe6:	cd 01       	movw	r24, r26
    5fe8:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
				LCD_voidGOTOXY(1, 1);
    5fec:	81 e0       	ldi	r24, 0x01	; 1
    5fee:	61 e0       	ldi	r22, 0x01	; 1
    5ff0:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"volt = ");
    5ff4:	83 e1       	ldi	r24, 0x13	; 19
    5ff6:	92 e0       	ldi	r25, 0x02	; 2
    5ff8:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
				LCD_voidWriteNumber(LDR_u16AnalogVoltagemv);
    5ffc:	80 91 bb 03 	lds	r24, 0x03BB
    6000:	90 91 bc 03 	lds	r25, 0x03BC
    6004:	cc 01       	movw	r24, r24
    6006:	a0 e0       	ldi	r26, 0x00	; 0
    6008:	b0 e0       	ldi	r27, 0x00	; 0
    600a:	bc 01       	movw	r22, r24
    600c:	cd 01       	movw	r24, r26
    600e:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
				LCD_voidWriteString((u8*)"mv");
    6012:	8b e1       	ldi	r24, 0x1B	; 27
    6014:	92 e0       	ldi	r25, 0x02	; 2
    6016:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>

				/* CLEAR THE OTHER FLAGS TO ALLOW WRITEING THE SPECIFIED STRING WHEN GO TO
				   THEIR IF CONDITION FOR THE FIRST TIME AND SET LDR_u8Flag2 TO PREVENT REPEATATION
				*/
				LDR_u8Flag1 = 0;
    601a:	10 92 bd 03 	sts	0x03BD, r1
				LDR_u8Flag2 = 1;
    601e:	81 e0       	ldi	r24, 0x01	; 1
    6020:	80 93 be 03 	sts	0x03BE, r24
				LDR_u8Flag3 = 0;
    6024:	10 92 bf 03 	sts	0x03BF, r1
				LDR_u8Flag4 = 0;
    6028:	10 92 c0 03 	sts	0x03C0, r1
    602c:	7c c1       	rjmp	.+760    	; 0x6326 <ADC_FUNC+0x86a>
			}
			/* CHECK IF READED DIGITAL VALUE IS BIGGER THAN 93 AND LESS THAN OR EQUAL 512 OR NOT AND IF THIS CONDITION TAKE PLACE BEFORE OR NOT */
			else if(LDR_u16DigitalVoltage > 93 && LDR_u16DigitalVoltage <= 512 && LDR_u8Flag2 == 1){
    602e:	80 91 b7 03 	lds	r24, 0x03B7
    6032:	90 91 b8 03 	lds	r25, 0x03B8
    6036:	8e 35       	cpi	r24, 0x5E	; 94
    6038:	91 05       	cpc	r25, r1
    603a:	08 f4       	brcc	.+2      	; 0x603e <ADC_FUNC+0x582>
    603c:	3f c0       	rjmp	.+126    	; 0x60bc <ADC_FUNC+0x600>
    603e:	80 91 b7 03 	lds	r24, 0x03B7
    6042:	90 91 b8 03 	lds	r25, 0x03B8
    6046:	22 e0       	ldi	r18, 0x02	; 2
    6048:	81 30       	cpi	r24, 0x01	; 1
    604a:	92 07       	cpc	r25, r18
    604c:	b8 f5       	brcc	.+110    	; 0x60bc <ADC_FUNC+0x600>
    604e:	80 91 be 03 	lds	r24, 0x03BE
    6052:	81 30       	cpi	r24, 0x01	; 1
    6054:	99 f5       	brne	.+102    	; 0x60bc <ADC_FUNC+0x600>

				/* UPDATES VALUES OF (LIGHT AND VOLT) ONLY */
				LCD_voidGOTOXY(0, 13);
    6056:	80 e0       	ldi	r24, 0x00	; 0
    6058:	6d e0       	ldi	r22, 0x0D	; 13
    605a:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"    ");
    605e:	8b e3       	ldi	r24, 0x3B	; 59
    6060:	92 e0       	ldi	r25, 0x02	; 2
    6062:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
				LCD_voidGOTOXY(0, 13);
    6066:	80 e0       	ldi	r24, 0x00	; 0
    6068:	6d e0       	ldi	r22, 0x0D	; 13
    606a:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteNumber(LDR_u16DigitalVoltage);
    606e:	80 91 b7 03 	lds	r24, 0x03B7
    6072:	90 91 b8 03 	lds	r25, 0x03B8
    6076:	cc 01       	movw	r24, r24
    6078:	a0 e0       	ldi	r26, 0x00	; 0
    607a:	b0 e0       	ldi	r27, 0x00	; 0
    607c:	bc 01       	movw	r22, r24
    607e:	cd 01       	movw	r24, r26
    6080:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
				LCD_voidGOTOXY(1, 8);
    6084:	81 e0       	ldi	r24, 0x01	; 1
    6086:	68 e0       	ldi	r22, 0x08	; 8
    6088:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"        ");
    608c:	84 e2       	ldi	r24, 0x24	; 36
    608e:	92 e0       	ldi	r25, 0x02	; 2
    6090:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
				LCD_voidGOTOXY(1, 8);
    6094:	81 e0       	ldi	r24, 0x01	; 1
    6096:	68 e0       	ldi	r22, 0x08	; 8
    6098:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteNumber(LDR_u16AnalogVoltagemv);
    609c:	80 91 bb 03 	lds	r24, 0x03BB
    60a0:	90 91 bc 03 	lds	r25, 0x03BC
    60a4:	cc 01       	movw	r24, r24
    60a6:	a0 e0       	ldi	r26, 0x00	; 0
    60a8:	b0 e0       	ldi	r27, 0x00	; 0
    60aa:	bc 01       	movw	r22, r24
    60ac:	cd 01       	movw	r24, r26
    60ae:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
				LCD_voidWriteString((u8*)"mv");
    60b2:	8b e1       	ldi	r24, 0x1B	; 27
    60b4:	92 e0       	ldi	r25, 0x02	; 2
    60b6:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
    60ba:	35 c1       	rjmp	.+618    	; 0x6326 <ADC_FUNC+0x86a>
			}

			/* CHECK IF READED DIGITAL VALUE IS BIGGER THAN 512 AND LESS THAN OR EQUAL 682 OR NOT AND IF THIS CONDITION TAKE PLACE FOR THE FIRST TIME OR NOT */
			else if(LDR_u16DigitalVoltage > 512 && LDR_u16DigitalVoltage <= 682 && LDR_u8Flag3 == 0){
    60bc:	80 91 b7 03 	lds	r24, 0x03B7
    60c0:	90 91 b8 03 	lds	r25, 0x03B8
    60c4:	22 e0       	ldi	r18, 0x02	; 2
    60c6:	81 30       	cpi	r24, 0x01	; 1
    60c8:	92 07       	cpc	r25, r18
    60ca:	08 f4       	brcc	.+2      	; 0x60ce <ADC_FUNC+0x612>
    60cc:	53 c0       	rjmp	.+166    	; 0x6174 <ADC_FUNC+0x6b8>
    60ce:	80 91 b7 03 	lds	r24, 0x03B7
    60d2:	90 91 b8 03 	lds	r25, 0x03B8
    60d6:	22 e0       	ldi	r18, 0x02	; 2
    60d8:	8b 3a       	cpi	r24, 0xAB	; 171
    60da:	92 07       	cpc	r25, r18
    60dc:	08 f0       	brcs	.+2      	; 0x60e0 <ADC_FUNC+0x624>
    60de:	4a c0       	rjmp	.+148    	; 0x6174 <ADC_FUNC+0x6b8>
    60e0:	80 91 bf 03 	lds	r24, 0x03BF
    60e4:	88 23       	and	r24, r24
    60e6:	09 f0       	breq	.+2      	; 0x60ea <ADC_FUNC+0x62e>
    60e8:	45 c0       	rjmp	.+138    	; 0x6174 <ADC_FUNC+0x6b8>

				/* TURN-ON 1 LED ONLY OF THE SYSTEM */
				DIO_voidSetPinValue(PORTA, PIN4, HIGH);
    60ea:	80 e0       	ldi	r24, 0x00	; 0
    60ec:	64 e0       	ldi	r22, 0x04	; 4
    60ee:	41 e0       	ldi	r20, 0x01	; 1
    60f0:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
				DIO_voidSetPinValue(PORTA, PIN5, LOW);
    60f4:	80 e0       	ldi	r24, 0x00	; 0
    60f6:	65 e0       	ldi	r22, 0x05	; 5
    60f8:	40 e0       	ldi	r20, 0x00	; 0
    60fa:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
				DIO_voidSetPinValue(PORTB, PIN2, LOW);
    60fe:	81 e0       	ldi	r24, 0x01	; 1
    6100:	62 e0       	ldi	r22, 0x02	; 2
    6102:	40 e0       	ldi	r20, 0x00	; 0
    6104:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

				/* CLEAR THE DISPLAY ,THEN WRITE THE STRING "GOOD LIGHT:(value of light)   volt = (value of volt)mv" */
				LCD_voidClearDisplay();
    6108:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_voidClearDisplay>
				LCD_voidGOTOXY(0, 0);
    610c:	80 e0       	ldi	r24, 0x00	; 0
    610e:	60 e0       	ldi	r22, 0x00	; 0
    6110:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"GOOD LIGHT : ");
    6114:	80 e4       	ldi	r24, 0x40	; 64
    6116:	92 e0       	ldi	r25, 0x02	; 2
    6118:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
				LCD_voidWriteNumber(LDR_u16DigitalVoltage);
    611c:	80 91 b7 03 	lds	r24, 0x03B7
    6120:	90 91 b8 03 	lds	r25, 0x03B8
    6124:	cc 01       	movw	r24, r24
    6126:	a0 e0       	ldi	r26, 0x00	; 0
    6128:	b0 e0       	ldi	r27, 0x00	; 0
    612a:	bc 01       	movw	r22, r24
    612c:	cd 01       	movw	r24, r26
    612e:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
				LCD_voidGOTOXY(1, 1);
    6132:	81 e0       	ldi	r24, 0x01	; 1
    6134:	61 e0       	ldi	r22, 0x01	; 1
    6136:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"volt = ");
    613a:	83 e1       	ldi	r24, 0x13	; 19
    613c:	92 e0       	ldi	r25, 0x02	; 2
    613e:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
				LCD_voidWriteNumber(LDR_u16AnalogVoltagemv);
    6142:	80 91 bb 03 	lds	r24, 0x03BB
    6146:	90 91 bc 03 	lds	r25, 0x03BC
    614a:	cc 01       	movw	r24, r24
    614c:	a0 e0       	ldi	r26, 0x00	; 0
    614e:	b0 e0       	ldi	r27, 0x00	; 0
    6150:	bc 01       	movw	r22, r24
    6152:	cd 01       	movw	r24, r26
    6154:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
				LCD_voidWriteString((u8*)"mv");
    6158:	8b e1       	ldi	r24, 0x1B	; 27
    615a:	92 e0       	ldi	r25, 0x02	; 2
    615c:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>

				/* CLEAR THE OTHER FLAGS TO ALLOW WRITEING THE SPECIFIED STRING WHEN GO TO
				   THEIR IF CONDITION FOR THE FIRST TIME AND SET LDR_u8Flag3 TO PREVENT REPEATATION
				*/
				LDR_u8Flag1 = 0;
    6160:	10 92 bd 03 	sts	0x03BD, r1
				LDR_u8Flag2 = 0;
    6164:	10 92 be 03 	sts	0x03BE, r1
				LDR_u8Flag3 = 1;
    6168:	81 e0       	ldi	r24, 0x01	; 1
    616a:	80 93 bf 03 	sts	0x03BF, r24
				LDR_u8Flag4 = 0;
    616e:	10 92 c0 03 	sts	0x03C0, r1
    6172:	d9 c0       	rjmp	.+434    	; 0x6326 <ADC_FUNC+0x86a>
			}

			/* CHECK IF READED DIGITAL VALUE IS BIGGER THAN 512 AND LESS THAN OR EQUAL 682 OR NOT AND IF THIS CONDITION TAKE PLACE BEFORE OR NOT */
			else if(LDR_u16DigitalVoltage > 512 && LDR_u16DigitalVoltage <= 682 && LDR_u8Flag3 == 1){
    6174:	80 91 b7 03 	lds	r24, 0x03B7
    6178:	90 91 b8 03 	lds	r25, 0x03B8
    617c:	22 e0       	ldi	r18, 0x02	; 2
    617e:	81 30       	cpi	r24, 0x01	; 1
    6180:	92 07       	cpc	r25, r18
    6182:	08 f4       	brcc	.+2      	; 0x6186 <ADC_FUNC+0x6ca>
    6184:	3f c0       	rjmp	.+126    	; 0x6204 <ADC_FUNC+0x748>
    6186:	80 91 b7 03 	lds	r24, 0x03B7
    618a:	90 91 b8 03 	lds	r25, 0x03B8
    618e:	22 e0       	ldi	r18, 0x02	; 2
    6190:	8b 3a       	cpi	r24, 0xAB	; 171
    6192:	92 07       	cpc	r25, r18
    6194:	b8 f5       	brcc	.+110    	; 0x6204 <ADC_FUNC+0x748>
    6196:	80 91 bf 03 	lds	r24, 0x03BF
    619a:	81 30       	cpi	r24, 0x01	; 1
    619c:	99 f5       	brne	.+102    	; 0x6204 <ADC_FUNC+0x748>

				/* UPDATES VALUES OF (LIGHT AND VOLT) ONLY */
				LCD_voidGOTOXY(0, 13);
    619e:	80 e0       	ldi	r24, 0x00	; 0
    61a0:	6d e0       	ldi	r22, 0x0D	; 13
    61a2:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"    ");
    61a6:	8b e3       	ldi	r24, 0x3B	; 59
    61a8:	92 e0       	ldi	r25, 0x02	; 2
    61aa:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
				LCD_voidGOTOXY(0, 13);
    61ae:	80 e0       	ldi	r24, 0x00	; 0
    61b0:	6d e0       	ldi	r22, 0x0D	; 13
    61b2:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteNumber(LDR_u16DigitalVoltage);
    61b6:	80 91 b7 03 	lds	r24, 0x03B7
    61ba:	90 91 b8 03 	lds	r25, 0x03B8
    61be:	cc 01       	movw	r24, r24
    61c0:	a0 e0       	ldi	r26, 0x00	; 0
    61c2:	b0 e0       	ldi	r27, 0x00	; 0
    61c4:	bc 01       	movw	r22, r24
    61c6:	cd 01       	movw	r24, r26
    61c8:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
				LCD_voidGOTOXY(1, 8);
    61cc:	81 e0       	ldi	r24, 0x01	; 1
    61ce:	68 e0       	ldi	r22, 0x08	; 8
    61d0:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"        ");
    61d4:	84 e2       	ldi	r24, 0x24	; 36
    61d6:	92 e0       	ldi	r25, 0x02	; 2
    61d8:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
				LCD_voidGOTOXY(1, 8);
    61dc:	81 e0       	ldi	r24, 0x01	; 1
    61de:	68 e0       	ldi	r22, 0x08	; 8
    61e0:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteNumber(LDR_u16AnalogVoltagemv);
    61e4:	80 91 bb 03 	lds	r24, 0x03BB
    61e8:	90 91 bc 03 	lds	r25, 0x03BC
    61ec:	cc 01       	movw	r24, r24
    61ee:	a0 e0       	ldi	r26, 0x00	; 0
    61f0:	b0 e0       	ldi	r27, 0x00	; 0
    61f2:	bc 01       	movw	r22, r24
    61f4:	cd 01       	movw	r24, r26
    61f6:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
				LCD_voidWriteString((u8*)"mv");
    61fa:	8b e1       	ldi	r24, 0x1B	; 27
    61fc:	92 e0       	ldi	r25, 0x02	; 2
    61fe:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
    6202:	91 c0       	rjmp	.+290    	; 0x6326 <ADC_FUNC+0x86a>
			}

			/* CHECK IF READED DIGITAL VALUE IS BIGGER THAN 682 OR NOT AND IF THIS CONDITION TAKE PLACE FOR THE FIRST TIME OR NOT */
			else if(LDR_u16DigitalVoltage > 682 && LDR_u8Flag4 == 0){
    6204:	80 91 b7 03 	lds	r24, 0x03B7
    6208:	90 91 b8 03 	lds	r25, 0x03B8
    620c:	22 e0       	ldi	r18, 0x02	; 2
    620e:	8b 3a       	cpi	r24, 0xAB	; 171
    6210:	92 07       	cpc	r25, r18
    6212:	08 f4       	brcc	.+2      	; 0x6216 <ADC_FUNC+0x75a>
    6214:	4a c0       	rjmp	.+148    	; 0x62aa <ADC_FUNC+0x7ee>
    6216:	80 91 c0 03 	lds	r24, 0x03C0
    621a:	88 23       	and	r24, r24
    621c:	09 f0       	breq	.+2      	; 0x6220 <ADC_FUNC+0x764>
    621e:	45 c0       	rjmp	.+138    	; 0x62aa <ADC_FUNC+0x7ee>
				DIO_voidSetPinValue(PORTA, PIN4, LOW);
    6220:	80 e0       	ldi	r24, 0x00	; 0
    6222:	64 e0       	ldi	r22, 0x04	; 4
    6224:	40 e0       	ldi	r20, 0x00	; 0
    6226:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
				DIO_voidSetPinValue(PORTA, PIN5, LOW);
    622a:	80 e0       	ldi	r24, 0x00	; 0
    622c:	65 e0       	ldi	r22, 0x05	; 5
    622e:	40 e0       	ldi	r20, 0x00	; 0
    6230:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>
				DIO_voidSetPinValue(PORTB, PIN2, LOW);
    6234:	81 e0       	ldi	r24, 0x01	; 1
    6236:	62 e0       	ldi	r22, 0x02	; 2
    6238:	40 e0       	ldi	r20, 0x00	; 0
    623a:	0e 94 0d 0b 	call	0x161a	; 0x161a <DIO_voidSetPinValue>

				/* CLEAR THE DISPLAY ,THEN WRITE THE STRING "HIGH LIGHT:(value of light)   volt = (value of volt)mv" */
				LCD_voidClearDisplay();
    623e:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_voidClearDisplay>
				LCD_voidGOTOXY(0, 0);
    6242:	80 e0       	ldi	r24, 0x00	; 0
    6244:	60 e0       	ldi	r22, 0x00	; 0
    6246:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"HIGH LIGHT:");
    624a:	8e e4       	ldi	r24, 0x4E	; 78
    624c:	92 e0       	ldi	r25, 0x02	; 2
    624e:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
				LCD_voidWriteNumber(LDR_u16DigitalVoltage);
    6252:	80 91 b7 03 	lds	r24, 0x03B7
    6256:	90 91 b8 03 	lds	r25, 0x03B8
    625a:	cc 01       	movw	r24, r24
    625c:	a0 e0       	ldi	r26, 0x00	; 0
    625e:	b0 e0       	ldi	r27, 0x00	; 0
    6260:	bc 01       	movw	r22, r24
    6262:	cd 01       	movw	r24, r26
    6264:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
				LCD_voidGOTOXY(1, 1);
    6268:	81 e0       	ldi	r24, 0x01	; 1
    626a:	61 e0       	ldi	r22, 0x01	; 1
    626c:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"volt = ");
    6270:	83 e1       	ldi	r24, 0x13	; 19
    6272:	92 e0       	ldi	r25, 0x02	; 2
    6274:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
				LCD_voidWriteNumber(LDR_u16AnalogVoltagemv);
    6278:	80 91 bb 03 	lds	r24, 0x03BB
    627c:	90 91 bc 03 	lds	r25, 0x03BC
    6280:	cc 01       	movw	r24, r24
    6282:	a0 e0       	ldi	r26, 0x00	; 0
    6284:	b0 e0       	ldi	r27, 0x00	; 0
    6286:	bc 01       	movw	r22, r24
    6288:	cd 01       	movw	r24, r26
    628a:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
				LCD_voidWriteString((u8*)"mv");
    628e:	8b e1       	ldi	r24, 0x1B	; 27
    6290:	92 e0       	ldi	r25, 0x02	; 2
    6292:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>

				/* CLEAR THE OTHER FLAGS TO ALLOW WRITEING THE SPECIFIED STRING WHEN GO TO
				   THEIR IF CONDITION FOR THE FIRST TIME AND SET LDR_u8Flag4 TO PREVENT REPEATATION
				*/
				LDR_u8Flag1 = 0;
    6296:	10 92 bd 03 	sts	0x03BD, r1
				LDR_u8Flag2 = 0;
    629a:	10 92 be 03 	sts	0x03BE, r1
				LDR_u8Flag3 = 0;
    629e:	10 92 bf 03 	sts	0x03BF, r1
				LDR_u8Flag4 = 1;
    62a2:	81 e0       	ldi	r24, 0x01	; 1
    62a4:	80 93 c0 03 	sts	0x03C0, r24
    62a8:	3e c0       	rjmp	.+124    	; 0x6326 <ADC_FUNC+0x86a>
			}

			/* CHECK IF READED DIGITAL VALUE IS BIGGER THAN 682 OR NOT AND IF THIS CONDITION TAKE PLACE BEFORE OR NOT */
			else if(LDR_u16DigitalVoltage > 682 && LDR_u8Flag4 == 1){
    62aa:	80 91 b7 03 	lds	r24, 0x03B7
    62ae:	90 91 b8 03 	lds	r25, 0x03B8
    62b2:	22 e0       	ldi	r18, 0x02	; 2
    62b4:	8b 3a       	cpi	r24, 0xAB	; 171
    62b6:	92 07       	cpc	r25, r18
    62b8:	b0 f1       	brcs	.+108    	; 0x6326 <ADC_FUNC+0x86a>
    62ba:	80 91 c0 03 	lds	r24, 0x03C0
    62be:	81 30       	cpi	r24, 0x01	; 1
    62c0:	91 f5       	brne	.+100    	; 0x6326 <ADC_FUNC+0x86a>

				/* UPDATES VALUES OF (LIGHT AND VOLT) ONLY */
				LCD_voidGOTOXY(0, 11);
    62c2:	80 e0       	ldi	r24, 0x00	; 0
    62c4:	6b e0       	ldi	r22, 0x0B	; 11
    62c6:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"      ");
    62ca:	8a e5       	ldi	r24, 0x5A	; 90
    62cc:	92 e0       	ldi	r25, 0x02	; 2
    62ce:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
				LCD_voidGOTOXY(0, 11);
    62d2:	80 e0       	ldi	r24, 0x00	; 0
    62d4:	6b e0       	ldi	r22, 0x0B	; 11
    62d6:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteNumber(LDR_u16DigitalVoltage);
    62da:	80 91 b7 03 	lds	r24, 0x03B7
    62de:	90 91 b8 03 	lds	r25, 0x03B8
    62e2:	cc 01       	movw	r24, r24
    62e4:	a0 e0       	ldi	r26, 0x00	; 0
    62e6:	b0 e0       	ldi	r27, 0x00	; 0
    62e8:	bc 01       	movw	r22, r24
    62ea:	cd 01       	movw	r24, r26
    62ec:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
				LCD_voidGOTOXY(1, 8);
    62f0:	81 e0       	ldi	r24, 0x01	; 1
    62f2:	68 e0       	ldi	r22, 0x08	; 8
    62f4:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteString((u8*)"        ");
    62f8:	84 e2       	ldi	r24, 0x24	; 36
    62fa:	92 e0       	ldi	r25, 0x02	; 2
    62fc:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
				LCD_voidGOTOXY(1, 8);
    6300:	81 e0       	ldi	r24, 0x01	; 1
    6302:	68 e0       	ldi	r22, 0x08	; 8
    6304:	0e 94 77 14 	call	0x28ee	; 0x28ee <LCD_voidGOTOXY>
				LCD_voidWriteNumber(LDR_u16AnalogVoltagemv);
    6308:	80 91 bb 03 	lds	r24, 0x03BB
    630c:	90 91 bc 03 	lds	r25, 0x03BC
    6310:	cc 01       	movw	r24, r24
    6312:	a0 e0       	ldi	r26, 0x00	; 0
    6314:	b0 e0       	ldi	r27, 0x00	; 0
    6316:	bc 01       	movw	r22, r24
    6318:	cd 01       	movw	r24, r26
    631a:	0e 94 22 15 	call	0x2a44	; 0x2a44 <LCD_voidWriteNumber>
				LCD_voidWriteString((u8*)"mv");
    631e:	8b e1       	ldi	r24, 0x1B	; 27
    6320:	92 e0       	ldi	r25, 0x02	; 2
    6322:	0e 94 9f 14 	call	0x293e	; 0x293e <LCD_voidWriteString>
			}

			// ASSIGN NEW READED DIGITAL VALUE TO THE OLD ONE GLOBAL VARIABLE
			LDR_u16OldDigitalVoltage = LDR_u16DigitalVoltage;
    6326:	80 91 b7 03 	lds	r24, 0x03B7
    632a:	90 91 b8 03 	lds	r25, 0x03B8
    632e:	90 93 ba 03 	sts	0x03BA, r25
    6332:	80 93 b9 03 	sts	0x03B9, r24
		}
	}
}
    6336:	cf 91       	pop	r28
    6338:	df 91       	pop	r29
    633a:	08 95       	ret

0000633c <ArrayToInt>:

/* FUNCTION TO RETURN THE ENTERD PASSWORD (AS ARRAY) AS A (u32) NUMBER */
u32 ArrayToInt(u32 *ptr ,u8 size){
    633c:	df 93       	push	r29
    633e:	cf 93       	push	r28
    6340:	cd b7       	in	r28, 0x3d	; 61
    6342:	de b7       	in	r29, 0x3e	; 62
    6344:	2b 97       	sbiw	r28, 0x0b	; 11
    6346:	0f b6       	in	r0, 0x3f	; 63
    6348:	f8 94       	cli
    634a:	de bf       	out	0x3e, r29	; 62
    634c:	0f be       	out	0x3f, r0	; 63
    634e:	cd bf       	out	0x3d, r28	; 61
    6350:	9a 87       	std	Y+10, r25	; 0x0a
    6352:	89 87       	std	Y+9, r24	; 0x09
    6354:	6b 87       	std	Y+11, r22	; 0x0b
	u32 result = 0;
    6356:	1d 82       	std	Y+5, r1	; 0x05
    6358:	1e 82       	std	Y+6, r1	; 0x06
    635a:	1f 82       	std	Y+7, r1	; 0x07
    635c:	18 86       	std	Y+8, r1	; 0x08
	for(u32 i=0 ;i<size ;i++){
    635e:	19 82       	std	Y+1, r1	; 0x01
    6360:	1a 82       	std	Y+2, r1	; 0x02
    6362:	1b 82       	std	Y+3, r1	; 0x03
    6364:	1c 82       	std	Y+4, r1	; 0x04
    6366:	31 c0       	rjmp	.+98     	; 0x63ca <ArrayToInt+0x8e>
		result = (result * 10) + (*(ptr+i));
    6368:	8d 81       	ldd	r24, Y+5	; 0x05
    636a:	9e 81       	ldd	r25, Y+6	; 0x06
    636c:	af 81       	ldd	r26, Y+7	; 0x07
    636e:	b8 85       	ldd	r27, Y+8	; 0x08
    6370:	2a e0       	ldi	r18, 0x0A	; 10
    6372:	30 e0       	ldi	r19, 0x00	; 0
    6374:	40 e0       	ldi	r20, 0x00	; 0
    6376:	50 e0       	ldi	r21, 0x00	; 0
    6378:	bc 01       	movw	r22, r24
    637a:	cd 01       	movw	r24, r26
    637c:	0e 94 1e 32 	call	0x643c	; 0x643c <__mulsi3>
    6380:	ab 01       	movw	r20, r22
    6382:	bc 01       	movw	r22, r24
    6384:	89 81       	ldd	r24, Y+1	; 0x01
    6386:	9a 81       	ldd	r25, Y+2	; 0x02
    6388:	9c 01       	movw	r18, r24
    638a:	22 0f       	add	r18, r18
    638c:	33 1f       	adc	r19, r19
    638e:	22 0f       	add	r18, r18
    6390:	33 1f       	adc	r19, r19
    6392:	89 85       	ldd	r24, Y+9	; 0x09
    6394:	9a 85       	ldd	r25, Y+10	; 0x0a
    6396:	fc 01       	movw	r30, r24
    6398:	e2 0f       	add	r30, r18
    639a:	f3 1f       	adc	r31, r19
    639c:	80 81       	ld	r24, Z
    639e:	91 81       	ldd	r25, Z+1	; 0x01
    63a0:	a2 81       	ldd	r26, Z+2	; 0x02
    63a2:	b3 81       	ldd	r27, Z+3	; 0x03
    63a4:	84 0f       	add	r24, r20
    63a6:	95 1f       	adc	r25, r21
    63a8:	a6 1f       	adc	r26, r22
    63aa:	b7 1f       	adc	r27, r23
    63ac:	8d 83       	std	Y+5, r24	; 0x05
    63ae:	9e 83       	std	Y+6, r25	; 0x06
    63b0:	af 83       	std	Y+7, r26	; 0x07
    63b2:	b8 87       	std	Y+8, r27	; 0x08
}

/* FUNCTION TO RETURN THE ENTERD PASSWORD (AS ARRAY) AS A (u32) NUMBER */
u32 ArrayToInt(u32 *ptr ,u8 size){
	u32 result = 0;
	for(u32 i=0 ;i<size ;i++){
    63b4:	89 81       	ldd	r24, Y+1	; 0x01
    63b6:	9a 81       	ldd	r25, Y+2	; 0x02
    63b8:	ab 81       	ldd	r26, Y+3	; 0x03
    63ba:	bc 81       	ldd	r27, Y+4	; 0x04
    63bc:	01 96       	adiw	r24, 0x01	; 1
    63be:	a1 1d       	adc	r26, r1
    63c0:	b1 1d       	adc	r27, r1
    63c2:	89 83       	std	Y+1, r24	; 0x01
    63c4:	9a 83       	std	Y+2, r25	; 0x02
    63c6:	ab 83       	std	Y+3, r26	; 0x03
    63c8:	bc 83       	std	Y+4, r27	; 0x04
    63ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    63cc:	28 2f       	mov	r18, r24
    63ce:	30 e0       	ldi	r19, 0x00	; 0
    63d0:	40 e0       	ldi	r20, 0x00	; 0
    63d2:	50 e0       	ldi	r21, 0x00	; 0
    63d4:	89 81       	ldd	r24, Y+1	; 0x01
    63d6:	9a 81       	ldd	r25, Y+2	; 0x02
    63d8:	ab 81       	ldd	r26, Y+3	; 0x03
    63da:	bc 81       	ldd	r27, Y+4	; 0x04
    63dc:	82 17       	cp	r24, r18
    63de:	93 07       	cpc	r25, r19
    63e0:	a4 07       	cpc	r26, r20
    63e2:	b5 07       	cpc	r27, r21
    63e4:	08 f2       	brcs	.-126    	; 0x6368 <ArrayToInt+0x2c>
		result = (result * 10) + (*(ptr+i));
	}
	return result;
    63e6:	8d 81       	ldd	r24, Y+5	; 0x05
    63e8:	9e 81       	ldd	r25, Y+6	; 0x06
    63ea:	af 81       	ldd	r26, Y+7	; 0x07
    63ec:	b8 85       	ldd	r27, Y+8	; 0x08
}
    63ee:	bc 01       	movw	r22, r24
    63f0:	cd 01       	movw	r24, r26
    63f2:	2b 96       	adiw	r28, 0x0b	; 11
    63f4:	0f b6       	in	r0, 0x3f	; 63
    63f6:	f8 94       	cli
    63f8:	de bf       	out	0x3e, r29	; 62
    63fa:	0f be       	out	0x3f, r0	; 63
    63fc:	cd bf       	out	0x3d, r28	; 61
    63fe:	cf 91       	pop	r28
    6400:	df 91       	pop	r29
    6402:	08 95       	ret

00006404 <EXTI0_FUNC>:

/* CALL BACK FUNCTION OF EXTERNAL INTERRUPT 0 */
void EXTI0_FUNC(void){
    6404:	df 93       	push	r29
    6406:	cf 93       	push	r28
    6408:	cd b7       	in	r28, 0x3d	; 61
    640a:	de b7       	in	r29, 0x3e	; 62

	/* CHECK IF THE SYSTEM RAISED END_u8Flag FLAG OR NOT */
	if(END_u8Flag == 1){
    640c:	80 91 c1 03 	lds	r24, 0x03C1
    6410:	81 30       	cpi	r24, 0x01	; 1
    6412:	19 f4       	brne	.+6      	; 0x641a <EXTI0_FUNC+0x16>

		/* GO TO AREA 4 TO CLEAR FLAGS OF TEMPERATURE SENSOR BEFORE GO TO THE TEMPERATURE AREA SENSOR SAFELY */
		Global_u8Control = 4;
    6414:	84 e0       	ldi	r24, 0x04	; 4
    6416:	80 93 c2 03 	sts	0x03C2, r24
	}
	else{
		/* DO NoTHING */
	}
}
    641a:	cf 91       	pop	r28
    641c:	df 91       	pop	r29
    641e:	08 95       	ret

00006420 <EXTI1_FUNC>:

/* CALL BACK FUNCTION OF EXTERNAL INTERRUPT 1 */
void EXTI1_FUNC(void){
    6420:	df 93       	push	r29
    6422:	cf 93       	push	r28
    6424:	cd b7       	in	r28, 0x3d	; 61
    6426:	de b7       	in	r29, 0x3e	; 62

	/* CHECK IF THE SYSTEM RAISED END_u8Flag FLAG OR NOT */
	if(END_u8Flag == 1){
    6428:	80 91 c1 03 	lds	r24, 0x03C1
    642c:	81 30       	cpi	r24, 0x01	; 1
    642e:	19 f4       	brne	.+6      	; 0x6436 <EXTI1_FUNC+0x16>

		/* GO TO AREA 8 TO CLEAR FLAGS OF LIGHT SYSTEM BEFORE GO TO THE LIGHT SYSTEM AREA SAFELY */
		Global_u8Control = 8;
    6430:	88 e0       	ldi	r24, 0x08	; 8
    6432:	80 93 c2 03 	sts	0x03C2, r24
	}
	else{
		/* DO NoTHING */
	}
}
    6436:	cf 91       	pop	r28
    6438:	df 91       	pop	r29
    643a:	08 95       	ret

0000643c <__mulsi3>:
    643c:	62 9f       	mul	r22, r18
    643e:	d0 01       	movw	r26, r0
    6440:	73 9f       	mul	r23, r19
    6442:	f0 01       	movw	r30, r0
    6444:	82 9f       	mul	r24, r18
    6446:	e0 0d       	add	r30, r0
    6448:	f1 1d       	adc	r31, r1
    644a:	64 9f       	mul	r22, r20
    644c:	e0 0d       	add	r30, r0
    644e:	f1 1d       	adc	r31, r1
    6450:	92 9f       	mul	r25, r18
    6452:	f0 0d       	add	r31, r0
    6454:	83 9f       	mul	r24, r19
    6456:	f0 0d       	add	r31, r0
    6458:	74 9f       	mul	r23, r20
    645a:	f0 0d       	add	r31, r0
    645c:	65 9f       	mul	r22, r21
    645e:	f0 0d       	add	r31, r0
    6460:	99 27       	eor	r25, r25
    6462:	72 9f       	mul	r23, r18
    6464:	b0 0d       	add	r27, r0
    6466:	e1 1d       	adc	r30, r1
    6468:	f9 1f       	adc	r31, r25
    646a:	63 9f       	mul	r22, r19
    646c:	b0 0d       	add	r27, r0
    646e:	e1 1d       	adc	r30, r1
    6470:	f9 1f       	adc	r31, r25
    6472:	bd 01       	movw	r22, r26
    6474:	cf 01       	movw	r24, r30
    6476:	11 24       	eor	r1, r1
    6478:	08 95       	ret

0000647a <__udivmodqi4>:
    647a:	99 1b       	sub	r25, r25
    647c:	79 e0       	ldi	r23, 0x09	; 9
    647e:	04 c0       	rjmp	.+8      	; 0x6488 <__udivmodqi4_ep>

00006480 <__udivmodqi4_loop>:
    6480:	99 1f       	adc	r25, r25
    6482:	96 17       	cp	r25, r22
    6484:	08 f0       	brcs	.+2      	; 0x6488 <__udivmodqi4_ep>
    6486:	96 1b       	sub	r25, r22

00006488 <__udivmodqi4_ep>:
    6488:	88 1f       	adc	r24, r24
    648a:	7a 95       	dec	r23
    648c:	c9 f7       	brne	.-14     	; 0x6480 <__udivmodqi4_loop>
    648e:	80 95       	com	r24
    6490:	08 95       	ret

00006492 <__udivmodhi4>:
    6492:	aa 1b       	sub	r26, r26
    6494:	bb 1b       	sub	r27, r27
    6496:	51 e1       	ldi	r21, 0x11	; 17
    6498:	07 c0       	rjmp	.+14     	; 0x64a8 <__udivmodhi4_ep>

0000649a <__udivmodhi4_loop>:
    649a:	aa 1f       	adc	r26, r26
    649c:	bb 1f       	adc	r27, r27
    649e:	a6 17       	cp	r26, r22
    64a0:	b7 07       	cpc	r27, r23
    64a2:	10 f0       	brcs	.+4      	; 0x64a8 <__udivmodhi4_ep>
    64a4:	a6 1b       	sub	r26, r22
    64a6:	b7 0b       	sbc	r27, r23

000064a8 <__udivmodhi4_ep>:
    64a8:	88 1f       	adc	r24, r24
    64aa:	99 1f       	adc	r25, r25
    64ac:	5a 95       	dec	r21
    64ae:	a9 f7       	brne	.-22     	; 0x649a <__udivmodhi4_loop>
    64b0:	80 95       	com	r24
    64b2:	90 95       	com	r25
    64b4:	bc 01       	movw	r22, r24
    64b6:	cd 01       	movw	r24, r26
    64b8:	08 95       	ret

000064ba <__divmodsi4>:
    64ba:	97 fb       	bst	r25, 7
    64bc:	09 2e       	mov	r0, r25
    64be:	05 26       	eor	r0, r21
    64c0:	0e d0       	rcall	.+28     	; 0x64de <__divmodsi4_neg1>
    64c2:	57 fd       	sbrc	r21, 7
    64c4:	04 d0       	rcall	.+8      	; 0x64ce <__divmodsi4_neg2>
    64c6:	14 d0       	rcall	.+40     	; 0x64f0 <__udivmodsi4>
    64c8:	0a d0       	rcall	.+20     	; 0x64de <__divmodsi4_neg1>
    64ca:	00 1c       	adc	r0, r0
    64cc:	38 f4       	brcc	.+14     	; 0x64dc <__divmodsi4_exit>

000064ce <__divmodsi4_neg2>:
    64ce:	50 95       	com	r21
    64d0:	40 95       	com	r20
    64d2:	30 95       	com	r19
    64d4:	21 95       	neg	r18
    64d6:	3f 4f       	sbci	r19, 0xFF	; 255
    64d8:	4f 4f       	sbci	r20, 0xFF	; 255
    64da:	5f 4f       	sbci	r21, 0xFF	; 255

000064dc <__divmodsi4_exit>:
    64dc:	08 95       	ret

000064de <__divmodsi4_neg1>:
    64de:	f6 f7       	brtc	.-4      	; 0x64dc <__divmodsi4_exit>
    64e0:	90 95       	com	r25
    64e2:	80 95       	com	r24
    64e4:	70 95       	com	r23
    64e6:	61 95       	neg	r22
    64e8:	7f 4f       	sbci	r23, 0xFF	; 255
    64ea:	8f 4f       	sbci	r24, 0xFF	; 255
    64ec:	9f 4f       	sbci	r25, 0xFF	; 255
    64ee:	08 95       	ret

000064f0 <__udivmodsi4>:
    64f0:	a1 e2       	ldi	r26, 0x21	; 33
    64f2:	1a 2e       	mov	r1, r26
    64f4:	aa 1b       	sub	r26, r26
    64f6:	bb 1b       	sub	r27, r27
    64f8:	fd 01       	movw	r30, r26
    64fa:	0d c0       	rjmp	.+26     	; 0x6516 <__udivmodsi4_ep>

000064fc <__udivmodsi4_loop>:
    64fc:	aa 1f       	adc	r26, r26
    64fe:	bb 1f       	adc	r27, r27
    6500:	ee 1f       	adc	r30, r30
    6502:	ff 1f       	adc	r31, r31
    6504:	a2 17       	cp	r26, r18
    6506:	b3 07       	cpc	r27, r19
    6508:	e4 07       	cpc	r30, r20
    650a:	f5 07       	cpc	r31, r21
    650c:	20 f0       	brcs	.+8      	; 0x6516 <__udivmodsi4_ep>
    650e:	a2 1b       	sub	r26, r18
    6510:	b3 0b       	sbc	r27, r19
    6512:	e4 0b       	sbc	r30, r20
    6514:	f5 0b       	sbc	r31, r21

00006516 <__udivmodsi4_ep>:
    6516:	66 1f       	adc	r22, r22
    6518:	77 1f       	adc	r23, r23
    651a:	88 1f       	adc	r24, r24
    651c:	99 1f       	adc	r25, r25
    651e:	1a 94       	dec	r1
    6520:	69 f7       	brne	.-38     	; 0x64fc <__udivmodsi4_loop>
    6522:	60 95       	com	r22
    6524:	70 95       	com	r23
    6526:	80 95       	com	r24
    6528:	90 95       	com	r25
    652a:	9b 01       	movw	r18, r22
    652c:	ac 01       	movw	r20, r24
    652e:	bd 01       	movw	r22, r26
    6530:	cf 01       	movw	r24, r30
    6532:	08 95       	ret

00006534 <__prologue_saves__>:
    6534:	2f 92       	push	r2
    6536:	3f 92       	push	r3
    6538:	4f 92       	push	r4
    653a:	5f 92       	push	r5
    653c:	6f 92       	push	r6
    653e:	7f 92       	push	r7
    6540:	8f 92       	push	r8
    6542:	9f 92       	push	r9
    6544:	af 92       	push	r10
    6546:	bf 92       	push	r11
    6548:	cf 92       	push	r12
    654a:	df 92       	push	r13
    654c:	ef 92       	push	r14
    654e:	ff 92       	push	r15
    6550:	0f 93       	push	r16
    6552:	1f 93       	push	r17
    6554:	cf 93       	push	r28
    6556:	df 93       	push	r29
    6558:	cd b7       	in	r28, 0x3d	; 61
    655a:	de b7       	in	r29, 0x3e	; 62
    655c:	ca 1b       	sub	r28, r26
    655e:	db 0b       	sbc	r29, r27
    6560:	0f b6       	in	r0, 0x3f	; 63
    6562:	f8 94       	cli
    6564:	de bf       	out	0x3e, r29	; 62
    6566:	0f be       	out	0x3f, r0	; 63
    6568:	cd bf       	out	0x3d, r28	; 61
    656a:	09 94       	ijmp

0000656c <__epilogue_restores__>:
    656c:	2a 88       	ldd	r2, Y+18	; 0x12
    656e:	39 88       	ldd	r3, Y+17	; 0x11
    6570:	48 88       	ldd	r4, Y+16	; 0x10
    6572:	5f 84       	ldd	r5, Y+15	; 0x0f
    6574:	6e 84       	ldd	r6, Y+14	; 0x0e
    6576:	7d 84       	ldd	r7, Y+13	; 0x0d
    6578:	8c 84       	ldd	r8, Y+12	; 0x0c
    657a:	9b 84       	ldd	r9, Y+11	; 0x0b
    657c:	aa 84       	ldd	r10, Y+10	; 0x0a
    657e:	b9 84       	ldd	r11, Y+9	; 0x09
    6580:	c8 84       	ldd	r12, Y+8	; 0x08
    6582:	df 80       	ldd	r13, Y+7	; 0x07
    6584:	ee 80       	ldd	r14, Y+6	; 0x06
    6586:	fd 80       	ldd	r15, Y+5	; 0x05
    6588:	0c 81       	ldd	r16, Y+4	; 0x04
    658a:	1b 81       	ldd	r17, Y+3	; 0x03
    658c:	aa 81       	ldd	r26, Y+2	; 0x02
    658e:	b9 81       	ldd	r27, Y+1	; 0x01
    6590:	ce 0f       	add	r28, r30
    6592:	d1 1d       	adc	r29, r1
    6594:	0f b6       	in	r0, 0x3f	; 63
    6596:	f8 94       	cli
    6598:	de bf       	out	0x3e, r29	; 62
    659a:	0f be       	out	0x3f, r0	; 63
    659c:	cd bf       	out	0x3d, r28	; 61
    659e:	ed 01       	movw	r28, r26
    65a0:	08 95       	ret

000065a2 <_exit>:
    65a2:	f8 94       	cli

000065a4 <__stop_program>:
    65a4:	ff cf       	rjmp	.-2      	; 0x65a4 <__stop_program>
